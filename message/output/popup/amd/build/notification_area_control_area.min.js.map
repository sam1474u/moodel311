{"version":3,"file":"notification_area_control_area.min.js","sources":["../src/notification_area_control_area.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the notification area on the notification page.\n *\n * @module     message_popup/notification_area_control_area\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/templates', 'core/notification', 'core/custom_interaction_events',\n        'message_popup/notification_repository', 'message_popup/notification_area_events'],\n    function($, Templates, DebugNotification, CustomEvents, NotificationRepo, NotificationAreaEvents) {\n\n    var SELECTORS = {\n        CONTAINER: '[data-region=\"notification-area\"]',\n        CONTENT: '[data-region=\"content\"]',\n        NOTIFICATION: '[data-region=\"notification-content-item-container\"]',\n        CAN_RECEIVE_FOCUS: 'input:not([type=\"hidden\"]), a[href], button, textarea, select, [tabindex]',\n    };\n\n    var TEMPLATES = {\n        NOTIFICATION: 'message_popup/notification_content_item',\n    };\n\n    /**\n     * Constructor for ControlArea\n     *\n     * @class\n     * @param {object} root The root element for the content area\n     * @param {int} userId The user id of the current user\n     */\n    var ControlArea = function(root, userId) {\n        this.root = $(root);\n        this.container = this.root.closest(SELECTORS.CONTAINER);\n        this.userId = userId;\n        this.content = this.root.find(SELECTORS.CONTENT);\n        this.offset = 0;\n        this.limit = 20;\n        this.initialLoad = false;\n        this.isLoading = false;\n        this.loadedAll = false;\n        this.notifications = {};\n\n        this.registerEventListeners();\n    };\n\n    /**\n     * Get the root element.\n     *\n     * @method getRoot\n     * @return {object} jQuery element\n     */\n    ControlArea.prototype.getRoot = function() {\n        return this.root;\n    };\n\n    /**\n     * Get the container element (which the control area is within).\n     *\n     * @method getContainer\n     * @return {object} jQuery element\n     */\n    ControlArea.prototype.getContainer = function() {\n        return this.container;\n    };\n\n    /**\n     * Get the user id.\n     *\n     * @method getUserId\n     * @return {int}\n     */\n    ControlArea.prototype.getUserId = function() {\n        return this.userId;\n    };\n\n    /**\n     * Get the control area content element.\n     *\n     * @method getContent\n     * @return {object} jQuery element\n     */\n    ControlArea.prototype.getContent = function() {\n        return this.content;\n    };\n\n    /**\n     * Get the offset value for paginated loading of the\n     * notifications.\n     *\n     * @method getOffset\n     * @return {int}\n     */\n    ControlArea.prototype.getOffset = function() {\n        return this.offset;\n    };\n\n    /**\n     * Get the limit value for the paginated loading of the\n     * notifications.\n     *\n     * @method getLimit\n     * @return {int}\n     */\n    ControlArea.prototype.getLimit = function() {\n        return this.limit;\n    };\n\n    /**\n     * Set the offset value for the paginated loading of the\n     * notifications.\n     *\n     * @method setOffset\n     * @param {int} value The new offset value\n     */\n    ControlArea.prototype.setOffset = function(value) {\n        this.offset = value;\n    };\n\n    /**\n     * Set the limit value for the paginated loading of the\n     * notifications.\n     *\n     * @method setLimit\n     * @param {int} value The new limit value\n     */\n    ControlArea.prototype.setLimit = function(value) {\n        this.limit = value;\n    };\n\n    /**\n     * Increment the offset by the limit amount.\n     *\n     * @method incrementOffset\n     */\n    ControlArea.prototype.incrementOffset = function() {\n        this.offset += this.limit;\n    };\n\n    /**\n     * Flag the control area as loading.\n     *\n     * @method startLoading\n     */\n    ControlArea.prototype.startLoading = function() {\n        this.isLoading = true;\n        this.getRoot().addClass('loading');\n    };\n\n    /**\n     * Remove the loading flag from the control area.\n     *\n     * @method stopLoading\n     */\n    ControlArea.prototype.stopLoading = function() {\n        this.isLoading = false;\n        this.getRoot().removeClass('loading');\n    };\n\n    /**\n     * Check if the first load of notifications has been triggered.\n     *\n     * @method hasDoneInitialLoad\n     * @return {bool} true if first notification loaded, false otherwise\n     */\n    ControlArea.prototype.hasDoneInitialLoad = function() {\n        return this.initialLoad;\n    };\n\n    /**\n     * Check if all of the notifications have been loaded.\n     *\n     * @method hasLoadedAllContent\n     * @return {bool}\n     */\n    ControlArea.prototype.hasLoadedAllContent = function() {\n        return this.loadedAll;\n    };\n\n    /**\n     * Set the state of the loaded all content property.\n     *\n     * @method setLoadedAllContent\n     * @param {bool} val True if all content is loaded, false otherwise\n     */\n    ControlArea.prototype.setLoadedAllContent = function(val) {\n        this.loadedAll = val;\n    };\n\n    /**\n     * Save a notification in the cache.\n     *\n     * @method setCacheNotification\n     * @param {object} notification A notification returned by a webservice\n     */\n    ControlArea.prototype.setCacheNotification = function(notification) {\n        this.notifications[notification.id] = notification;\n    };\n\n    /**\n     * Retrieve a notification from the cache.\n     *\n     * @method getCacheNotification\n     * @param {int} id The id for the notification you wish to retrieve\n     * @return {object} A notification (as returned by a webservice)\n     */\n    ControlArea.prototype.getCacheNotification = function(id) {\n        return this.notifications[id];\n    };\n\n    /**\n     * Find the notification element in the control area for the given id.\n     *\n     * @method getNotificationElement\n     * @param {int} id The notification id\n     * @return {(object|null)} jQuery element or null\n     */\n    ControlArea.prototype.getNotificationElement = function(id) {\n        var element = this.getRoot().find(SELECTORS.NOTIFICATION + '[data-id=\"' + id + '\"]');\n        return element.length == 1 ? element : null;\n    };\n\n    /**\n     * Scroll the notification element into view within the control area, if it\n     * isn't already visible.\n     *\n     * @method scrollNotificationIntoView\n     * @param {object} notificationElement The jQuery notification element\n     */\n    ControlArea.prototype.scrollNotificationIntoView = function(notificationElement) {\n        var position = notificationElement.position();\n        var container = this.getRoot();\n        var relativeTop = position.top - container.scrollTop();\n\n        // If the element isn't in the view window.\n        if (relativeTop > container.innerHeight()) {\n            var height = notificationElement.outerHeight();\n            // Offset enough to make sure the notification will be in view.\n            height = height * 4;\n            var scrollTo = position.top - height;\n            container.scrollTop(scrollTo);\n        }\n    };\n\n    /**\n     * Show the full notification for the given notification element. The notification\n     * context is retrieved from the cache and send as data with an event to be\n     * rendered in the content area.\n     *\n     * @method showNotification\n     * @param {(int|object)} notificationElement The notification id or jQuery notification element\n     */\n    ControlArea.prototype.showNotification = function(notificationElement) {\n        if (typeof notificationElement !== 'object') {\n            // Assume it's an ID if it's not an object.\n            notificationElement = this.getNotificationElement(notificationElement);\n        }\n\n        if (notificationElement && notificationElement.length) {\n            this.getRoot().find(SELECTORS.NOTIFICATION).removeClass('selected');\n            notificationElement.addClass('selected').find(SELECTORS.CAN_RECEIVE_FOCUS).focus();\n            var notificationId = notificationElement.attr('data-id');\n            var notification = this.getCacheNotification(notificationId);\n            this.scrollNotificationIntoView(notificationElement);\n            // Create a new version of the notification to send with the notification so\n            // this copy isn't modified.\n            this.getContainer().trigger(NotificationAreaEvents.showNotification, [$.extend({}, notification)]);\n        }\n    };\n\n    /**\n     * Send a request to mark the notification as read in the server and remove the unread\n     * status from the element.\n     *\n     * @method markNotificationAsRead\n     * @param {object} notificationElement The jQuery notification element\n     * @return {object} jQuery promise\n     */\n    ControlArea.prototype.markNotificationAsRead = function(notificationElement) {\n        return NotificationRepo.markAsRead(notificationElement.attr('data-id')).done(function() {\n            notificationElement.removeClass('unread');\n        });\n    };\n\n\n    /**\n     * Render the notification data with the appropriate template and add it to the DOM.\n     *\n     * @method renderNotifications\n     * @param {array} notifications Array of notification data\n     * @return {object} jQuery promise that is resolved when all notifications have been\n     *                  rendered and added to the DOM\n     */\n    ControlArea.prototype.renderNotifications = function(notifications) {\n        var promises = [];\n        var container = this.getContent();\n\n        $.each(notifications, function(index, notification) {\n            // Need to remove the contexturl so the item isn't rendered\n            // as a link.\n            var contextUrl = notification.contexturl;\n            delete notification.contexturl;\n\n            var promise = Templates.render(TEMPLATES.NOTIFICATION, notification)\n            .then(function(html, js) {\n                // Restore it for the cache.\n                notification.contexturl = contextUrl;\n                this.setCacheNotification(notification);\n                // Pass the Rendered content out.\n                return {html: html, js: js};\n            }.bind(this));\n            promises.push(promise);\n        }.bind(this));\n\n        return $.when.apply($, promises).then(function() {\n            // Each of the promises in the when will pass its results as an argument to the function.\n            // The order of the arguments will be the order that the promises are passed to when()\n            // i.e. the first promise's results will be in the first argument.\n            $.each(arguments, function(index, argument) {\n                container.append(argument.html);\n                Templates.runTemplateJS(argument.js);\n            });\n            return;\n        });\n    };\n\n    /**\n     * Load notifications from the server and render them.\n     *\n     * @method loadMoreNotifications\n     * @return {object} jQuery promise\n     */\n    ControlArea.prototype.loadMoreNotifications = function() {\n        if (this.isLoading || this.hasLoadedAllContent()) {\n            return $.Deferred().resolve();\n        }\n\n        this.startLoading();\n        var request = {\n            limit: this.getLimit(),\n            offset: this.getOffset(),\n            useridto: this.getUserId(),\n        };\n\n        if (!this.initialLoad) {\n            // If this is the first load we may have been given a non-zero offset,\n            // in which case we need to load all notifications preceeding that offset\n            // to make sure the full list is rendered.\n            request.limit = this.getOffset() + this.getLimit();\n            request.offset = 0;\n        }\n\n        var promise = NotificationRepo.query(request).then(function(result) {\n            var notifications = result.notifications;\n            this.unreadCount = result.unreadcount;\n            this.setLoadedAllContent(!notifications.length || notifications.length < this.getLimit());\n            this.initialLoad = true;\n\n            if (notifications.length) {\n                this.incrementOffset();\n                return this.renderNotifications(notifications);\n            }\n\n            return false;\n        }.bind(this))\n        .always(function() {\n            this.stopLoading();\n        }.bind(this));\n\n        return promise;\n    };\n\n    /**\n     * Create the event listeners for the control area.\n     *\n     * @method registerEventListeners\n     */\n    ControlArea.prototype.registerEventListeners = function() {\n        CustomEvents.define(this.getRoot(), [\n            CustomEvents.events.activate,\n            CustomEvents.events.scrollBottom,\n            CustomEvents.events.scrollLock,\n            CustomEvents.events.up,\n            CustomEvents.events.down,\n        ]);\n\n        this.getRoot().on(CustomEvents.events.scrollBottom, function() {\n            this.loadMoreNotifications();\n        }.bind(this));\n\n        this.getRoot().on(CustomEvents.events.activate, SELECTORS.NOTIFICATION, function(e) {\n            var notificationElement = $(e.target).closest(SELECTORS.NOTIFICATION);\n            this.showNotification(notificationElement);\n        }.bind(this));\n\n        // Show the previous notification in the list.\n        this.getRoot().on(CustomEvents.events.up, SELECTORS.NOTIFICATION, function(e, data) {\n            var notificationElement = $(e.target).closest(SELECTORS.NOTIFICATION);\n            this.showNotification(notificationElement.prev());\n\n            data.originalEvent.preventDefault();\n        }.bind(this));\n\n        // Show the next notification in the list.\n        this.getRoot().on(CustomEvents.events.down, SELECTORS.NOTIFICATION, function(e, data) {\n            var notificationElement = $(e.target).closest(SELECTORS.NOTIFICATION);\n            this.showNotification(notificationElement.next());\n\n            data.originalEvent.preventDefault();\n        }.bind(this));\n\n        this.getContainer().on(NotificationAreaEvents.notificationShown, function(e, notification) {\n            if (!notification.read) {\n                var element = this.getNotificationElement(notification.id);\n\n                if (element) {\n                    this.markNotificationAsRead(element);\n                }\n\n                var cachedNotification = this.getCacheNotification(notification.id);\n\n                if (cachedNotification) {\n                    cachedNotification.read = true;\n                }\n            }\n        }.bind(this));\n    };\n\n    return ControlArea;\n});\n"],"names":["define","$","Templates","DebugNotification","CustomEvents","NotificationRepo","NotificationAreaEvents","SELECTORS","TEMPLATES","ControlArea","root","userId","this","container","closest","content","find","offset","limit","initialLoad","isLoading","loadedAll","notifications","registerEventListeners","prototype","getRoot","getContainer","getUserId","getContent","getOffset","getLimit","setOffset","value","setLimit","incrementOffset","startLoading","addClass","stopLoading","removeClass","hasDoneInitialLoad","hasLoadedAllContent","setLoadedAllContent","val","setCacheNotification","notification","id","getCacheNotification","getNotificationElement","element","length","scrollNotificationIntoView","notificationElement","position","top","scrollTop","innerHeight","height","outerHeight","scrollTo","showNotification","_typeof","focus","notificationId","attr","trigger","extend","markNotificationAsRead","markAsRead","done","renderNotifications","promises","each","index","contextUrl","contexturl","promise","render","then","html","js","bind","push","when","apply","arguments","argument","append","runTemplateJS","loadMoreNotifications","Deferred","resolve","request","useridto","query","result","unreadCount","unreadcount","always","events","activate","scrollBottom","scrollLock","up","down","on","e","target","data","prev","originalEvent","preventDefault","next","notificationShown","read","cachedNotification"],"mappings":"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"}