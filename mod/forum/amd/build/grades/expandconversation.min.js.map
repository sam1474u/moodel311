{"version":3,"file":"expandconversation.min.js","sources":["../../src/grades/expandconversation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module handles the creation of a Modal that shows the user's post in context of the entire discussion.\n *\n * @module     mod_forum/grades/expandconversation\n * @copyright  2019 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as ForumSelectors from './grader/selectors';\nimport Repository from 'mod_forum/repository';\nimport {exception as showException} from \"core/notification\";\nimport Templates from 'core/templates';\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\n\n/**\n * Find the Node containing the gradable details from the provided node by searching up the tree.\n *\n * @param {HTMLElement} node\n * @returns {HTMLElement}\n */\nconst findGradableNode = node => node.closest(ForumSelectors.expandConversation);\n\n/**\n * Show the post in context in a modal.\n *\n * @param {HTMLElement} rootNode The button that has been clicked\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst showPostInContext = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const postId = rootNode.dataset.postid;\n    const discussionId = rootNode.dataset.discussionid;\n    const discussionName = rootNode.dataset.name;\n    const experimentalDisplayMode = rootNode.dataset.experimentalDisplayMode == \"1\";\n\n    const [\n        allPosts,\n        modal,\n    ] = await Promise.all([\n        Repository.getDiscussionPosts(parseInt(discussionId)),\n        Modal.create({\n            title: discussionName,\n            large: true,\n            type: Modal.types.CANCEL\n        }),\n    ]);\n\n    const postsById = new Map(allPosts.posts.map(post => {\n        post.readonly = true;\n        post.hasreplies = false;\n        post.replies = [];\n        return [post.id, post];\n    }));\n\n    let posts = [];\n    allPosts.posts.forEach(post => {\n        if (post.parentid) {\n            const parent = postsById.get(post.parentid);\n            if (parent) {\n                post.parentauthorname = parent.author.fullname;\n                parent.hasreplies = true;\n                parent.replies.push(post);\n            } else {\n                posts.push(post);\n            }\n        } else {\n            posts.push(post);\n        }\n    });\n\n    // Handle hidden event.\n    modal.getRoot().on(ModalEvents.hidden, function() {\n        // Destroy when hidden.\n        modal.destroy();\n        try {\n            focusOnClose.focus();\n        } catch (e) {\n            // eslint-disable-line\n        }\n    });\n\n    modal.getRoot().on(ModalEvents.bodyRendered, () => {\n        const relevantPost = modal.getRoot()[0].querySelector(`#p${postId}`);\n        if (relevantPost) {\n            relevantPost.scrollIntoView({behavior: \"smooth\"});\n        }\n    });\n\n    modal.show();\n\n    // Note: We do not use await here because it messes with the Modal transitions.\n    const templatePromise = Templates.render('mod_forum/grades/grader/discussion/post_modal', {\n        posts,\n        experimentaldisplaymode: experimentalDisplayMode\n    });\n    modal.setBody(templatePromise);\n};\n\n/**\n * Register event listeners for the expand conversations button.\n *\n * @param {HTMLElement} rootNode The root to listen to.\n */\nexport const registerEventListeners = (rootNode) => {\n    rootNode.addEventListener('click', (e) => {\n        const rootNode = findGradableNode(e.target);\n\n        if (rootNode) {\n            e.preventDefault();\n\n            try {\n                showPostInContext(rootNode, {\n                    focusOnClose: e.target,\n                });\n            } catch (err) {\n                showException(err);\n            }\n        }\n    });\n};\n"],"names":["ForumSelectors","_interopRequireWildcard","_repository","_interopRequireDefault","_templates","Modal","ModalEvents","_ref","showPostInContext","regeneratorRuntime","mark","rootNode","_ref2$focusOnClose","focusOnClose","postId","discussionId","discussionName","experimentalDisplayMode","_yield$Promise$all","_yield$Promise$all2","allPosts","modal","postsById","posts","templatePromise","_args","arguments","wrap","_context","prev","next","length","undefined","dataset","postid","discussionid","name","Promise","all","Repository","getDiscussionPosts","parseInt","create","title","large","type","types","CANCEL","sent","_slicedToArray","Map","map","post","readonly","hasreplies","replies","id","forEach","parentid","parent","get","parentauthorname","author","fullname","push","getRoot","on","hidden","destroy","focus","e","bodyRendered","relevantPost","querySelector","scrollIntoView","behavior","show","Templates","render","experimentaldisplaymode","setBody","stop","_callee","_x","apply","this","addEventListener","target","closest","expandConversation","preventDefault","err","_notification","exception"],"mappings":"k9FAsBAA,eAAAC,wBAAAD,gBACAE,YAAAC,uBAAAD,aAEAE,WAAAD,uBAAAC,YACAC,MAAAJ,wBAAAI,OACAC,YAAAL,wBAAAK,aAQA,OASuBC,KAAjBC,sBAAiBC,mBAAAC,MAAG,iBAAMC,UAAN,IAAAC,mBAAAC,aAAAC,OAAAC,aAAAC,eAAAC,wBAAAC,mBAAAC,oBAAAC,SAAAC,MAAAC,UAAAC,MAAAC,gBAAAC,MAAAC,UAAA,OAAAjB,mBAAAkB,MAAA,SAAAC,UAAA,OAAA,OAAAA,SAAAC,KAAAD,SAAAE,MAAA,KAAA,EAAA,OACtBjB,oBADsBY,MAAAM,OAAA,QAAAC,IAAAP,MAAA,GAAAA,MAAA,GAEtB,CAAA,GADAZ,aAAAA,yCAAe,KADOD,mBAGhBE,OAASH,SAASsB,QAAQC,OAC1BnB,aAAeJ,SAASsB,QAAQE,aAChCnB,eAAiBL,SAASsB,QAAQG,KAClCnB,wBAAsE,KAA5CN,SAASsB,QAAQhB,wBAN3BW,SAAAE,KAAA,EAWZO,QAAQC,IAAI,CAClBC,oBAAWC,mBAAmBC,SAAS1B,eACvCV,MAAMqC,OAAO,CACTC,MAAO3B,eACP4B,OAAO,EACPC,KAAMxC,MAAMyC,MAAMC,WAhBJ,KAAA,EAAA7B,mBAAAU,SAAAoB,KAAA7B,oBAAA8B,eAAA/B,mBAAA,GASlBE,SATkBD,oBAAA,GAUlBE,MAVkBF,oBAAA,GAoBhBG,UAAY,IAAI4B,IAAI9B,SAASG,MAAM4B,KAAI,SAAAC,MAIzC,OAHAA,KAAKC,UAAW,EAChBD,KAAKE,YAAa,EAClBF,KAAKG,QAAU,GACR,CAACH,KAAKI,GAAIJ,KAJK,KAOtB7B,MAAQ,GACZH,SAASG,MAAMkC,SAAQ,SAAAL,MACfA,GAAAA,KAAKM,SAAU,CACTC,IAAAA,OAASrC,UAAUsC,IAAIR,KAAKM,UAC9BC,QACAP,KAAKS,iBAAmBF,OAAOG,OAAOC,SACtCJ,OAAOL,YAAa,EACpBK,OAAOJ,QAAQS,KAAKZ,OAEpB7B,MAAMyC,KAAKZ,KAElB,MACG7B,MAAMyC,KAAKZ,KAElB,IAGD/B,MAAM4C,UAAUC,GAAG5D,YAAY6D,QAAQ,WAEnC9C,MAAM+C,UACF,IACAvD,aAAawD,OAChB,CAAC,MAAOC,GAER,CACJ,IAEDjD,MAAM4C,UAAUC,GAAG5D,YAAYiE,cAAc,WACnCC,IAAAA,aAAenD,MAAM4C,UAAU,GAAGQ,cAAmB3D,KAAAA,OAAAA,SACvD0D,cACAA,aAAaE,eAAe,CAACC,SAAU,UAE9C,IAEDtD,MAAMuD,OAGApD,gBAAkBqD,WAAAA,QAAUC,OAAO,gDAAiD,CACtFvD,MAAAA,MACAwD,wBAAyB9D,0BAE7BI,MAAM2D,QAAQxD,iBApEQ,KAAA,GAAA,IAAA,MAAA,OAAAI,SAAAqD,OAAA,GAAAC,QAAH,IAAA3E,oTAAA,SAAA4E,IAAA,OAAA5E,KAAA6E,MAAAC,KAAA3D,UAAA,mCA4Ee,SAACf,UACnCA,SAAS2E,iBAAiB,SAAS,SAAChB,GAChC,IAAM3D,SAA4B2D,EAAEiB,OAvFNC,QAAQxF,eAAeyF,oBAyFrD,GAAI9E,SAAU,CACV2D,EAAEoB,iBAEE,IACAlF,kBAAkBG,SAAU,CACxBE,aAAcyD,EAAEiB,QAFxB,CAIE,MAAOI,MACL,EAAAC,cAAAC,WAAcF,IACjB,CACJ,CACJ,GACJ"}