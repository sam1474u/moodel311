{"version":3,"file":"grader.min.js","sources":["../../../src/local/grades/grader.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/local/grades/grader\n * @copyright  2019 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Templates from 'core/templates';\nimport Selectors from './local/grader/selectors';\nimport getUserPicker from './local/grader/user_picker';\nimport {createLayout as createFullScreenWindow} from 'mod_forum/local/layout/fullscreen';\nimport getGradingPanelFunctions from './local/grader/gradingpanel';\nimport {add as addToast} from 'core/toast';\nimport {addNotification} from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport {failedUpdate} from 'core_grades/grades/grader/gradingpanel/normalise';\nimport {addIconToContainerWithPromise} from 'core/loadingicon';\nimport {debounce} from 'core/utils';\nimport {fillInitialValues} from 'core_grades/grades/grader/gradingpanel/comparison';\nimport * as Modal from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport {subscribe} from 'core/pubsub';\nimport DrawerEvents from 'core/drawer_events';\n\nconst templateNames = {\n    grader: {\n        app: 'mod_forum/local/grades/grader',\n        gradingPanel: {\n            error: 'mod_forum/local/grades/local/grader/gradingpanel/error',\n        },\n        searchResults: 'mod_forum/local/grades/local/grader/user_picker/user_search',\n        status: 'mod_forum/local/grades/local/grader/status',\n    },\n};\n\n/**\n * Helper function that replaces the user picker placeholder with what we get back from the user picker class.\n *\n * @param {HTMLElement} root\n * @param {String} html\n */\nconst displayUserPicker = (root, html) => {\n    const pickerRegion = root.querySelector(Selectors.regions.pickerRegion);\n    Templates.replaceNodeContents(pickerRegion, html, '');\n};\n\n/**\n * To be removed, this is now done as a part of Templates.renderForPromise()\n *\n * @param {String} html\n * @param {String} js\n * @returns {array} An array containing the HTML, and JS.\n */\nconst fetchContentFromRender = (html, js) => {\n    return [html, js];\n};\n\n/**\n * Here we build the function that is passed to the user picker that'll handle updating the user content area\n * of the grading interface.\n *\n * @param {HTMLElement} root\n * @param {Function} getContentForUser\n * @param {Function} getGradeForUser\n * @param {Function} saveGradeForUser\n * @return {Function}\n */\nconst getUpdateUserContentFunction = (root, getContentForUser, getGradeForUser, saveGradeForUser) => {\n    let firstLoad = true;\n\n    return async(user) => {\n        const spinner = firstLoad ? null : addIconToContainerWithPromise(root);\n        const [\n            [html, js],\n            userGrade,\n        ] = await Promise.all([\n            getContentForUser(user.id).then(fetchContentFromRender),\n            getGradeForUser(user.id),\n        ]);\n        Templates.replaceNodeContents(root.querySelector(Selectors.regions.moduleReplace), html, js);\n\n        const [\n            gradingPanelHtml,\n            gradingPanelJS\n        ] = await Templates.render(userGrade.templatename, userGrade.grade).then(fetchContentFromRender);\n        const panelContainer = root.querySelector(Selectors.regions.gradingPanelContainer);\n        const panel = panelContainer.querySelector(Selectors.regions.gradingPanel);\n        Templates.replaceNodeContents(panel, gradingPanelHtml, gradingPanelJS);\n\n        const form = panel.querySelector('form');\n        fillInitialValues(form);\n\n        form.addEventListener('submit', event => {\n            saveGradeForUser(user);\n            event.preventDefault();\n        });\n\n        panelContainer.scrollTop = 0;\n        firstLoad = false;\n\n        if (spinner) {\n            spinner.resolve();\n        }\n        return userGrade;\n    };\n};\n\n/**\n * Show the search results container and hide the user picker and body content.\n *\n * @param {HTMLElement} bodyContainer The container element for the body content\n * @param {HTMLElement} userPickerContainer The container element for the user picker\n * @param {HTMLElement} searchResultsContainer The container element for the search results\n */\nconst showSearchResultContainer = (bodyContainer, userPickerContainer, searchResultsContainer) => {\n    bodyContainer.classList.add('hidden');\n    userPickerContainer.classList.add('hidden');\n    searchResultsContainer.classList.remove('hidden');\n};\n\n/**\n * Hide the search results container and show the user picker and body content.\n *\n * @param {HTMLElement} bodyContainer The container element for the body content\n * @param {HTMLElement} userPickerContainer The container element for the user picker\n * @param {HTMLElement} searchResultsContainer The container element for the search results\n */\nconst hideSearchResultContainer = (bodyContainer, userPickerContainer, searchResultsContainer) => {\n    bodyContainer.classList.remove('hidden');\n    userPickerContainer.classList.remove('hidden');\n    searchResultsContainer.classList.add('hidden');\n};\n\n/**\n * Toggles the visibility of the user search.\n *\n * @param {HTMLElement} toggleSearchButton The button that toggles the search\n * @param {HTMLElement} searchContainer The container element for the user search\n * @param {HTMLElement} searchInput The input element for searching\n */\nconst showUserSearchInput = (toggleSearchButton, searchContainer, searchInput) => {\n    searchContainer.classList.remove('collapsed');\n    toggleSearchButton.setAttribute('aria-expanded', 'true');\n    toggleSearchButton.classList.add('expand');\n    toggleSearchButton.classList.remove('collapse');\n\n    // Hide the grading info container from screen reader.\n    const gradingInfoContainer = searchContainer.parentElement.querySelector(Selectors.regions.gradingInfoContainer);\n    gradingInfoContainer.setAttribute('aria-hidden', 'true');\n\n    // Hide the collapse grading drawer button from screen reader.\n    const collapseGradingDrawer = searchContainer.parentElement.querySelector(Selectors.buttons.collapseGradingDrawer);\n    collapseGradingDrawer.setAttribute('aria-hidden', 'true');\n    collapseGradingDrawer.setAttribute('tabindex', '-1');\n\n    searchInput.focus();\n};\n\n/**\n * Toggles the visibility of the user search.\n *\n * @param {HTMLElement} toggleSearchButton The button that toggles the search\n * @param {HTMLElement} searchContainer The container element for the user search\n * @param {HTMLElement} searchInput The input element for searching\n */\nconst hideUserSearchInput = (toggleSearchButton, searchContainer, searchInput) => {\n    searchContainer.classList.add('collapsed');\n    toggleSearchButton.setAttribute('aria-expanded', 'false');\n    toggleSearchButton.classList.add('collapse');\n    toggleSearchButton.classList.remove('expand');\n    toggleSearchButton.focus();\n\n    // Show the grading info container to screen reader.\n    const gradingInfoContainer = searchContainer.parentElement.querySelector(Selectors.regions.gradingInfoContainer);\n    gradingInfoContainer.removeAttribute('aria-hidden');\n\n    // Show the collapse grading drawer button from screen reader.\n    const collapseGradingDrawer = searchContainer.parentElement.querySelector(Selectors.buttons.collapseGradingDrawer);\n    collapseGradingDrawer.removeAttribute('aria-hidden');\n    collapseGradingDrawer.setAttribute('tabindex', '0');\n\n    searchInput.value = '';\n};\n\n/**\n * Find the list of users who's names include the given search term.\n *\n * @param {Array} userList List of users for the grader\n * @param {String} searchTerm The search term to match\n * @return {Array}\n */\nconst searchForUsers = (userList, searchTerm) => {\n    if (searchTerm === '') {\n        return userList;\n    }\n\n    searchTerm = searchTerm.toLowerCase();\n\n    return userList.filter((user) => {\n        return user.fullname.toLowerCase().includes(searchTerm);\n    });\n};\n\n/**\n * Render the list of users in the search results area.\n *\n * @param {HTMLElement} searchResultsContainer The container element for search results\n * @param {Array} users The list of users to display\n */\nconst renderSearchResults = async(searchResultsContainer, users) => {\n    const {html, js} = await Templates.renderForPromise(templateNames.grader.searchResults, {users});\n    Templates.replaceNodeContents(searchResultsContainer, html, js);\n};\n\n/**\n * Add click handlers to the buttons in the header of the grading interface.\n *\n * @param {HTMLElement} graderLayout\n * @param {Object} userPicker\n * @param {Function} saveGradeFunction\n * @param {Array} userList List of users for the grader.\n */\nconst registerEventListeners = (graderLayout, userPicker, saveGradeFunction, userList) => {\n    const graderContainer = graderLayout.getContainer();\n    const toggleSearchButton = graderContainer.querySelector(Selectors.buttons.toggleSearch);\n    const searchInputContainer = graderContainer.querySelector(Selectors.regions.userSearchContainer);\n    const searchInput = searchInputContainer.querySelector(Selectors.regions.userSearchInput);\n    const bodyContainer = graderContainer.querySelector(Selectors.regions.bodyContainer);\n    const userPickerContainer = graderContainer.querySelector(Selectors.regions.pickerRegion);\n    const searchResultsContainer = graderContainer.querySelector(Selectors.regions.searchResultsContainer);\n\n    graderContainer.addEventListener('click', (e) => {\n        if (e.target.closest(Selectors.buttons.toggleFullscreen)) {\n            e.stopImmediatePropagation();\n            e.preventDefault();\n            graderLayout.toggleFullscreen();\n\n            return;\n        }\n\n        if (e.target.closest(Selectors.buttons.closeGrader)) {\n            e.stopImmediatePropagation();\n            e.preventDefault();\n\n            graderLayout.close();\n\n            return;\n        }\n\n        if (e.target.closest(Selectors.buttons.saveGrade)) {\n            saveGradeFunction(userPicker.currentUser);\n        }\n\n        if (e.target.closest(Selectors.buttons.toggleSearch)) {\n            if (toggleSearchButton.getAttribute('aria-expanded') === 'true') {\n                // Search is open so let's close it.\n                hideUserSearchInput(toggleSearchButton, searchInputContainer, searchInput);\n                hideSearchResultContainer(bodyContainer, userPickerContainer, searchResultsContainer);\n                searchResultsContainer.innerHTML = '';\n            } else {\n                // Search is closed so let's open it.\n                showUserSearchInput(toggleSearchButton, searchInputContainer, searchInput);\n                showSearchResultContainer(bodyContainer, userPickerContainer, searchResultsContainer);\n                renderSearchResults(searchResultsContainer, userList);\n            }\n\n            return;\n        }\n\n        const selectUserButton = e.target.closest(Selectors.buttons.selectUser);\n        if (selectUserButton) {\n            const userId = selectUserButton.getAttribute('data-userid');\n            const user = userList.find(user => user.id == userId);\n            userPicker.setUserId(userId);\n            userPicker.showUser(user);\n            hideUserSearchInput(toggleSearchButton, searchInputContainer, searchInput);\n            hideSearchResultContainer(bodyContainer, userPickerContainer, searchResultsContainer);\n            searchResultsContainer.innerHTML = '';\n        }\n    });\n\n    // Debounce the search input so that it only executes 300 milliseconds after the user has finished typing.\n    searchInput.addEventListener('input', debounce(() => {\n        const users = searchForUsers(userList, searchInput.value);\n        renderSearchResults(searchResultsContainer, users);\n    }, 300));\n\n    // Remove the right margin of the content container when the grading panel is hidden so that it expands to full-width.\n    subscribe(DrawerEvents.DRAWER_HIDDEN, (drawerRoot) => {\n        const gradingPanel = drawerRoot[0];\n        if (gradingPanel.querySelector(Selectors.regions.gradingPanel)) {\n            setContentContainerMargin(graderContainer, 0);\n        }\n    });\n\n    // Bring back the right margin of the content container when the grading panel is shown to give space for the grading panel.\n    subscribe(DrawerEvents.DRAWER_SHOWN, (drawerRoot) => {\n        const gradingPanel = drawerRoot[0];\n        if (gradingPanel.querySelector(Selectors.regions.gradingPanel)) {\n            setContentContainerMargin(graderContainer, gradingPanel.offsetWidth);\n        }\n    });\n};\n\n/**\n * Adjusts the right margin of the content container.\n *\n * @param {HTMLElement} graderContainer The container for the grader app.\n * @param {Number} rightMargin The right margin value.\n */\nconst setContentContainerMargin = (graderContainer, rightMargin) => {\n    const contentContainer = graderContainer.querySelector(Selectors.regions.moduleContainer);\n    if (contentContainer) {\n        contentContainer.style.marginRight = `${rightMargin}px`;\n    }\n};\n\n/**\n * Get the function used to save a user grade.\n *\n * @param {HTMLElement} root The container for the grader\n * @param {Function} setGradeForUser The function that will be called.\n * @return {Function}\n */\nconst getSaveUserGradeFunction = (root, setGradeForUser) => {\n    return async(user) => {\n        try {\n            root.querySelector(Selectors.regions.gradingPanelErrors).innerHTML = '';\n            const result = await setGradeForUser(\n                user.id,\n                root.querySelector(Selectors.values.sendStudentNotifications).value,\n                root.querySelector(Selectors.regions.gradingPanel)\n            );\n            if (result.success) {\n                addToast(await getString('grades:gradesavedfor', 'mod_forum', user));\n            }\n            if (result.failed) {\n                displayGradingError(root, user, result.error);\n            }\n\n            return result;\n        } catch (err) {\n            displayGradingError(root, user, err);\n\n            return failedUpdate(err);\n        }\n    };\n};\n\n/**\n * Display a grading error, typically from a failed save.\n *\n * @param {HTMLElement} root The container for the grader\n * @param {Object} user The user who was errored\n * @param {Object} err The details of the error\n */\nconst displayGradingError = async(root, user, err) => {\n    const [\n        {html, js},\n        errorString\n    ] = await Promise.all([\n        Templates.renderForPromise(templateNames.grader.gradingPanel.error, {error: err}),\n        await getString('grades:gradesavefailed', 'mod_forum', {error: err.message, ...user}),\n    ]);\n\n    Templates.replaceNodeContents(root.querySelector(Selectors.regions.gradingPanelErrors), html, js);\n    addToast(errorString);\n};\n\n/**\n * Launch the grader interface with the specified parameters.\n *\n * @param {Function} getListOfUsers A function to get the list of users\n * @param {Function} getContentForUser A function to get the content for a specific user\n * @param {Function} getGradeForUser A function get the grade details for a specific user\n * @param {Function} setGradeForUser A function to set the grade for a specific user\n * @param {Object} preferences Preferences for the launch function\n * @param {Number} preferences.initialUserId\n * @param {string} preferences.moduleName\n * @param {string} preferences.courseName\n * @param {string} preferences.courseUrl\n * @param {boolean} preferences.sendStudentNotifications\n * @param {null|HTMLElement} preferences.focusOnClose\n */\nexport const launch = async(getListOfUsers, getContentForUser, getGradeForUser, setGradeForUser, {\n    initialUserId = null,\n    moduleName,\n    courseName,\n    courseUrl,\n    sendStudentNotifications,\n    focusOnClose = null,\n} = {}) => {\n\n    // We need all of these functions to be executed in series, if one step runs before another the interface\n    // will not work.\n\n    // We need this promise to resolve separately so that we can avoid loading the whole interface if there are no users.\n    const userList = await getListOfUsers();\n    if (!userList.length) {\n        addNotification({\n            message: await getString('nouserstograde', 'core_grades'),\n            type: \"error\",\n        });\n        return;\n    }\n\n    // Now that we have confirmed there are at least some users let's boot up the grader interface.\n    const [\n        graderLayout,\n        {html, js},\n    ] = await Promise.all([\n        createFullScreenWindow({\n            fullscreen: false,\n            showLoader: false,\n            focusOnClose,\n        }),\n        Templates.renderForPromise(templateNames.grader.app, {\n            moduleName,\n            courseName,\n            courseUrl,\n            drawer: {show: true},\n            defaultsendnotifications: sendStudentNotifications,\n        }),\n    ]);\n\n    const graderContainer = graderLayout.getContainer();\n\n    const saveGradeFunction = getSaveUserGradeFunction(graderContainer, setGradeForUser);\n\n    Templates.replaceNodeContents(graderContainer, html, js);\n    const updateUserContent = getUpdateUserContentFunction(graderContainer, getContentForUser, getGradeForUser, saveGradeFunction);\n\n    const userIds = userList.map(user => user.id);\n    const statusContainer = graderContainer.querySelector(Selectors.regions.statusContainer);\n    // Fetch the userpicker for display.\n    const userPicker = await getUserPicker(\n        userList,\n        async(user) => {\n            const userGrade = await updateUserContent(user);\n            const renderContext = {\n                status: userGrade.hasgrade,\n                index: userIds.indexOf(user.id) + 1,\n                total: userList.length\n            };\n            Templates.render(templateNames.grader.status, renderContext).then(html => {\n                statusContainer.innerHTML = html;\n                return html;\n            }).catch();\n        },\n        saveGradeFunction,\n        {\n            initialUserId,\n        },\n    );\n\n    // Register all event listeners.\n    registerEventListeners(graderLayout, userPicker, saveGradeFunction, userList);\n\n    // Display the newly created user picker.\n    displayUserPicker(graderContainer, userPicker.rootNode);\n};\n\n/**\n * Show the grade for a specific user.\n *\n * @param {Function} getGradeForUser A function get the grade details for a specific user\n * @param {Number} userid The ID of a specific user\n * @param {String} moduleName the name of the module\n * @param {object} param\n * @param {null|HTMLElement} param.focusOnClose\n */\nexport const view = async(getGradeForUser, userid, moduleName, {\n    focusOnClose = null,\n} = {}) => {\n\n    const [\n        userGrade,\n        modal,\n    ] = await Promise.all([\n        getGradeForUser(userid),\n        Modal.create({\n            title: moduleName,\n            large: true,\n            type: Modal.types.CANCEL\n        }),\n    ]);\n\n    const spinner = addIconToContainerWithPromise(modal.getRoot());\n\n    // Handle hidden event.\n    modal.getRoot().on(ModalEvents.hidden, function() {\n        // Destroy when hidden.\n        modal.destroy();\n        if (focusOnClose) {\n            try {\n                focusOnClose.focus();\n            } catch (e) {\n                // eslint-disable-line\n            }\n        }\n    });\n\n    modal.show();\n    const output = document.createElement('div');\n    const {html, js} = await Templates.renderForPromise('mod_forum/local/grades/view_grade', userGrade);\n    Templates.replaceNodeContents(output, html, js);\n\n    // Note: We do not use await here because it messes with the Modal transitions.\n    const [gradeHTML, gradeJS] = await renderGradeTemplate(userGrade);\n    const gradeReplace = output.querySelector('[data-region=\"grade-template\"]');\n    Templates.replaceNodeContents(gradeReplace, gradeHTML, gradeJS);\n    modal.setBody(output.outerHTML);\n    spinner.resolve();\n};\n\nconst renderGradeTemplate = async(userGrade) => {\n    const {html, js} = await Templates.renderForPromise(userGrade.templatename, userGrade.grade);\n    return [html, js];\n};\nexport {getGradingPanelFunctions};\n"],"names":["_templates","_interopRequireDefault","_selectors","_user_picker","_gradingpanel","Modal","_interopRequireWildcard","ModalEvents","_drawer_events","_ref2","_ref4","_ref5","templateNames","grader","app","gradingPanel","error","searchResults","status","displayUserPicker","root","html","pickerRegion","querySelector","Selectors","regions","Templates","replaceNodeContents","fetchContentFromRender","js","getUpdateUserContentFunction","getContentForUser","getGradeForUser","saveGradeForUser","firstLoad","_ref","_asyncToGenerator","regeneratorRuntime","mark","user","spinner","_yield$Promise$all","_yield$Promise$all2","_yield$Promise$all2$","userGrade","_yield$Templates$rend","_yield$Templates$rend2","gradingPanelHtml","gradingPanelJS","panelContainer","panel","form","wrap","_context","prev","next","Promise","_loadingicon","addIconToContainerWithPromise","all","id","then","sent","_slicedToArray","moduleReplace","render","templatename","grade","gradingPanelContainer","_comparison","fillInitialValues","addEventListener","event","preventDefault","scrollTop","resolve","abrupt","stop","_callee","_x","apply","this","arguments","hideSearchResultContainer","bodyContainer","userPickerContainer","searchResultsContainer","classList","remove","add","hideUserSearchInput","toggleSearchButton","searchContainer","searchInput","setAttribute","focus","parentElement","gradingInfoContainer","removeAttribute","collapseGradingDrawer","buttons","value","renderSearchResults","_callee2","users","_yield$Templates$rend3","_context2","renderForPromise","_x2","_x3","registerEventListeners","graderLayout","userPicker","saveGradeFunction","userList","graderContainer","getContainer","toggleSearch","searchInputContainer","userSearchContainer","userSearchInput","e","target","closest","toggleFullscreen","stopImmediatePropagation","closeGrader","close","saveGrade","currentUser","getAttribute","innerHTML","showUserSearchInput","showSearchResultContainer","selectUserButton","selectUser","userId","find","setUserId","showUser","searchTerm","toLowerCase","filter","fullname","includes","searchForUsers","_pubsub","subscribe","DrawerEvents","DRAWER_HIDDEN","drawerRoot","setContentContainerMargin","DRAWER_SHOWN","offsetWidth","rightMargin","contentContainer","moduleContainer","style","marginRight","getSaveUserGradeFunction","setGradeForUser","_ref3","result","_context3","gradingPanelErrors","values","sendStudentNotifications","success","t0","addToast","t1","failed","displayGradingError","t2","_normalise","failedUpdate","_callee3","_x4","err","_yield$Promise$all3","_yield$Promise$all4","_yield$Promise$all4$","errorString","_context4","_str","get_string","_objectSpread","message","t3","call","_toast","_callee4","_x5","_x6","_x7","launch","getListOfUsers","_ref6","_ref6$initialUserId","initialUserId","moduleName","courseName","courseUrl","_ref6$focusOnClose","focusOnClose","_yield$Promise$all5","_yield$Promise$all6","_yield$Promise$all6$","updateUserContent","userIds","statusContainer","_args6","_context6","length","undefined","addNotification","type","_fullscreen","createLayout","fullscreen","showLoader","drawer","show","defaultsendnotifications","map","_ref7","renderContext","_context5","hasgrade","index","indexOf","total","catch","_callee5","_x12","rootNode","_callee6","_x8","_x9","_x10","_x11","_ref8","view","userid","_ref9$focusOnClose","_yield$Promise$all7","_yield$Promise$all8","modal","output","_yield$Templates$rend4","_yield$renderGradeTem","_yield$renderGradeTem2","gradeHTML","gradeJS","gradeReplace","_args7","_context7","create","title","large","types","CANCEL","getRoot","on","hidden","destroy","document","createElement","renderGradeTemplate","setBody","outerHTML","_callee7","_x13","_x14","_x15","_ref10","_yield$Templates$rend5","_context8","_callee8","_x16"],"mappings":"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"}