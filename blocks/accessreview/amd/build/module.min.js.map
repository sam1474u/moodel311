{"version":3,"file":"module.min.js","sources":["../src/module.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manager for the accessreview block.\n *\n * @module block_accessreview/module\n * @author      Max Larkin <max@brickfieldlabs.ie>\n * @copyright   2020 Brickfield Education Labs <max@brickfieldlabs.ie>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport * as Templates from 'core/templates';\nimport {exception as displayError} from 'core/notification';\n\n/**\n * The number of colours used to represent the heatmap. (Indexed on 0.)\n * @type {number}\n */\nconst numColours = 2;\n\n/**\n * The toggle state of the heatmap.\n * @type {boolean}\n */\nlet toggleState = true;\n\n/**\n * Renders the HTML template onto a particular HTML element.\n * @param {HTMLElement} element The element to attach the HTML to.\n * @param {number} errorCount The number of errors on this module/section.\n * @param {number} checkCount The number of checks triggered on this module/section.\n * @param {String} displayFormat\n * @param {Number} minViews\n * @param {Number} viewDelta\n * @returns {Promise}\n */\nconst renderTemplate = (element, errorCount, checkCount, displayFormat, minViews, viewDelta) => {\n    // Calculate a weight?\n    const weight = parseInt((errorCount - minViews) / viewDelta * numColours);\n\n    const context = {\n        resultPassed: !errorCount,\n        classList: '',\n        passRate: {\n            errorCount,\n            checkCount,\n            failureRate: Math.round(errorCount / checkCount * 100),\n        },\n    };\n\n    if (!element) {\n        return Promise.resolve();\n    }\n\n    const elementClassList = ['block_accessreview'];\n    if (context.resultPassed) {\n        elementClassList.push('block_accessreview_success');\n    } else if (weight) {\n        elementClassList.push('block_accessreview_danger');\n    } else {\n        elementClassList.push('block_accessreview_warning');\n    }\n\n    const showIcons = (displayFormat == 'showicons') || (displayFormat == 'showboth');\n    const showBackground = (displayFormat == 'showbackground') || (displayFormat == 'showboth');\n\n    if (showBackground && !showIcons) {\n        // Only the background is displayed.\n        // No need to display the template.\n        // Note: The case where both the background and icons are shown is handled later to avoid jankiness.\n        element.classList.add(...elementClassList, 'alert');\n\n        return Promise.resolve();\n    }\n\n    if (showIcons && !showBackground) {\n        context.classList = elementClassList.join(' ');\n    }\n\n    // The icons are displayed either with, or without, the background.\n    return Templates.renderForPromise('block_accessreview/status', context)\n    .then(({html, js}) => {\n        Templates.appendNodeContents(element, html, js);\n\n        if (showBackground) {\n            element.classList.add(...elementClassList, 'alert');\n        }\n\n        return;\n    })\n    .catch();\n};\n\n/**\n * Applies the template to all sections and modules on the course page.\n *\n * @param {Number} courseId\n * @param {String} displayFormat\n * @param {Boolean} updatePreference\n * @returns {Promise}\n */\nconst showAccessMap = (courseId, displayFormat, updatePreference = false) => {\n    // Get error data.\n    return Promise.all(fetchReviewData(courseId, updatePreference))\n    .then(([sectionData, moduleData]) => {\n        // Get total data.\n        const {minViews, viewDelta} = getErrorTotals(sectionData, moduleData);\n\n        sectionData.forEach(section => {\n            const element = document.querySelector(`#section-${section.section} .summary`);\n            if (!element) {\n                return;\n            }\n\n            renderTemplate(element, section.numerrors, section.numchecks, displayFormat, minViews, viewDelta);\n        });\n\n        moduleData.forEach(module => {\n            const element = document.getElementById(`module-${module.cmid}`);\n            if (!element) {\n                return;\n            }\n\n            renderTemplate(element, module.numerrors, module.numchecks, displayFormat, minViews, viewDelta);\n        });\n\n        // Change the icon display.\n        document.querySelector('.icon-accessmap').classList.remove(...['fa-eye-slash']);\n        document.querySelector('.icon-accessmap').classList.add(...['fa-eye']);\n\n        return {\n            sectionData,\n            moduleData,\n        };\n    })\n    .catch(displayError);\n};\n\n\n/**\n * Hides or removes the templates from the HTML of the current page.\n *\n * @param {Boolean} updatePreference\n */\nconst hideAccessMap = (updatePreference = false) => {\n    // Removes the added elements.\n    document.querySelectorAll('.block_accessreview_view').forEach(node => node.remove());\n\n    const classList = [\n        'block_accessreview',\n        'block_accessreview_success',\n        'block_accessreview_warning',\n        'block_accessreview_danger',\n        'block_accessreview_view',\n        'alert',\n    ];\n\n    // Removes the added classes.\n    document.querySelectorAll('.block_accessreview').forEach(node => node.classList.remove(...classList));\n\n    if (updatePreference) {\n        setToggleStatePreference(false);\n    }\n\n    // Change the icon display.\n    document.querySelector('.icon-accessmap').classList.remove(...['fa-eye']);\n    document.querySelector('.icon-accessmap').classList.add(...['fa-eye-slash']);\n};\n\n\n/**\n * Toggles the heatmap on/off.\n *\n * @param {Number} courseId\n * @param {String} displayFormat\n */\nconst toggleAccessMap = (courseId, displayFormat) => {\n    toggleState = !toggleState;\n    if (!toggleState) {\n        hideAccessMap(true);\n    } else {\n        showAccessMap(courseId, displayFormat, true);\n    }\n};\n\n/**\n * Parses information on the errors, generating the min, max and totals.\n *\n * @param {Object[]} sectionData The error data for course sections.\n * @param {Object[]} moduleData The error data for course modules.\n * @returns {Object} An object representing the extra error information.\n */\nconst getErrorTotals = (sectionData, moduleData) => {\n    const totals = {\n        totalErrors: 0,\n        totalUsers: 0,\n        minViews: 0,\n        maxViews: 0,\n        viewDelta: 0,\n    };\n\n    [].concat(sectionData, moduleData).forEach(item => {\n        totals.totalErrors += item.numerrors;\n        if (item.numerrors < totals.minViews) {\n            totals.minViews = item.numerrors;\n        }\n\n        if (item.numerrors > totals.maxViews) {\n            totals.maxViews = item.numerrors;\n        }\n        totals.totalUsers += item.numchecks;\n    });\n\n    totals.viewDelta = totals.maxViews - totals.minViews + 1;\n\n    return totals;\n};\n\nconst registerEventListeners = (courseId, displayFormat) => {\n    document.addEventListener('click', e => {\n        if (e.target.closest('#toggle-accessmap')) {\n            e.preventDefault();\n            toggleAccessMap(courseId, displayFormat);\n        }\n    });\n};\n\n/**\n * Set the user preference for the toggle value.\n *\n * @param   {Boolean} toggleState\n * @returns {Promise}\n */\nconst getTogglePreferenceParams = toggleState => {\n    return {\n        methodname: 'core_user_update_user_preferences',\n        args: {\n            preferences: [{\n                type: 'block_accessreviewtogglestate',\n                value: toggleState,\n            }],\n        }\n    };\n};\n\nconst setToggleStatePreference = toggleState => fetchMany([getTogglePreferenceParams(toggleState)]);\n\n/**\n * Fetch the review data.\n *\n * @param   {Number} courseid\n * @param {Boolean} updatePreference\n * @returns {Promise[]}\n */\nconst fetchReviewData = (courseid, updatePreference = false) => {\n    const calls = [\n        {\n            methodname: 'block_accessreview_get_section_data',\n            args: {courseid}\n        },\n        {\n            methodname: 'block_accessreview_get_module_data',\n            args: {courseid}\n        },\n    ];\n\n    if (updatePreference) {\n        calls.push(getTogglePreferenceParams(true));\n    }\n\n    return fetchMany(calls);\n};\n\n/**\n * Setting up the access review module.\n * @param {number} toggled A number represnting the state of the review toggle.\n * @param {string} displayFormat A string representing the display format for icons.\n * @param {number} courseId The course ID.\n */\nexport const init = (toggled, displayFormat, courseId) => {\n    // Settings consts.\n    toggleState = toggled == 1;\n\n    if (toggleState) {\n        showAccessMap(courseId, displayFormat);\n    }\n\n    registerEventListeners(courseId, displayFormat);\n};\n"],"names":["Templates","_interopRequireWildcard","numColours","toggleState","renderTemplate","element","errorCount","checkCount","displayFormat","minViews","viewDelta","weight","parseInt","context","resultPassed","classList","passRate","failureRate","Math","round","Promise","resolve","elementClassList","push","showIcons","_element$classList","showBackground","add","join","renderForPromise","then","_ref","html","_element$classList2","js","appendNodeContents","catch","showAccessMap","courseId","updatePreference","all","fetchReviewData","_ref2","_document$querySelect","_document$querySelect2","_ref3","_slicedToArray","sectionData","moduleData","_getErrorTotals","getErrorTotals","forEach","section","document","querySelector","numerrors","numchecks","module","getElementById","cmid","remove","apply","displayError","toggleAccessMap","_document$querySelect3","_document$querySelect4","querySelectorAll","node","_node$classList","setToggleStatePreference","hideAccessMap","totals","totalErrors","totalUsers","maxViews","concat","item","getTogglePreferenceParams","methodname","args","preferences","type","value","courseid","calls","_ajax","call","toggled","addEventListener","e","target","closest","preventDefault","registerEventListeners"],"mappings":"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"}