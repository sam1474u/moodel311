{"version":3,"file":"view_manager.min.js","sources":["../src/view_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handler calendar view changes.\n *\n * @module     core_calendar/view_manager\n * @copyright  2017 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport * as CalendarRepository from 'core_calendar/repository';\nimport CalendarEvents from 'core_calendar/events';\nimport * as CalendarSelectors from 'core_calendar/selectors';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport SummaryModal from 'core_calendar/summary_modal';\nimport CustomEvents from 'core/custom_interaction_events';\nimport Pending from 'core/pending';\n\n/**\n * Register event listeners for the module.\n *\n * @param {object} root The root element.\n */\nconst registerEventListeners = (root) => {\n    root = $(root);\n\n    // Bind click events to event links.\n    root.on('click', CalendarSelectors.links.eventLink, (e) => {\n        const target = e.target;\n        let eventLink = null;\n        let eventId = null;\n        const pendingPromise = new Pending('core_calendar/view_manager:eventLink:click');\n\n        if (target.matches(CalendarSelectors.actions.viewEvent)) {\n            eventLink = target;\n        } else {\n            eventLink = target.closest(CalendarSelectors.actions.viewEvent);\n        }\n\n        if (eventLink) {\n            eventId = eventLink.dataset.eventId;\n        } else {\n            eventId = target.querySelector(CalendarSelectors.actions.viewEvent).dataset.eventId;\n        }\n\n        if (eventId) {\n            // A link was found. Show the modal.\n\n            e.preventDefault();\n            // We've handled the event so stop it from bubbling\n            // and causing the day click handler to fire.\n            e.stopPropagation();\n\n            renderEventSummaryModal(eventId)\n            .then(pendingPromise.resolve)\n            .catch();\n        } else {\n            pendingPromise.resolve();\n        }\n    });\n\n    root.on('click', CalendarSelectors.links.navLink, (e) => {\n        const wrapper = root.find(CalendarSelectors.wrapper);\n        const view = wrapper.data('view');\n        const courseId = wrapper.data('courseid');\n        const categoryId = wrapper.data('categoryid');\n        const link = e.currentTarget;\n\n        if (view === 'month') {\n            changeMonth(root, link.href, link.dataset.year, link.dataset.month, courseId, categoryId, link.dataset.day);\n            e.preventDefault();\n        } else if (view === 'day') {\n            changeDay(root, link.href, link.dataset.year, link.dataset.month, link.dataset.day, courseId, categoryId);\n            e.preventDefault();\n        }\n    });\n\n    const viewSelector = root.find(CalendarSelectors.viewSelector);\n    CustomEvents.define(viewSelector, [CustomEvents.events.activate]);\n    viewSelector.on(\n        CustomEvents.events.activate,\n        (e) => {\n            e.preventDefault();\n\n            const option = e.target;\n            if (option.classList.contains('active')) {\n                return;\n            }\n\n            const view = option.dataset.view,\n                year = option.dataset.year,\n                month = option.dataset.month,\n                day = option.dataset.day,\n                courseId = option.dataset.courseid,\n                categoryId = option.dataset.categoryid;\n\n            if (view == 'month') {\n                refreshMonthContent(root, year, month, courseId, categoryId, root, 'core_calendar/calendar_month', day)\n                    .then(() => {\n                        return window.history.pushState({}, '', '?view=month');\n                    }).fail(Notification.exception);\n            } else if (view == 'day') {\n                refreshDayContent(root, year, month, day, courseId, categoryId, root, 'core_calendar/calendar_day')\n                    .then(() => {\n                        return window.history.pushState({}, '', '?view=day');\n                    }).fail(Notification.exception);\n            } else if (view == 'upcoming') {\n                reloadCurrentUpcoming(root, courseId, categoryId, root, 'core_calendar/calendar_upcoming')\n                    .then(() => {\n                        return window.history.pushState({}, '', '?view=upcoming');\n                    }).fail(Notification.exception);\n            }\n        }\n    );\n};\n\n/**\n * Refresh the month content.\n *\n * @param {object} root The root element.\n * @param {number} year Year\n * @param {number} month Month\n * @param {number} courseId The id of the course whose events are shown\n * @param {number} categoryId The id of the category whose events are shown\n * @param {object} target The element being replaced. If not specified, the calendarwrapper is used.\n * @param {string} template The template to be rendered.\n * @param {number} day Day (optional)\n * @return {promise}\n */\nexport const refreshMonthContent = (root, year, month, courseId, categoryId, target = null, template = '', day = 1) => {\n    startLoading(root);\n\n    target = target || root.find(CalendarSelectors.wrapper);\n    template = template || root.attr('data-template');\n    M.util.js_pending([root.get('id'), year, month, courseId].join('-'));\n    const includenavigation = root.data('includenavigation');\n    const mini = root.data('mini');\n    return CalendarRepository.getCalendarMonthData(year, month, courseId, categoryId, includenavigation, mini, day)\n        .then(context => {\n            context.viewingmonth = true;\n            return Templates.render(template, context);\n        })\n        .then((html, js) => {\n            return Templates.replaceNode(target, html, js);\n        })\n        .then(() => {\n            document.querySelector('body').dispatchEvent(new CustomEvent(CalendarEvents.viewUpdated));\n            return;\n        })\n        .always(() => {\n            M.util.js_complete([root.get('id'), year, month, courseId].join('-'));\n            return stopLoading(root);\n        })\n        .fail(Notification.exception);\n};\n\n/**\n * Handle changes to the current calendar view.\n *\n * @param {object} root The container element\n * @param {string} url The calendar url to be shown\n * @param {number} year Year\n * @param {number} month Month\n * @param {number} courseId The id of the course whose events are shown\n * @param {number} categoryId The id of the category whose events are shown\n * @param {number} day Day (optional)\n * @return {promise}\n */\nexport const changeMonth = (root, url, year, month, courseId, categoryId, day = 1) => {\n    return refreshMonthContent(root, year, month, courseId, categoryId, null, '', day)\n        .then((...args) => {\n            if (url.length && url !== '#') {\n                window.history.pushState({}, '', url);\n            }\n            return args;\n        })\n        .then((...args) => {\n            $('body').trigger(CalendarEvents.monthChanged, [year, month, courseId, categoryId]);\n            return args;\n        });\n};\n\n/**\n * Reload the current month view data.\n *\n * @param {object} root The container element.\n * @param {number} courseId The course id.\n * @param {number} categoryId The id of the category whose events are shown\n * @return {promise}\n */\nexport const reloadCurrentMonth = (root, courseId = 0, categoryId = 0) => {\n    const year = root.find(CalendarSelectors.wrapper).data('year');\n    const month = root.find(CalendarSelectors.wrapper).data('month');\n    const day = root.find(CalendarSelectors.wrapper).data('day');\n\n    courseId = courseId || root.find(CalendarSelectors.wrapper).data('courseid');\n    categoryId = categoryId || root.find(CalendarSelectors.wrapper).data('categoryid');\n\n    return refreshMonthContent(root, year, month, courseId, categoryId, null, '', day);\n};\n\n\n/**\n * Refresh the day content.\n *\n * @param {object} root The root element.\n * @param {number} year Year\n * @param {number} month Month\n * @param {number} day Day\n * @param {number} courseId The id of the course whose events are shown\n * @param {number} categoryId The id of the category whose events are shown\n * @param {object} target The element being replaced. If not specified, the calendarwrapper is used.\n * @param {string} template The template to be rendered.\n *\n * @return {promise}\n */\nexport const refreshDayContent = (root, year, month, day, courseId, categoryId, target = null, template = '') => {\n    startLoading(root);\n\n    if (!target || target.length == 0){\n        target = root.find(CalendarSelectors.wrapper);\n    }\n    template = template || root.attr('data-template');\n    M.util.js_pending([root.get('id'), year, month, day, courseId, categoryId].join('-'));\n    const includenavigation = root.data('includenavigation');\n    return CalendarRepository.getCalendarDayData(year, month, day, courseId, categoryId, includenavigation)\n        .then((context) => {\n            context.viewingday = true;\n            return Templates.render(template, context);\n        })\n        .then((html, js) => {\n            return Templates.replaceNode(target, html, js);\n        })\n        .then(() => {\n            document.querySelector('body').dispatchEvent(new CustomEvent(CalendarEvents.viewUpdated));\n            return;\n        })\n        .always(() => {\n            M.util.js_complete([root.get('id'), year, month, day, courseId, categoryId].join('-'));\n            return stopLoading(root);\n        })\n        .fail(Notification.exception);\n};\n\n/**\n * Reload the current day view data.\n *\n * @param {object} root The container element.\n * @param {number} courseId The course id.\n * @param {number} categoryId The id of the category whose events are shown\n * @return {promise}\n */\nexport const reloadCurrentDay = (root, courseId = 0, categoryId = 0) => {\n    const wrapper = root.find(CalendarSelectors.wrapper);\n    const year = wrapper.data('year');\n    const month = wrapper.data('month');\n    const day = wrapper.data('day');\n\n    courseId = courseId || root.find(CalendarSelectors.wrapper).data('courseid');\n    categoryId = categoryId || root.find(CalendarSelectors.wrapper).data('categoryid');\n\n    return refreshDayContent(root, year, month, day, courseId, categoryId);\n};\n\n/**\n * Handle changes to the current calendar view.\n *\n * @param {object} root The root element.\n * @param {String} url The calendar url to be shown\n * @param {Number} year Year\n * @param {Number} month Month\n * @param {Number} day Day\n * @param {Number} courseId The id of the course whose events are shown\n * @param {Number} categoryId The id of the category whose events are shown\n * @return {promise}\n */\nexport const changeDay = (root, url, year, month, day, courseId, categoryId) => {\n    return refreshDayContent(root, year, month, day, courseId, categoryId)\n        .then((...args) => {\n            if (url.length && url !== '#') {\n                window.history.pushState({}, '', url);\n            }\n            return args;\n        })\n        .then((...args) => {\n            $('body').trigger(CalendarEvents.dayChanged, [year, month, courseId, categoryId]);\n            return args;\n        });\n};\n\n/**\n * Set the element state to loading.\n *\n * @param {object} root The container element\n * @method startLoading\n */\nconst startLoading = (root) => {\n    const loadingIconContainer = root.find(CalendarSelectors.containers.loadingIcon);\n\n    loadingIconContainer.removeClass('hidden');\n};\n\n/**\n * Remove the loading state from the element.\n *\n * @param {object} root The container element\n * @method stopLoading\n */\nconst stopLoading = (root) => {\n    const loadingIconContainer = root.find(CalendarSelectors.containers.loadingIcon);\n\n    loadingIconContainer.addClass('hidden');\n};\n\n/**\n * Reload the current month view data.\n *\n * @param {object} root The container element.\n * @param {number} courseId The course id.\n * @param {number} categoryId The id of the category whose events are shown\n * @param {object} target The element being replaced. If not specified, the calendarwrapper is used.\n * @param {string} template The template to be rendered.\n * @return {promise}\n */\nexport const reloadCurrentUpcoming = (root, courseId = 0, categoryId = 0, target = null, template = '') => {\n    startLoading(root);\n\n    target = target || root.find(CalendarSelectors.wrapper);\n    template = template || root.attr('data-template');\n    courseId = courseId || root.find(CalendarSelectors.wrapper).data('courseid');\n    categoryId = categoryId || root.find(CalendarSelectors.wrapper).data('categoryid');\n\n    return CalendarRepository.getCalendarUpcomingData(courseId, categoryId)\n        .then((context) => {\n            context.viewingupcoming = true;\n            return Templates.render(template, context);\n        })\n        .then((html, js) => {\n            return Templates.replaceNode(target, html, js);\n        })\n        .then(() => {\n            document.querySelector('body').dispatchEvent(new CustomEvent(CalendarEvents.viewUpdated));\n            return;\n        })\n        .always(function() {\n            return stopLoading(root);\n        })\n        .fail(Notification.exception);\n};\n\n/**\n * Get the CSS class to apply for the given event type.\n *\n * @param {string} eventType The calendar event type\n * @return {string}\n */\nconst getEventTypeClassFromType = (eventType) => {\n    return 'calendar_event_' + eventType;\n};\n\n/**\n * Render the event summary modal.\n *\n * @param {Number} eventId The calendar event id.\n * @returns {Promise}\n */\nconst renderEventSummaryModal = (eventId) => {\n    const pendingPromise = new Pending('core_calendar/view_manager:renderEventSummaryModal');\n\n    // Calendar repository promise.\n    return CalendarRepository.getEventById(eventId)\n    .then((getEventResponse) => {\n        if (!getEventResponse.event) {\n            throw new Error('Error encountered while trying to fetch calendar event with ID: ' + eventId);\n        }\n\n        return getEventResponse.event;\n    })\n    .then(eventData => {\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: eventData.name,\n            type: SummaryModal.TYPE,\n            body: Templates.render('core_calendar/event_summary_body', eventData),\n            templateContext: {\n                canedit: eventData.canedit,\n                candelete: eventData.candelete,\n                headerclasses: getEventTypeClassFromType(eventData.normalisedeventtype),\n                isactionevent: eventData.isactionevent,\n                url: eventData.url,\n                action: eventData.action\n            }\n        };\n\n        // Create the modal.\n        return ModalFactory.create(modalParams);\n    })\n    .then(modal => {\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, function() {\n            // Destroy when hidden.\n            modal.destroy();\n        });\n\n        // Finally, render the modal!\n        modal.show();\n\n        return modal;\n    })\n    .then(modal => {\n        pendingPromise.resolve();\n\n        return modal;\n    })\n    .catch(Notification.exception);\n};\n\nexport const init = (root, view) => {\n    registerEventListeners(root, view);\n};\n"],"names":["_jquery","_interopRequireDefault","_templates","_notification","CalendarRepository","_interopRequireWildcard","_events","CalendarSelectors","_modal_factory","_modal_events","_summary_modal","_custom_interaction_events","_pending","refreshMonthContent","root","year","month","courseId","categoryId","target","template","day","startLoading","find","wrapper","attr","M","util","js_pending","get","join","includenavigation","data","mini","getCalendarMonthData","then","context","viewingmonth","Templates","render","html","js","replaceNode","document","querySelector","dispatchEvent","CustomEvent","CalendarEvents","viewUpdated","always","stopLoading","js_complete","fail","Notification","exception","changeMonth","url","length","window","history","pushState","_len","arguments","args","Array","_key","default","trigger","monthChanged","_len2","_key2","refreshDayContent","getCalendarDayData","viewingday","changeDay","_len3","_key3","dayChanged","_len4","_key4","containers","loadingIcon","removeClass","addClass","reloadCurrentUpcoming","getCalendarUpcomingData","viewingupcoming","renderEventSummaryModal","eventId","pendingPromise","Pending","getEventById","getEventResponse","event","Error","eventData","eventType","modalParams","title","name","type","SummaryModal","TYPE","body","templateContext","canedit","candelete","headerclasses","normalisedeventtype","isactionevent","action","ModalFactory","create","modal","getRoot","on","ModalEvents","hidden","destroy","show","resolve","catch","view","links","eventLink","e","matches","actions","viewEvent","closest","dataset","preventDefault","stopPropagation","navLink","link","currentTarget","href","viewSelector","define","CustomEvents","events","activate","option","classList","contains","courseid","categoryid","registerEventListeners"],"mappings":"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"}