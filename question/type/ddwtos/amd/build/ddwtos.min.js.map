{"version":3,"file":"ddwtos.min.js","sources":["../src/ddwtos.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript to make drag-drop into text questions work.\n *\n * Some vocabulary to help understand this code:\n *\n * The question text contains 'drops' - blanks into which the 'drags', the missing\n * words, can be put.\n *\n * The thing that can be moved into the drops are called 'drags'. There may be\n * multiple copies of the 'same' drag which does not really cause problems.\n * Each drag has a 'choice' number which is the value set on the drop's hidden\n * input when this drag is placed in a drop.\n *\n * These may be in separate 'groups', distinguished by colour.\n * Things can only interact with other things in the same group.\n * The groups are numbered from 1.\n *\n * The place where a given drag started from is called its 'home'.\n *\n * @module     qtype_ddwtos/ddwtos\n * @copyright  2018 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.6\n */\ndefine(['jquery', 'core/dragdrop', 'core/key_codes'], function($, dragDrop, keys) {\n\n    \"use strict\";\n\n    /**\n     * Object to handle one drag-drop into text question.\n     *\n     * @param {String} containerId id of the outer div for this question.\n     * @param {boolean} readOnly whether the question is being displayed read-only.\n     * @constructor\n     */\n    function DragDropToTextQuestion(containerId, readOnly) {\n        this.containerId = containerId;\n        this.questionAnswer = {};\n        if (readOnly) {\n            this.getRoot().addClass('qtype_ddwtos-readonly');\n        }\n        this.resizeAllDragsAndDrops();\n        this.cloneDrags();\n        this.positionDrags();\n    }\n\n    /**\n     * In each group, resize all the items to be the same size.\n     */\n    DragDropToTextQuestion.prototype.resizeAllDragsAndDrops = function() {\n        var thisQ = this;\n        this.getRoot().find('.answercontainer > div').each(function(i, node) {\n            thisQ.resizeAllDragsAndDropsInGroup(\n                thisQ.getClassnameNumericSuffix($(node), 'draggrouphomes'));\n        });\n    };\n\n    /**\n     * In a given group, set all the drags and drops to be the same size.\n     *\n     * @param {int} group the group number.\n     */\n    DragDropToTextQuestion.prototype.resizeAllDragsAndDropsInGroup = function(group) {\n        var thisQ = this,\n            dragHomes = this.getRoot().find('.draggrouphomes' + group + ' span.draghome'),\n            maxWidth = 0,\n            maxHeight = 0;\n\n        // Find the maximum size of any drag in this groups.\n        dragHomes.each(function(i, drag) {\n            maxWidth = Math.max(maxWidth, Math.ceil(drag.offsetWidth));\n            maxHeight = Math.max(maxHeight, Math.ceil(0 + drag.offsetHeight));\n        });\n\n        // The size we will want to set is a bit bigger than this.\n        maxWidth += 8;\n        maxHeight += 2;\n\n        // Set each drag home to that size.\n        dragHomes.each(function(i, drag) {\n            thisQ.setElementSize(drag, maxWidth, maxHeight);\n        });\n\n        // Set each drop to that size.\n        this.getRoot().find('span.drop.group' + group).each(function(i, drop) {\n            thisQ.setElementSize(drop, maxWidth, maxHeight);\n        });\n    };\n\n    /**\n     * Set a given DOM element to be a particular size.\n     *\n     * @param {HTMLElement} element\n     * @param {int} width\n     * @param {int} height\n     */\n    DragDropToTextQuestion.prototype.setElementSize = function(element, width, height) {\n        $(element).width(width).height(height).css('lineHeight', height + 'px');\n    };\n\n    /**\n     * Invisible 'drag homes' are output by the renderer. These have the same properties\n     * as the drag items but are invisible. We clone these invisible elements to make the\n     * actual drag items.\n     */\n    DragDropToTextQuestion.prototype.cloneDrags = function() {\n        var thisQ = this;\n        thisQ.getRoot().find('span.draghome').each(function(index, draghome) {\n            var drag = $(draghome);\n            var placeHolder = drag.clone();\n            placeHolder.removeClass();\n            placeHolder.addClass('draghome choice' +\n                thisQ.getChoice(drag) + ' group' +\n                thisQ.getGroup(drag) + ' dragplaceholder');\n            drag.before(placeHolder);\n        });\n    };\n\n    /**\n     * Update the position of drags.\n     */\n    DragDropToTextQuestion.prototype.positionDrags = function() {\n        var thisQ = this,\n            root = this.getRoot();\n\n        // First move all items back home.\n        root.find('span.draghome').not('.dragplaceholder').each(function(i, dragNode) {\n            var drag = $(dragNode),\n                currentPlace = thisQ.getClassnameNumericSuffix(drag, 'inplace');\n            drag.addClass('unplaced')\n                .removeClass('placed');\n            drag.removeAttr('tabindex');\n            if (currentPlace !== null) {\n                drag.removeClass('inplace' + currentPlace);\n            }\n        });\n\n        // Then place the once that should be placed.\n        root.find('input.placeinput').each(function(i, inputNode) {\n            var input = $(inputNode),\n                choice = input.val(),\n                place = thisQ.getPlace(input);\n\n            // Record the last known position of the drop.\n            var drop = root.find('.drop.place' + place),\n                dropPosition = drop.offset();\n            drop.data('prev-top', dropPosition.top).data('prev-left', dropPosition.left);\n\n            if (choice === '0') {\n                // No item in this place.\n                return;\n            }\n\n            // Get the unplaced drag.\n            var unplacedDrag = thisQ.getUnplacedChoice(thisQ.getGroup(input), choice);\n            // Get the clone of the drag.\n            var hiddenDrag = thisQ.getDragClone(unplacedDrag);\n            if (hiddenDrag.length) {\n                if (unplacedDrag.hasClass('infinite')) {\n                    var noOfDrags = thisQ.noOfDropsInGroup(thisQ.getGroup(unplacedDrag));\n                    var cloneDrags = thisQ.getInfiniteDragClones(unplacedDrag, false);\n                    if (cloneDrags.length < noOfDrags) {\n                        var cloneDrag = unplacedDrag.clone();\n                        hiddenDrag.after(cloneDrag);\n                        questionManager.addEventHandlersToDrag(cloneDrag);\n                    } else {\n                        hiddenDrag.addClass('active');\n                    }\n                } else {\n                    hiddenDrag.addClass('active');\n                }\n            }\n            // Send the drag to drop.\n            thisQ.sendDragToDrop(thisQ.getUnplacedChoice(thisQ.getGroup(input), choice), drop);\n        });\n\n        // Save the question answer.\n        thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\n    };\n\n    /**\n     * Get the question answered values.\n     *\n     * @return {Object} Contain key-value with key is the input id and value is the input value.\n     */\n    DragDropToTextQuestion.prototype.getQuestionAnsweredValues = function() {\n        let result = {};\n        this.getRoot().find('input.placeinput').each((i, inputNode) => {\n            result[inputNode.id] = inputNode.value;\n        });\n\n        return result;\n    };\n\n    /**\n     * Check if the question is being interacted or not.\n     *\n     * @return {boolean} Return true if the user has changed the question-answer.\n     */\n    DragDropToTextQuestion.prototype.isQuestionInteracted = function() {\n        const oldAnswer = this.questionAnswer;\n        const newAnswer = this.getQuestionAnsweredValues();\n        let isInteracted = false;\n\n        // First, check both answers have the same structure or not.\n        if (JSON.stringify(newAnswer) !== JSON.stringify(oldAnswer)) {\n            isInteracted = true;\n            return isInteracted;\n        }\n        // Check the values.\n        Object.keys(newAnswer).forEach(key => {\n            if (newAnswer[key] !== oldAnswer[key]) {\n                isInteracted = true;\n            }\n        });\n\n        return isInteracted;\n    };\n\n    /**\n     * Handles the start of dragging an item.\n     *\n     * @param {Event} e the touch start or mouse down event.\n     */\n    DragDropToTextQuestion.prototype.handleDragStart = function(e) {\n        var thisQ = this,\n            drag = $(e.target).closest('.draghome');\n\n        var info = dragDrop.prepare(e);\n        if (!info.start || drag.hasClass('beingdragged')) {\n            return;\n        }\n\n        drag.addClass('beingdragged');\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\n        if (currentPlace !== null) {\n            this.setInputValue(currentPlace, 0);\n            drag.removeClass('inplace' + currentPlace);\n            var hiddenDrop = thisQ.getDrop(drag, currentPlace);\n            if (hiddenDrop.length) {\n                hiddenDrop.addClass('active');\n                drag.offset(hiddenDrop.offset());\n            }\n        } else {\n            var hiddenDrag = thisQ.getDragClone(drag);\n            if (hiddenDrag.length) {\n                if (drag.hasClass('infinite')) {\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(drag));\n                    var cloneDrags = this.getInfiniteDragClones(drag, false);\n                    if (cloneDrags.length < noOfDrags) {\n                        var cloneDrag = drag.clone();\n                        cloneDrag.removeClass('beingdragged');\n                        hiddenDrag.after(cloneDrag);\n                        questionManager.addEventHandlersToDrag(cloneDrag);\n                        drag.offset(cloneDrag.offset());\n                    } else {\n                        hiddenDrag.addClass('active');\n                        drag.offset(hiddenDrag.offset());\n                    }\n                } else {\n                    hiddenDrag.addClass('active');\n                    drag.offset(hiddenDrag.offset());\n                }\n            }\n        }\n\n        dragDrop.start(e, drag, function(x, y, drag) {\n            thisQ.dragMove(x, y, drag);\n        }, function(x, y, drag) {\n            thisQ.dragEnd(x, y, drag);\n        });\n    };\n\n    /**\n     * Called whenever the currently dragged items moves.\n     *\n     * @param {Number} pageX the x position.\n     * @param {Number} pageY the y position.\n     * @param {jQuery} drag the item being moved.\n     */\n    DragDropToTextQuestion.prototype.dragMove = function(pageX, pageY, drag) {\n        var thisQ = this;\n        this.getRoot().find('span.drop.group' + this.getGroup(drag)).each(function(i, dropNode) {\n            var drop = $(dropNode);\n            if (thisQ.isPointInDrop(pageX, pageY, drop)) {\n                drop.addClass('valid-drag-over-drop');\n            } else {\n                drop.removeClass('valid-drag-over-drop');\n            }\n        });\n        this.getRoot().find('span.draghome.placed.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, dropNode) {\n            var drop = $(dropNode);\n            if (thisQ.isPointInDrop(pageX, pageY, drop) && !thisQ.isDragSameAsDrop(drag, drop)) {\n                drop.addClass('valid-drag-over-drop');\n            } else {\n                drop.removeClass('valid-drag-over-drop');\n            }\n        });\n    };\n\n    /**\n     * Called when user drops a drag item.\n     *\n     * @param {Number} pageX the x position.\n     * @param {Number} pageY the y position.\n     * @param {jQuery} drag the item being moved.\n     */\n    DragDropToTextQuestion.prototype.dragEnd = function(pageX, pageY, drag) {\n        var thisQ = this,\n            root = this.getRoot(),\n            placed = false;\n        root.find('span.drop.group' + this.getGroup(drag)).each(function(i, dropNode) {\n            var drop = $(dropNode);\n            if (!thisQ.isPointInDrop(pageX, pageY, drop)) {\n                // Not this drop.\n                return true;\n            }\n\n            // Now put this drag into the drop.\n            drop.removeClass('valid-drag-over-drop');\n            thisQ.sendDragToDrop(drag, drop);\n            placed = true;\n            return false; // Stop the each() here.\n        });\n\n        root.find('span.draghome.placed.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, placedNode) {\n            var placedDrag = $(placedNode);\n            if (!thisQ.isPointInDrop(pageX, pageY, placedDrag) || thisQ.isDragSameAsDrop(drag, placedDrag)) {\n                // Not this placed drag.\n                return true;\n            }\n\n            // Now put this drag into the drop.\n            placedDrag.removeClass('valid-drag-over-drop');\n            var currentPlace = thisQ.getClassnameNumericSuffix(placedDrag, 'inplace');\n            var drop = thisQ.getDrop(drag, currentPlace);\n            thisQ.sendDragToDrop(drag, drop);\n            placed = true;\n            return false; // Stop the each() here.\n        });\n\n        if (!placed) {\n            this.sendDragHome(drag);\n        }\n    };\n\n    /**\n     * Animate a drag item into a given place (or back home).\n     *\n     * @param {jQuery|null} drag the item to place. If null, clear the place.\n     * @param {jQuery} drop the place to put it.\n     */\n    DragDropToTextQuestion.prototype.sendDragToDrop = function(drag, drop) {\n        // Is there already a drag in this drop? if so, evict it.\n        var oldDrag = this.getCurrentDragInPlace(this.getPlace(drop));\n        if (oldDrag.length !== 0) {\n            var currentPlace = this.getClassnameNumericSuffix(oldDrag, 'inplace');\n            var hiddenDrop = this.getDrop(oldDrag, currentPlace);\n            hiddenDrop.addClass('active');\n            oldDrag.addClass('beingdragged');\n            oldDrag.offset(hiddenDrop.offset());\n            this.sendDragHome(oldDrag);\n        }\n\n        if (drag.length === 0) {\n            this.setInputValue(this.getPlace(drop), 0);\n            if (drop.data('isfocus')) {\n                drop.focus();\n            }\n        } else {\n            this.setInputValue(this.getPlace(drop), this.getChoice(drag));\n            drag.removeClass('unplaced')\n                .addClass('placed inplace' + this.getPlace(drop));\n            drag.attr('tabindex', 0);\n            this.animateTo(drag, drop);\n        }\n    };\n\n    /**\n     * Animate a drag back to its home.\n     *\n     * @param {jQuery} drag the item being moved.\n     */\n    DragDropToTextQuestion.prototype.sendDragHome = function(drag) {\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\n        if (currentPlace !== null) {\n            drag.removeClass('inplace' + currentPlace);\n        }\n        drag.data('unplaced', true);\n\n        this.animateTo(drag, this.getDragHome(this.getGroup(drag), this.getChoice(drag)));\n    };\n\n    /**\n     * Handles keyboard events on drops.\n     *\n     * Drops are focusable. Once focused, right/down/space switches to the next choice, and\n     * left/up switches to the previous. Escape clear.\n     *\n     * @param {KeyboardEvent} e\n     */\n    DragDropToTextQuestion.prototype.handleKeyPress = function(e) {\n        var drop = $(e.target).closest('.drop');\n        if (drop.length === 0) {\n            var placedDrag = $(e.target);\n            var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\n            if (currentPlace !== null) {\n                drop = this.getDrop(placedDrag, currentPlace);\n            }\n        }\n        var currentDrag = this.getCurrentDragInPlace(this.getPlace(drop)),\n            nextDrag = $();\n\n        switch (e.keyCode) {\n            case keys.space:\n            case keys.arrowRight:\n            case keys.arrowDown:\n                nextDrag = this.getNextDrag(this.getGroup(drop), currentDrag);\n                break;\n\n            case keys.arrowLeft:\n            case keys.arrowUp:\n                nextDrag = this.getPreviousDrag(this.getGroup(drop), currentDrag);\n                break;\n\n            case keys.escape:\n                break;\n\n            default:\n                questionManager.isKeyboardNavigation = false;\n                return; // To avoid the preventDefault below.\n        }\n\n        if (nextDrag.length) {\n            nextDrag.data('isfocus', true);\n            nextDrag.addClass('beingdragged');\n            var hiddenDrag = this.getDragClone(nextDrag);\n            if (hiddenDrag.length) {\n                if (nextDrag.hasClass('infinite')) {\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(nextDrag));\n                    var cloneDrags = this.getInfiniteDragClones(nextDrag, false);\n                    if (cloneDrags.length < noOfDrags) {\n                        var cloneDrag = nextDrag.clone();\n                        cloneDrag.removeClass('beingdragged');\n                        cloneDrag.removeAttr('tabindex');\n                        hiddenDrag.after(cloneDrag);\n                        questionManager.addEventHandlersToDrag(cloneDrag);\n                        nextDrag.offset(cloneDrag.offset());\n                    } else {\n                        hiddenDrag.addClass('active');\n                        nextDrag.offset(hiddenDrag.offset());\n                    }\n                } else {\n                    hiddenDrag.addClass('active');\n                    nextDrag.offset(hiddenDrag.offset());\n                }\n            }\n        } else {\n            drop.data('isfocus', true);\n        }\n\n        e.preventDefault();\n        this.sendDragToDrop(nextDrag, drop);\n    };\n\n    /**\n     * Choose the next drag in a group.\n     *\n     * @param {int} group which group.\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\n     */\n    DragDropToTextQuestion.prototype.getNextDrag = function(group, drag) {\n        var choice,\n            numChoices = this.noOfChoicesInGroup(group);\n\n        if (drag.length === 0) {\n            choice = 1; // Was empty, so we want to select the first choice.\n        } else {\n            choice = this.getChoice(drag) + 1;\n        }\n\n        var next = this.getUnplacedChoice(group, choice);\n        while (next.length === 0 && choice < numChoices) {\n            choice++;\n            next = this.getUnplacedChoice(group, choice);\n        }\n\n        return next;\n    };\n\n    /**\n     * Choose the previous drag in a group.\n     *\n     * @param {int} group which group.\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\n     */\n    DragDropToTextQuestion.prototype.getPreviousDrag = function(group, drag) {\n        var choice;\n\n        if (drag.length === 0) {\n            choice = this.noOfChoicesInGroup(group);\n        } else {\n            choice = this.getChoice(drag) - 1;\n        }\n\n        var previous = this.getUnplacedChoice(group, choice);\n        while (previous.length === 0 && choice > 1) {\n            choice--;\n            previous = this.getUnplacedChoice(group, choice);\n        }\n\n        // Does this choice exist?\n        return previous;\n    };\n\n    /**\n     * Animate an object to the given destination.\n     *\n     * @param {jQuery} drag the element to be animated.\n     * @param {jQuery} target element marking the place to move it to.\n     */\n    DragDropToTextQuestion.prototype.animateTo = function(drag, target) {\n        var currentPos = drag.offset(),\n            targetPos = target.offset(),\n            thisQ = this;\n\n        M.util.js_pending('qtype_ddwtos-animate-' + thisQ.containerId);\n        // Animate works in terms of CSS position, whereas locating an object\n        // on the page works best with jQuery offset() function. So, to get\n        // the right target position, we work out the required change in\n        // offset() and then add that to the current CSS position.\n        drag.animate(\n            {\n                left: parseInt(drag.css('left')) + targetPos.left - currentPos.left,\n                top: parseInt(drag.css('top')) + targetPos.top - currentPos.top\n            },\n            {\n                duration: 'fast',\n                done: function() {\n                    $('body').trigger('qtype_ddwtos-dragmoved', [drag, target, thisQ]);\n                    M.util.js_complete('qtype_ddwtos-animate-' + thisQ.containerId);\n                }\n            }\n        );\n    };\n\n    /**\n     * Detect if a point is inside a given DOM node.\n     *\n     * @param {Number} pageX the x position.\n     * @param {Number} pageY the y position.\n     * @param {jQuery} drop the node to check (typically a drop).\n     * @return {boolean} whether the point is inside the node.\n     */\n    DragDropToTextQuestion.prototype.isPointInDrop = function(pageX, pageY, drop) {\n        var position = drop.offset();\n        return pageX >= position.left && pageX < position.left + drop.width()\n                && pageY >= position.top && pageY < position.top + drop.height();\n    };\n\n    /**\n     * Set the value of the hidden input for a place, to record what is currently there.\n     *\n     * @param {int} place which place to set the input value for.\n     * @param {int} choice the value to set.\n     */\n    DragDropToTextQuestion.prototype.setInputValue = function(place, choice) {\n        this.getRoot().find('input.placeinput.place' + place).val(choice);\n    };\n\n    /**\n     * Get the outer div for this question.\n     *\n     * @returns {jQuery} containing that div.\n     */\n    DragDropToTextQuestion.prototype.getRoot = function() {\n        return $(document.getElementById(this.containerId));\n    };\n\n    /**\n     * Get drag home for a given choice.\n     *\n     * @param {int} group the group.\n     * @param {int} choice the choice number.\n     * @returns {jQuery} containing that div.\n     */\n    DragDropToTextQuestion.prototype.getDragHome = function(group, choice) {\n        if (!this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice).is(':visible')) {\n            return this.getRoot().find('.draggrouphomes' + group +\n                ' span.draghome.infinite' +\n                '.choice' + choice +\n                '.group' + group);\n        }\n        return this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice);\n    };\n\n    /**\n     * Get an unplaced choice for a particular group.\n     *\n     * @param {int} group the group.\n     * @param {int} choice the choice number.\n     * @returns {jQuery} jQuery wrapping the unplaced choice. If there isn't one, the jQuery will be empty.\n     */\n    DragDropToTextQuestion.prototype.getUnplacedChoice = function(group, choice) {\n        return this.getRoot().find('.draghome.group' + group + '.choice' + choice + '.unplaced').slice(0, 1);\n    };\n\n    /**\n     * Get the drag that is currently in a given place.\n     *\n     * @param {int} place the place number.\n     * @return {jQuery} the current drag (or an empty jQuery if none).\n     */\n    DragDropToTextQuestion.prototype.getCurrentDragInPlace = function(place) {\n        return this.getRoot().find('span.draghome.inplace' + place);\n    };\n\n    /**\n     * Return the number of blanks in a given group.\n     *\n     * @param {int} group the group number.\n     * @returns {int} the number of drops.\n     */\n    DragDropToTextQuestion.prototype.noOfDropsInGroup = function(group) {\n        return this.getRoot().find('.drop.group' + group).length;\n    };\n\n    /**\n     * Return the number of choices in a given group.\n     *\n     * @param {int} group the group number.\n     * @returns {int} the number of choices.\n     */\n    DragDropToTextQuestion.prototype.noOfChoicesInGroup = function(group) {\n        return this.getRoot().find('.draghome.group' + group).length;\n    };\n\n    /**\n     * Return the number at the end of the CSS class name with the given prefix.\n     *\n     * @param {jQuery} node\n     * @param {String} prefix name prefix\n     * @returns {Number|null} the suffix if found, else null.\n     */\n    DragDropToTextQuestion.prototype.getClassnameNumericSuffix = function(node, prefix) {\n        var classes = node.attr('class');\n        if (classes !== '') {\n            var classesArr = classes.split(' ');\n            for (var index = 0; index < classesArr.length; index++) {\n                var patt1 = new RegExp('^' + prefix + '([0-9])+$');\n                if (patt1.test(classesArr[index])) {\n                    var patt2 = new RegExp('([0-9])+$');\n                    var match = patt2.exec(classesArr[index]);\n                    return Number(match[0]);\n                }\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Get the choice number of a drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @returns {Number} the choice number.\n     */\n    DragDropToTextQuestion.prototype.getChoice = function(drag) {\n        return this.getClassnameNumericSuffix(drag, 'choice');\n    };\n\n    /**\n     * Given a DOM node that is significant to this question\n     * (drag, drop, ...) get the group it belongs to.\n     *\n     * @param {jQuery} node a DOM node.\n     * @returns {Number} the group it belongs to.\n     */\n    DragDropToTextQuestion.prototype.getGroup = function(node) {\n        return this.getClassnameNumericSuffix(node, 'group');\n    };\n\n    /**\n     * Get the place number of a drop, or its corresponding hidden input.\n     *\n     * @param {jQuery} node the DOM node.\n     * @returns {Number} the place number.\n     */\n    DragDropToTextQuestion.prototype.getPlace = function(node) {\n        return this.getClassnameNumericSuffix(node, 'place');\n    };\n\n    /**\n     * Get drag clone for a given drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @returns {jQuery} the drag's clone.\n     */\n    DragDropToTextQuestion.prototype.getDragClone = function(drag) {\n        return this.getRoot().find('.draggrouphomes' +\n            this.getGroup(drag) +\n            ' span.draghome' +\n            '.choice' + this.getChoice(drag) +\n            '.group' + this.getGroup(drag) +\n            '.dragplaceholder');\n    };\n\n    /**\n     * Get infinite drag clones for given drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @param {Boolean} inHome in the home area or not.\n     * @returns {jQuery} the drag's clones.\n     */\n    DragDropToTextQuestion.prototype.getInfiniteDragClones = function(drag, inHome) {\n        if (inHome) {\n            return this.getRoot().find('.draggrouphomes' +\n                this.getGroup(drag) +\n                ' span.draghome' +\n                '.choice' + this.getChoice(drag) +\n                '.group' + this.getGroup(drag) +\n                '.infinite').not('.dragplaceholder');\n        }\n        return this.getRoot().find('span.draghome' +\n            '.choice' + this.getChoice(drag) +\n            '.group' + this.getGroup(drag) +\n            '.infinite').not('.dragplaceholder');\n    };\n\n    /**\n     * Get drop for a given drag and place.\n     *\n     * @param {jQuery} drag the drag.\n     * @param {Integer} currentPlace the current place of drag.\n     * @returns {jQuery} the drop's clone.\n     */\n    DragDropToTextQuestion.prototype.getDrop = function(drag, currentPlace) {\n        return this.getRoot().find('.drop.group' + this.getGroup(drag) + '.place' + currentPlace);\n    };\n\n    /**\n     * Check that the drag is drop to it's clone.\n     *\n     * @param {jQuery} drag The drag.\n     * @param {jQuery} drop The drop.\n     * @returns {boolean}\n     */\n    DragDropToTextQuestion.prototype.isDragSameAsDrop = function(drag, drop) {\n        return this.getChoice(drag) === this.getChoice(drop) && this.getGroup(drag) === this.getGroup(drop);\n    };\n\n    /**\n     * Singleton that tracks all the DragDropToTextQuestions on this page, and deals\n     * with event dispatching.\n     *\n     * @type {Object}\n     */\n    var questionManager = {\n        /**\n         * {boolean} used to ensure the event handlers are only initialised once per page.\n         */\n        eventHandlersInitialised: false,\n\n        /**\n         * {Object} ensures that the drag event handlers are only initialised once per question,\n         * indexed by containerId (id on the .que div).\n         */\n        dragEventHandlersInitialised: {},\n\n        /**\n         * {boolean} is keyboard navigation or not.\n         */\n        isKeyboardNavigation: false,\n\n        /**\n         * {DragDropToTextQuestion[]} all the questions on this page, indexed by containerId (id on the .que div).\n         */\n        questions: {},\n\n        /**\n         * Initialise questions.\n         *\n         * @param {String} containerId id of the outer div for this question.\n         * @param {boolean} readOnly whether the question is being displayed read-only.\n         */\n        init: function(containerId, readOnly) {\n            questionManager.questions[containerId] = new DragDropToTextQuestion(containerId, readOnly);\n            if (!questionManager.eventHandlersInitialised) {\n                questionManager.setupEventHandlers();\n                questionManager.eventHandlersInitialised = true;\n            }\n            if (!questionManager.dragEventHandlersInitialised.hasOwnProperty(containerId)) {\n                questionManager.dragEventHandlersInitialised[containerId] = true;\n                // We do not use the body event here to prevent the other event on Mobile device, such as scroll event.\n                var questionContainer = document.getElementById(containerId);\n                if (questionContainer.classList.contains('ddwtos') &&\n                    !questionContainer.classList.contains('qtype_ddwtos-readonly')) {\n                    // TODO: Convert all the jQuery selectors and events to native Javascript.\n                    questionManager.addEventHandlersToDrag($(questionContainer).find('span.draghome'));\n                }\n            }\n        },\n\n        /**\n         * Set up the event handlers that make this question type work. (Done once per page.)\n         */\n        setupEventHandlers: function() {\n            $('body')\n                .on('keydown',\n                    '.que.ddwtos:not(.qtype_ddwtos-readonly) span.drop',\n                    questionManager.handleKeyPress)\n                .on('keydown',\n                    '.que.ddwtos:not(.qtype_ddwtos-readonly) span.draghome.placed:not(.beingdragged)',\n                    questionManager.handleKeyPress)\n                .on('qtype_ddwtos-dragmoved', questionManager.handleDragMoved);\n        },\n\n        /**\n         * Binding the drag/touch event again for newly created element.\n         *\n         * @param {jQuery} element Element to bind the event\n         */\n        addEventHandlersToDrag: function(element) {\n            // Unbind all the mousedown and touchstart events to prevent double binding.\n            element.unbind('mousedown touchstart');\n            element.on('mousedown touchstart', questionManager.handleDragStart);\n        },\n\n        /**\n         * Handle mouse down / touch start on drags.\n         * @param {Event} e the DOM event.\n         */\n        handleDragStart: function(e) {\n            e.preventDefault();\n            var question = questionManager.getQuestionForEvent(e);\n            if (question) {\n                question.handleDragStart(e);\n            }\n        },\n\n        /**\n         * Handle key down / press on drops.\n         * @param {KeyboardEvent} e\n         */\n        handleKeyPress: function(e) {\n            if (questionManager.isKeyboardNavigation) {\n                return;\n            }\n            questionManager.isKeyboardNavigation = true;\n            var question = questionManager.getQuestionForEvent(e);\n            if (question) {\n                question.handleKeyPress(e);\n            }\n        },\n\n        /**\n         * Given an event, work out which question it affects.\n         *\n         * @param {Event} e the event.\n         * @returns {DragDropToTextQuestion|undefined} The question, or undefined.\n         */\n        getQuestionForEvent: function(e) {\n            var containerId = $(e.currentTarget).closest('.que.ddwtos').attr('id');\n            return questionManager.questions[containerId];\n        },\n\n        /**\n         * Handle when drag moved.\n         *\n         * @param {Event} e the event.\n         * @param {jQuery} drag the drag\n         * @param {jQuery} target the target\n         * @param {DragDropToTextQuestion} thisQ the question.\n         */\n        handleDragMoved: function(e, drag, target, thisQ) {\n            drag.removeClass('beingdragged');\n            drag.css('top', '').css('left', '');\n            target.after(drag);\n            target.removeClass('active');\n            if (typeof drag.data('unplaced') !== 'undefined' && drag.data('unplaced') === true) {\n                drag.removeClass('placed').addClass('unplaced');\n                drag.removeAttr('tabindex');\n                drag.removeData('unplaced');\n                if (drag.hasClass('infinite') && thisQ.getInfiniteDragClones(drag, true).length > 1) {\n                    thisQ.getInfiniteDragClones(drag, true).first().remove();\n                }\n            }\n            if (typeof drag.data('isfocus') !== 'undefined' && drag.data('isfocus') === true) {\n                drag.focus();\n                drag.removeData('isfocus');\n            }\n            if (typeof target.data('isfocus') !== 'undefined' && target.data('isfocus') === true) {\n                target.removeData('isfocus');\n            }\n            if (questionManager.isKeyboardNavigation) {\n                questionManager.isKeyboardNavigation = false;\n            }\n            if (thisQ.isQuestionInteracted()) {\n                // The user has interacted with the draggable items. We need to mark the form as dirty.\n                questionManager.handleFormDirty();\n                // Save the new answered value.\n                thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\n            }\n        },\n\n        /**\n         * Handle when the form is dirty.\n         */\n        handleFormDirty: function() {\n            if (typeof M.core_formchangechecker !== 'undefined') {\n                M.core_formchangechecker.set_form_changed();\n            }\n        }\n    };\n\n    /**\n     * @alias module:qtype_ddwtos/ddwtos\n     */\n    return {\n        /**\n         * Initialise one drag-drop into text question.\n         *\n         * @param {String} containerId id of the outer div for this question.\n         * @param {boolean} readOnly whether the question is being displayed read-only.\n         */\n        init: questionManager.init\n    };\n});\n"],"names":["define","$","dragDrop","keys","DragDropToTextQuestion","containerId","readOnly","questionAnswer","this","getRoot","addClass","resizeAllDragsAndDrops","cloneDrags","positionDrags","prototype","thisQ","find","each","i","node","resizeAllDragsAndDropsInGroup","getClassnameNumericSuffix","group","dragHomes","maxWidth","maxHeight","drag","Math","max","ceil","offsetWidth","offsetHeight","setElementSize","drop","element","width","height","css","index","draghome","placeHolder","clone","removeClass","getChoice","getGroup","before","root","not","dragNode","currentPlace","removeAttr","inputNode","input","choice","val","place","getPlace","dropPosition","offset","data","top","left","unplacedDrag","getUnplacedChoice","hiddenDrag","getDragClone","length","hasClass","noOfDrags","noOfDropsInGroup","getInfiniteDragClones","cloneDrag","after","questionManager","addEventHandlersToDrag","sendDragToDrop","getQuestionAnsweredValues","result","id","value","isQuestionInteracted","oldAnswer","newAnswer","isInteracted","JSON","stringify","Object","forEach","key","handleDragStart","e","target","closest","prepare","start","setInputValue","hiddenDrop","getDrop","x","y","dragMove","dragEnd","pageX","pageY","dropNode","isPointInDrop","isDragSameAsDrop","placed","placedNode","placedDrag","sendDragHome","oldDrag","getCurrentDragInPlace","focus","attr","animateTo","getDragHome","handleKeyPress","currentDrag","nextDrag","keyCode","space","arrowRight","arrowDown","getNextDrag","arrowLeft","arrowUp","getPreviousDrag","escape","isKeyboardNavigation","preventDefault","numChoices","noOfChoicesInGroup","next","previous","currentPos","targetPos","M","util","js_pending","animate","parseInt","duration","done","trigger","js_complete","position","document","getElementById","is","slice","prefix","classes","classesArr","split","patt1","RegExp","test","match","exec","Number","inHome","eventHandlersInitialised","dragEventHandlersInitialised","questions","init","setupEventHandlers","hasOwnProperty","questionContainer","classList","contains","on","handleDragMoved","unbind","question","getQuestionForEvent","currentTarget","removeData","first","remove","handleFormDirty","core_formchangechecker","set_form_changed"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAuCAA,OAAO,sBAAA,CAAC,SAAU,gBAAiB,mBAAmB,SAASC,EAAGC,SAAUC,MAWxE,SAASC,uBAAuBC,YAAaC,UACpCD,KAAAA,YAAcA,YACdE,KAAAA,eAAiB,GAClBD,UACAE,KAAKC,UAAUC,SAAS,yBAE5BF,KAAKG,yBACLH,KAAKI,aACLJ,KAAKK,eACR,CAKDT,uBAAuBU,UAAUH,uBAAyB,WAClDI,IAAAA,MAAQP,KACZA,KAAKC,UAAUO,KAAK,0BAA0BC,MAAK,SAASC,EAAGC,MAC3DJ,MAAMK,8BACFL,MAAMM,0BAA0BpB,EAAEkB,MAAO,kBAChD,GACJ,EAODf,uBAAuBU,UAAUM,8BAAgC,SAASE,OAClEP,IAAAA,MAAQP,KACRe,UAAYf,KAAKC,UAAUO,KAAK,kBAAoBM,MAAQ,kBAC5DE,SAAW,EACXC,UAAY,EAGhBF,UAAUN,MAAK,SAASC,EAAGQ,MACvBF,SAAWG,KAAKC,IAAIJ,SAAUG,KAAKE,KAAKH,KAAKI,cAC7CL,UAAYE,KAAKC,IAAIH,UAAWE,KAAKE,KAAK,EAAIH,KAAKK,cACtD,IAGDP,UAAY,EACZC,WAAa,EAGbF,UAAUN,MAAK,SAASC,EAAGQ,MACvBX,MAAMiB,eAAeN,KAAMF,SAAUC,UACxC,IAGDjB,KAAKC,UAAUO,KAAK,kBAAoBM,OAAOL,MAAK,SAASC,EAAGe,MAC5DlB,MAAMiB,eAAeC,KAAMT,SAAUC,UACxC,GACJ,EASDrB,uBAAuBU,UAAUkB,eAAiB,SAASE,QAASC,MAAOC,QACvEnC,EAAEiC,SAASC,MAAMA,OAAOC,OAAOA,QAAQC,IAAI,aAAcD,OAAS,KACrE,EAODhC,uBAAuBU,UAAUF,WAAa,WACtCG,IAAAA,MAAQP,KACZO,MAAMN,UAAUO,KAAK,iBAAiBC,MAAK,SAASqB,MAAOC,UACvD,IAAIb,KAAOzB,EAAEsC,UACTC,YAAcd,KAAKe,QACvBD,YAAYE,cACZF,YAAY9B,SAAS,kBACjBK,MAAM4B,UAAUjB,MAAQ,SACxBX,MAAM6B,SAASlB,MAAQ,oBAC3BA,KAAKmB,OAAOL,YACf,GACJ,EAKDpC,uBAAuBU,UAAUD,cAAgB,WACzCE,IAAAA,MAAQP,KACRsC,KAAOtC,KAAKC,UAGhBqC,KAAK9B,KAAK,iBAAiB+B,IAAI,oBAAoB9B,MAAK,SAASC,EAAG8B,UAChE,IAAItB,KAAOzB,EAAE+C,UACTC,aAAelC,MAAMM,0BAA0BK,KAAM,WACzDA,KAAKhB,SAAS,YACTgC,YAAY,UACjBhB,KAAKwB,WAAW,YACK,OAAjBD,cACAvB,KAAKgB,YAAY,UAAYO,aAEpC,IAGDH,KAAK9B,KAAK,oBAAoBC,MAAK,SAASC,EAAGiC,WAC3C,IAAIC,MAAQnD,EAAEkD,WACVE,OAASD,MAAME,MACfC,MAAQxC,MAAMyC,SAASJ,OAGvBnB,KAAOa,KAAK9B,KAAK,cAAgBuC,OACjCE,aAAexB,KAAKyB,SAGpBL,GAFJpB,KAAK0B,KAAK,WAAYF,aAAaG,KAAKD,KAAK,YAAaF,aAAaI,MAExD,MAAXR,OAAAA,CAMJ,IAAIS,aAAe/C,MAAMgD,kBAAkBhD,MAAM6B,SAASQ,OAAQC,QAE9DW,WAAajD,MAAMkD,aAAaH,cAChCE,GAAAA,WAAWE,OACX,GAAIJ,aAAaK,SAAS,YAAa,CACnC,IAAIC,UAAYrD,MAAMsD,iBAAiBtD,MAAM6B,SAASkB,eAEtD,GADiB/C,MAAMuD,sBAAsBR,cAAc,GAC5CI,OAASE,UAAW,CAC/B,IAAIG,UAAYT,aAAarB,QAC7BuB,WAAWQ,MAAMD,WACjBE,gBAAgBC,uBAAuBH,UAC1C,MACGP,WAAWtD,SAAS,SAE3B,MACGsD,WAAWtD,SAAS,UAI5BK,MAAM4D,eAAe5D,MAAMgD,kBAAkBhD,MAAM6B,SAASQ,OAAQC,QAASpB,KAtB5E,CAuBJ,IAGDlB,MAAMR,eAAiBQ,MAAM6D,2BAChC,EAODxE,uBAAuBU,UAAU8D,0BAA4B,WACrDC,IAAAA,OAAS,CAAA,EAKb,OAJArE,KAAKC,UAAUO,KAAK,oBAAoBC,MAAK,SAACC,EAAGiC,WAC7C0B,OAAO1B,UAAU2B,IAAM3B,UAAU4B,KACpC,IAEMF,MACV,EAODzE,uBAAuBU,UAAUkE,qBAAuB,WAC9CC,IAAAA,UAAYzE,KAAKD,eACjB2E,UAAY1E,KAAKoE,4BACnBO,cAAe,EAGnB,OAAIC,KAAKC,UAAUH,aAAeE,KAAKC,UAAUJ,WAC7CE,cAAe,GAInBG,OAAOnF,KAAK+E,WAAWK,SAAQ,SAAAC,KACvBN,UAAUM,OAASP,UAAUO,OAC7BL,cAAe,EAEtB,IAEMA,aACV,EAOD/E,uBAAuBU,UAAU2E,gBAAkB,SAASC,GACpD3E,IAAAA,MAAQP,KACRkB,KAAOzB,EAAEyF,EAAEC,QAAQC,QAAQ,aAG3B,GADO1F,SAAS2F,QAAQH,GAClBI,QAASpE,KAAKyC,SAAS,gBAA7B,CAIJzC,KAAKhB,SAAS,gBACVuC,IAAAA,aAAezC,KAAKa,0BAA0BK,KAAM,WACpDuB,GAAiB,OAAjBA,aAAuB,CACvBzC,KAAKuF,cAAc9C,aAAc,GACjCvB,KAAKgB,YAAY,UAAYO,cACzB+C,IAAAA,WAAajF,MAAMkF,QAAQvE,KAAMuB,cACjC+C,WAAW9B,SACX8B,WAAWtF,SAAS,UACpBgB,KAAKgC,OAAOsC,WAAWtC,UAE9B,KAAM,CACH,IAAIM,WAAajD,MAAMkD,aAAavC,MAChCsC,GAAAA,WAAWE,OACX,GAAIxC,KAAKyC,SAAS,YAAa,CACvBC,IAAAA,UAAY5D,KAAK6D,iBAAiB7D,KAAKoC,SAASlB,OAEpD,GADiBlB,KAAK8D,sBAAsB5C,MAAM,GACnCwC,OAASE,UAAW,CAC/B,IAAIG,UAAY7C,KAAKe,QACrB8B,UAAU7B,YAAY,gBACtBsB,WAAWQ,MAAMD,WACjBE,gBAAgBC,uBAAuBH,WACvC7C,KAAKgC,OAAOa,UAAUb,SACzB,MACGM,WAAWtD,SAAS,UACpBgB,KAAKgC,OAAOM,WAAWN,SAE9B,MACGM,WAAWtD,SAAS,UACpBgB,KAAKgC,OAAOM,WAAWN,SAGlC,CAEDxD,SAAS4F,MAAMJ,EAAGhE,MAAM,SAASwE,EAAGC,EAAGzE,MACnCX,MAAMqF,SAASF,EAAGC,EAAGzE,KACxB,IAAE,SAASwE,EAAGC,EAAGzE,MACdX,MAAMsF,QAAQH,EAAGC,EAAGzE,KACvB,GAvCA,CAwCJ,EASDtB,uBAAuBU,UAAUsF,SAAW,SAASE,MAAOC,MAAO7E,MAC3DX,IAAAA,MAAQP,KACZA,KAAKC,UAAUO,KAAK,kBAAoBR,KAAKoC,SAASlB,OAAOT,MAAK,SAASC,EAAGsF,UAC1E,IAAIvE,KAAOhC,EAAEuG,UACTzF,MAAM0F,cAAcH,MAAOC,MAAOtE,MAClCA,KAAKvB,SAAS,wBAEduB,KAAKS,YAAY,uBAExB,IACIjC,KAAAA,UAAUO,KAAK,6BAA+BR,KAAKoC,SAASlB,OAAOqB,IAAI,iBAAiB9B,MAAK,SAASC,EAAGsF,UAC1G,IAAIvE,KAAOhC,EAAEuG,UACTzF,MAAM0F,cAAcH,MAAOC,MAAOtE,QAAUlB,MAAM2F,iBAAiBhF,KAAMO,MACzEA,KAAKvB,SAAS,wBAEduB,KAAKS,YAAY,uBAExB,GACJ,EASDtC,uBAAuBU,UAAUuF,QAAU,SAASC,MAAOC,MAAO7E,MAC1DX,IAAAA,MAAQP,KACRsC,KAAOtC,KAAKC,UACZkG,QAAS,EACb7D,KAAK9B,KAAK,kBAAoBR,KAAKoC,SAASlB,OAAOT,MAAK,SAASC,EAAGsF,UAChE,IAAIvE,KAAOhC,EAAEuG,UACT,OAACzF,MAAM0F,cAAcH,MAAOC,MAAOtE,QAMvCA,KAAKS,YAAY,wBACjB3B,MAAM4D,eAAejD,KAAMO,MAC3B0E,QAAS,GACF,EACV,IAED7D,KAAK9B,KAAK,6BAA+BR,KAAKoC,SAASlB,OAAOqB,IAAI,iBAAiB9B,MAAK,SAASC,EAAG0F,YAChG,IAAIC,WAAa5G,EAAE2G,YACf,IAAC7F,MAAM0F,cAAcH,MAAOC,MAAOM,aAAe9F,MAAM2F,iBAAiBhF,KAAMmF,YAE/E,OAAO,EAIXA,WAAWnE,YAAY,wBACnBO,IAAAA,aAAelC,MAAMM,0BAA0BwF,WAAY,WAC3D5E,KAAOlB,MAAMkF,QAAQvE,KAAMuB,cAG/B,OAFAlC,MAAM4D,eAAejD,KAAMO,MAC3B0E,QAAS,GACF,CACV,IAEIA,QACIG,KAAAA,aAAapF,KAEzB,EAQDtB,uBAAuBU,UAAU6D,eAAiB,SAASjD,KAAMO,MAEzD8E,IAAAA,QAAUvG,KAAKwG,sBAAsBxG,KAAKgD,SAASvB,OACvD,GAAuB,IAAnB8E,QAAQ7C,OAAc,CAClBjB,IAAAA,aAAezC,KAAKa,0BAA0B0F,QAAS,WACvDf,WAAaxF,KAAKyF,QAAQc,QAAS9D,cACvC+C,WAAWtF,SAAS,UACpBqG,QAAQrG,SAAS,gBACjBqG,QAAQrD,OAAOsC,WAAWtC,UACrBoD,KAAAA,aAAaC,QACrB,CAEmB,IAAhBrF,KAAKwC,QACA6B,KAAAA,cAAcvF,KAAKgD,SAASvB,MAAO,GACpCA,KAAK0B,KAAK,YACV1B,KAAKgF,UAGTzG,KAAKuF,cAAcvF,KAAKgD,SAASvB,MAAOzB,KAAKmC,UAAUjB,OACvDA,KAAKgB,YAAY,YACZhC,SAAS,iBAAmBF,KAAKgD,SAASvB,OAC/CP,KAAKwF,KAAK,WAAY,GACtB1G,KAAK2G,UAAUzF,KAAMO,MAE5B,EAOD7B,uBAAuBU,UAAUgG,aAAe,SAASpF,MACjDuB,IAAAA,aAAezC,KAAKa,0BAA0BK,KAAM,WACnC,OAAjBuB,cACAvB,KAAKgB,YAAY,UAAYO,cAEjCvB,KAAKiC,KAAK,YAAY,GAEtBnD,KAAK2G,UAAUzF,KAAMlB,KAAK4G,YAAY5G,KAAKoC,SAASlB,MAAOlB,KAAKmC,UAAUjB,OAC7E,EAUDtB,uBAAuBU,UAAUuG,eAAiB,SAAS3B,GACvD,IAAIzD,KAAOhC,EAAEyF,EAAEC,QAAQC,QAAQ,SAC/B,GAAoB,IAAhB3D,KAAKiC,OAAc,CACnB,IAAI2C,WAAa5G,EAAEyF,EAAEC,QACjB1C,aAAezC,KAAKa,0BAA0BwF,WAAY,WACzC,OAAjB5D,eACAhB,KAAOzB,KAAKyF,QAAQY,WAAY5D,cAEvC,CACGqE,IAAAA,YAAc9G,KAAKwG,sBAAsBxG,KAAKgD,SAASvB,OACvDsF,SAAWtH,IAEPyF,OAAAA,EAAE8B,SACDrH,KAAAA,KAAKsH,MACLtH,KAAAA,KAAKuH,WACLvH,KAAAA,KAAKwH,UACNJ,SAAW/G,KAAKoH,YAAYpH,KAAKoC,SAASX,MAAOqF,aACjD,MAECnH,KAAAA,KAAK0H,UACL1H,KAAAA,KAAK2H,QACNP,SAAW/G,KAAKuH,gBAAgBvH,KAAKoC,SAASX,MAAOqF,aACrD,MAECnH,KAAAA,KAAK6H,OACN,MAEJ,QAEI,YADAvD,gBAAgBwD,sBAAuB,GAI3CV,GAAAA,SAASrD,OAAQ,CACjBqD,SAAS5D,KAAK,WAAW,GACzB4D,SAAS7G,SAAS,gBAClB,IAAIsD,WAAaxD,KAAKyD,aAAasD,UAC/BvD,GAAAA,WAAWE,OACX,GAAIqD,SAASpD,SAAS,YAAa,CAC3BC,IAAAA,UAAY5D,KAAK6D,iBAAiB7D,KAAKoC,SAAS2E,WAEpD,GADiB/G,KAAK8D,sBAAsBiD,UAAU,GACvCrD,OAASE,UAAW,CAC/B,IAAIG,UAAYgD,SAAS9E,QACzB8B,UAAU7B,YAAY,gBACtB6B,UAAUrB,WAAW,YACrBc,WAAWQ,MAAMD,WACjBE,gBAAgBC,uBAAuBH,WACvCgD,SAAS7D,OAAOa,UAAUb,SAC7B,MACGM,WAAWtD,SAAS,UACpB6G,SAAS7D,OAAOM,WAAWN,SAElC,MACGM,WAAWtD,SAAS,UACpB6G,SAAS7D,OAAOM,WAAWN,SAGtC,MACGzB,KAAK0B,KAAK,WAAW,GAGzB+B,EAAEwC,iBACF1H,KAAKmE,eAAe4C,SAAUtF,KACjC,EASD7B,uBAAuBU,UAAU8G,YAAc,SAAStG,MAAOI,MAC3D,IAAI2B,OACA8E,WAAa3H,KAAK4H,mBAAmB9G,OAGrC+B,OADgB,IAAhB3B,KAAKwC,OACI,EAEA1D,KAAKmC,UAAUjB,MAAQ,EAI7B2G,IADHA,IAAAA,KAAO7H,KAAKuD,kBAAkBzC,MAAO+B,QAClB,IAAhBgF,KAAKnE,QAAgBb,OAAS8E,YACjC9E,SACAgF,KAAO7H,KAAKuD,kBAAkBzC,MAAO+B,QAGzC,OAAOgF,IACV,EASDjI,uBAAuBU,UAAUiH,gBAAkB,SAASzG,MAAOI,MAC/D,IAAI2B,OAGAA,OADgB,IAAhB3B,KAAKwC,OACI1D,KAAK4H,mBAAmB9G,OAExBd,KAAKmC,UAAUjB,MAAQ,EAI7B4G,IADHA,IAAAA,SAAW9H,KAAKuD,kBAAkBzC,MAAO+B,QAClB,IAApBiF,SAASpE,QAAgBb,OAAS,GACrCA,SACAiF,SAAW9H,KAAKuD,kBAAkBzC,MAAO+B,QAI7C,OAAOiF,QACV,EAQDlI,uBAAuBU,UAAUqG,UAAY,SAASzF,KAAMiE,QACxD,IAAI4C,WAAa7G,KAAKgC,SAClB8E,UAAY7C,OAAOjC,SACnB3C,MAAQP,KAEZiI,EAAEC,KAAKC,WAAW,wBAA0B5H,MAAMV,aAKlDqB,KAAKkH,QACD,CACI/E,KAAMgF,SAASnH,KAAKW,IAAI,SAAWmG,UAAU3E,KAAO0E,WAAW1E,KAC/DD,IAAKiF,SAASnH,KAAKW,IAAI,QAAUmG,UAAU5E,IAAM2E,WAAW3E,KAEhE,CACIkF,SAAU,OACVC,KAAM,WACF9I,EAAE,QAAQ+I,QAAQ,yBAA0B,CAACtH,KAAMiE,OAAQ5E,QAC3D0H,EAAEC,KAAKO,YAAY,wBAA0BlI,MAAMV,YACtD,GAGZ,EAUDD,uBAAuBU,UAAU2F,cAAgB,SAASH,MAAOC,MAAOtE,MACpE,IAAIiH,SAAWjH,KAAKyB,SACpB,OAAO4C,OAAS4C,SAASrF,MAAQyC,MAAQ4C,SAASrF,KAAO5B,KAAKE,SACnDoE,OAAS2C,SAAStF,KAAO2C,MAAQ2C,SAAStF,IAAM3B,KAAKG,QACnE,EAQDhC,uBAAuBU,UAAUiF,cAAgB,SAASxC,MAAOF,QACxD5C,KAAAA,UAAUO,KAAK,yBAA2BuC,OAAOD,IAAID,OAC7D,EAODjD,uBAAuBU,UAAUL,QAAU,WAChCR,OAAAA,EAAEkJ,SAASC,eAAe5I,KAAKH,aACzC,EASDD,uBAAuBU,UAAUsG,YAAc,SAAS9F,MAAO+B,QAC3D,OAAK7C,KAAKC,UAAUO,KAAK,kCAAoCM,MAAQ,UAAY+B,QAAQgG,GAAG,YAMrF7I,KAAKC,UAAUO,KAAK,kCAAoCM,MAAQ,UAAY+B,QALxE7C,KAAKC,UAAUO,KAAK,kBAAoBM,MAApB,iCAEX+B,OACZ,SAAW/B,MAGtB,EASDlB,uBAAuBU,UAAUiD,kBAAoB,SAASzC,MAAO+B,QACjE,OAAO7C,KAAKC,UAAUO,KAAK,kBAAoBM,MAAQ,UAAY+B,OAAS,aAAaiG,MAAM,EAAG,EACrG,EAQDlJ,uBAAuBU,UAAUkG,sBAAwB,SAASzD,OAC9D,OAAO/C,KAAKC,UAAUO,KAAK,wBAA0BuC,MACxD,EAQDnD,uBAAuBU,UAAUuD,iBAAmB,SAAS/C,OAClD,OAAAd,KAAKC,UAAUO,KAAK,cAAgBM,OAAO4C,MACrD,EAQD9D,uBAAuBU,UAAUsH,mBAAqB,SAAS9G,OACpD,OAAAd,KAAKC,UAAUO,KAAK,kBAAoBM,OAAO4C,MACzD,EASD9D,uBAAuBU,UAAUO,0BAA4B,SAASF,KAAMoI,QACxE,IAAIC,QAAUrI,KAAK+F,KAAK,SACpBsC,GAAY,KAAZA,QAEA,IADA,IAAIC,WAAaD,QAAQE,MAAM,KACtBpH,MAAQ,EAAGA,MAAQmH,WAAWvF,OAAQ5B,QAAS,CAEhDqH,GADQ,IAAIC,OAAO,IAAML,OAAS,aAC5BM,KAAKJ,WAAWnH,QAAS,CAC/B,IACIwH,MADQ,IAAIF,OAAO,aACLG,KAAKN,WAAWnH,QAClC,OAAO0H,OAAOF,MAAM,GACvB,CACJ,CAEL,OAAO,IACV,EAQD1J,uBAAuBU,UAAU6B,UAAY,SAASjB,MAClD,OAAOlB,KAAKa,0BAA0BK,KAAM,SAC/C,EASDtB,uBAAuBU,UAAU8B,SAAW,SAASzB,MACjD,OAAOX,KAAKa,0BAA0BF,KAAM,QAC/C,EAQDf,uBAAuBU,UAAU0C,SAAW,SAASrC,MACjD,OAAOX,KAAKa,0BAA0BF,KAAM,QAC/C,EAQDf,uBAAuBU,UAAUmD,aAAe,SAASvC,MACrD,OAAOlB,KAAKC,UAAUO,KAAK,kBACvBR,KAAKoC,SAASlB,MADS,wBAGXlB,KAAKmC,UAAUjB,MAC3B,SAAWlB,KAAKoC,SAASlB,MACzB,mBACP,EASDtB,uBAAuBU,UAAUwD,sBAAwB,SAAS5C,KAAMuI,QACpE,OAAIA,OACOzJ,KAAKC,UAAUO,KAAK,kBACvBR,KAAKoC,SAASlB,MADS,wBAGXlB,KAAKmC,UAAUjB,MAC3B,SAAWlB,KAAKoC,SAASlB,MACzB,aAAaqB,IAAI,oBAElBvC,KAAKC,UAAUO,KAAK,uBACXR,KAAKmC,UAAUjB,MAC3B,SAAWlB,KAAKoC,SAASlB,MACzB,aAAaqB,IAAI,mBACxB,EASD3C,uBAAuBU,UAAUmF,QAAU,SAASvE,KAAMuB,cACtD,OAAOzC,KAAKC,UAAUO,KAAK,cAAgBR,KAAKoC,SAASlB,MAAQ,SAAWuB,aAC/E,EASD7C,uBAAuBU,UAAU4F,iBAAmB,SAAShF,KAAMO,MACxD,OAAAzB,KAAKmC,UAAUjB,QAAUlB,KAAKmC,UAAUV,OAASzB,KAAKoC,SAASlB,QAAUlB,KAAKoC,SAASX,KACjG,EAQD,IAAIwC,gBAAkB,CAIlByF,0BAA0B,EAM1BC,6BAA8B,CAVZ,EAelBlC,sBAAsB,EAKtBmC,UAAW,CApBO,EA4BlBC,KAAM,SAAShK,YAAaC,UAMpB,GALJmE,gBAAgB2F,UAAU/J,aAAe,IAAID,uBAAuBC,YAAaC,UAC5EmE,gBAAgByF,2BACjBzF,gBAAgB6F,qBAChB7F,gBAAgByF,0BAA2B,IAE1CzF,gBAAgB0F,6BAA6BI,eAAelK,aAAc,CAC3EoE,gBAAgB0F,6BAA6B9J,cAAe,EAE5D,IAAImK,kBAAoBrB,SAASC,eAAe/I,aAC5CmK,kBAAkBC,UAAUC,SAAS,YACpCF,kBAAkBC,UAAUC,SAAS,0BAEtCjG,gBAAgBC,uBAAuBzE,EAAEuK,mBAAmBxJ,KAAK,iBAExE,CA3Ca,EAiDlBsJ,mBAAoB,WAChBrK,EAAE,QACG0K,GAAG,UACA,oDACAlG,gBAAgB4C,gBACnBsD,GAAG,UACA,kFACAlG,gBAAgB4C,gBACnBsD,GAAG,yBAA0BlG,gBAAgBmG,gBAzDpC,EAiElBlG,uBAAwB,SAASxC,SAE7BA,QAAQ2I,OAAO,wBACf3I,QAAQyI,GAAG,uBAAwBlG,gBAAgBgB,gBApErC,EA2ElBA,gBAAiB,SAASC,GACtBA,EAAEwC,iBACF,IAAI4C,SAAWrG,gBAAgBsG,oBAAoBrF,GAC/CoF,UACAA,SAASrF,gBAAgBC,EA/Ef,EAuFlB2B,eAAgB,SAAS3B,GACjBjB,IAAAA,gBAAgBwD,qBAAhBxD,CAGJA,gBAAgBwD,sBAAuB,EACvC,IAAI6C,SAAWrG,gBAAgBsG,oBAAoBrF,GAC/CoF,UACAA,SAASzD,eAAe3B,EAJ3B,CA1Fa,EAwGlBqF,oBAAqB,SAASrF,GAC1B,IAAIrF,YAAcJ,EAAEyF,EAAEsF,eAAepF,QAAQ,eAAesB,KAAK,MACjE,OAAOzC,gBAAgB2F,UAAU/J,YA1GnB,EAqHlBuK,gBAAiB,SAASlF,EAAGhE,KAAMiE,OAAQ5E,OACvCW,KAAKgB,YAAY,gBACjBhB,KAAKW,IAAI,MAAO,IAAIA,IAAI,OAAQ,IAChCsD,OAAOnB,MAAM9C,MACbiE,OAAOjD,YAAY,eACkB,IAA1BhB,KAAKiC,KAAK,cAAyD,IAA1BjC,KAAKiC,KAAK,cAC1DjC,KAAKgB,YAAY,UAAUhC,SAAS,YACpCgB,KAAKwB,WAAW,YAChBxB,KAAKuJ,WAAW,YACZvJ,KAAKyC,SAAS,aAAepD,MAAMuD,sBAAsB5C,MAAM,GAAMwC,OAAS,GAC9EnD,MAAMuD,sBAAsB5C,MAAM,GAAMwJ,QAAQC,eAGpB,IAAzBzJ,KAAKiC,KAAK,aAAuD,IAAzBjC,KAAKiC,KAAK,aACzDjC,KAAKuF,QACLvF,KAAKuJ,WAAW,iBAEkB,IAA3BtF,OAAOhC,KAAK,aAAyD,IAA3BgC,OAAOhC,KAAK,YAC7DgC,OAAOsF,WAAW,WAElBxG,gBAAgBwD,uBAChBxD,gBAAgBwD,sBAAuB,GAEvClH,MAAMiE,yBAENP,gBAAgB2G,kBAEhBrK,MAAMR,eAAiBQ,MAAM6D,4BAhJnB,EAuJlBwG,gBAAiB,gBAC2B,IAA7B3C,EAAE4C,wBACT5C,EAAE4C,uBAAuBC,kBAEhC,GAME,MAAA,CAOHjB,KAAM5F,gBAAgB4F,KAE7B"}