{"version":3,"file":"shapes.min.js","sources":["../src/shapes.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint max-depth: [\"error\", 8] */\n\n/**\n * Library of classes for handling simple shapes.\n *\n * These classes can represent shapes, let you alter them, can go to and from a string\n * representation, and can give you an SVG representation.\n *\n * @module qtype_ddmarker/shapes\n * @copyright  2018 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(function() {\n\n    \"use strict\";\n\n    /**\n     * A point, with x and y coordinates.\n     *\n     * @param {int} x centre X.\n     * @param {int} y centre Y.\n     * @constructor\n     */\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Standard toString method.\n     * @returns {string} \"x;y\";\n     */\n    Point.prototype.toString = function() {\n        return this.x + ',' + this.y;\n    };\n\n    /**\n     * Move a point\n     * @param {int} dx x offset\n     * @param {int} dy y offset\n     */\n    Point.prototype.move = function(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n    };\n\n    /**\n     * Return a new point that is a certain position relative to this one.\n     *\n     * @param {(int|Point)} offsetX if a point, offset by this points coordinates, else and int x offset.\n     * @param {int} [offsetY] used if offsetX is an int, the corresponding y offset.\n     * @return {Point} the new point.\n     */\n    Point.prototype.offset = function(offsetX, offsetY) {\n        if (offsetX instanceof Point) {\n            offsetY = offsetX.y;\n            offsetX = offsetX.x;\n        }\n        return new Point(this.x + offsetX, this.y + offsetY);\n    };\n\n    /**\n     * Make a point from the string representation.\n     *\n     * @param {String} coordinates \"x,y\".\n     * @return {Point} the point. Throws an exception if input is not valid.\n     */\n    Point.parse = function(coordinates) {\n        var bits = coordinates.split(',');\n        if (bits.length !== 2) {\n            throw new Error(coordinates + ' is not a valid point');\n        }\n        return new Point(Math.round(bits[0]), Math.round(bits[1]));\n    };\n\n\n    /**\n     * Shape constructor. Abstract class to represent the different types of drop zone shapes.\n     *\n     * @param {String} [label] name of this area.\n     * @param {int} [x] centre X.\n     * @param {int} [y] centre Y.\n     * @constructor\n     */\n    function Shape(label, x, y) {\n        this.label = label;\n        this.centre = new Point(x || 0, y || 0);\n    }\n\n    /**\n     * Get the type of shape.\n     *\n     * @return {String} 'circle', 'rectangle' or 'polygon';\n     */\n    Shape.prototype.getType = function() {\n        throw new Error('Not implemented.');\n    };\n\n    /**\n     * Get the string representation of this shape.\n     *\n     * @return {String} coordinates as they need to be typed into the form.\n     */\n    Shape.prototype.getCoordinates = function() {\n        throw new Error('Not implemented.');\n    };\n\n    /**\n     * Update the shape from the string representation.\n     *\n     * @param {String} coordinates in the form returned by getCoordinates.\n     * @param {number} ratio Ratio to scale.\n     * @return {boolean} true if the string could be parsed and the shape updated, else false.\n     */\n    Shape.prototype.parse = function(coordinates, ratio) {\n        void (coordinates, ratio);\n        throw new Error('Not implemented.');\n    };\n\n    /**\n     * Move the entire shape by this offset.\n     *\n     * @param {int} dx x offset.\n     * @param {int} dy y offset.\n     * @param {int} maxX ensure that after editing, the shape lies between 0 and maxX on the x-axis.\n     * @param {int} maxY ensure that after editing, the shape lies between 0 and maxX on the y-axis.\n     */\n    Shape.prototype.move = function(dx, dy, maxX, maxY) {\n        void (maxY);\n    };\n\n    /**\n     * Move one of the edit handles by this offset.\n     *\n     * @param {int} handleIndex which handle was moved.\n     * @param {int} dx x offset.\n     * @param {int} dy y offset.\n     * @param {int} maxX ensure that after editing, the shape lies between 0 and maxX on the x-axis.\n     * @param {int} maxY ensure that after editing, the shape lies between 0 and maxX on the y-axis.\n     */\n    Shape.prototype.edit = function(handleIndex, dx, dy, maxX, maxY) {\n        void (maxY);\n    };\n\n    /**\n     * Update the properties of this shape after a sequence of edits.\n     *\n     * For example make sure the circle radius is positive, of the polygon centre is centred.\n     */\n    Shape.prototype.normalizeShape = function() {\n        void (1); // To make CiBoT happy.\n    };\n\n    /**\n     * Get the string representation of this shape.\n     *\n     * @param {SVGElement} svg the SVG graphic to add this shape to.\n     * @return {SVGElement} SVG representation of this shape.\n     */\n    Shape.prototype.makeSvg = function(svg) {\n        void (svg);\n        throw new Error('Not implemented.');\n    };\n\n    /**\n     * Update the SVG representation of this shape.\n     *\n     * @param {SVGElement} svgEl the SVG representation of this shape.\n     */\n    Shape.prototype.updateSvg = function(svgEl) {\n        void (svgEl);\n    };\n\n    /**\n     * Make a circle similar to this shape.\n     *\n     * @return {Circle} a circle that is about the same size and position as this shape.\n     */\n    Shape.prototype.makeSimilarCircle = function() {\n        throw new Error('Not implemented.');\n    };\n\n    /**\n     * Make a rectangle similar to this shape.\n     *\n     * @return {Rectangle} a rectangle that is about the same size and position as this shape.\n     */\n    Shape.prototype.makeSimilarRectangle = function() {\n        throw new Error('Not implemented.');\n    };\n\n    /**\n     * Make a polygon similar to this shape.\n     *\n     * @return {Polygon} a polygon that is about the same size and position as this shape.\n     */\n    Shape.prototype.makeSimilarPolygon = function() {\n        throw new Error('Not implemented.');\n    };\n\n    /**\n     * Get the handles that should be offered to edit this shape, or null if not appropriate.\n     *\n     * @return {Object[]} with properties moveHandle {Point} and editHandles {Point[]}\n     */\n    Shape.prototype.getHandlePositions = function() {\n        return null;\n    };\n\n\n    /**\n     * A shape that is a circle.\n     *\n     * @param {String} label name of this area.\n     * @param {int} [x] centre X.\n     * @param {int} [y] centre Y.\n     * @param {int} [radius] radius.\n     * @constructor\n     */\n    function Circle(label, x, y, radius) {\n        x = x || 15;\n        y = y || 15;\n        Shape.call(this, label, x, y);\n        this.radius = radius || 15;\n    }\n    Circle.prototype = new Shape();\n\n    Circle.prototype.getType = function() {\n        return 'circle';\n    };\n\n    Circle.prototype.getCoordinates = function() {\n        return this.centre + ';' + Math.abs(this.radius);\n    };\n\n    Circle.prototype.makeSvg = function(svg) {\n        var svgEl = createSvgShapeGroup(svg, 'circle');\n        this.updateSvg(svgEl);\n        return svgEl;\n    };\n\n    Circle.prototype.updateSvg = function(svgEl) {\n        svgEl.childNodes[0].setAttribute('cx', this.centre.x);\n        svgEl.childNodes[0].setAttribute('cy', this.centre.y);\n        svgEl.childNodes[0].setAttribute('r', Math.abs(this.radius));\n        svgEl.childNodes[1].setAttribute('x', this.centre.x);\n        svgEl.childNodes[1].setAttribute('y', this.centre.y + 15);\n        svgEl.childNodes[1].textContent = this.label;\n    };\n\n    Circle.prototype.parse = function(coordinates, ratio) {\n        if (!coordinates.match(/^\\d+(\\.\\d+)?,\\d+(\\.\\d+)?;\\d+(\\.\\d+)?$/)) {\n            return false;\n        }\n\n        var bits = coordinates.split(';');\n        this.centre = Point.parse(bits[0]);\n        this.centre.x = this.centre.x * parseFloat(ratio);\n        this.centre.y = this.centre.y * parseFloat(ratio);\n        this.radius = Math.round(bits[1]) * parseFloat(ratio);\n        return true;\n    };\n\n    Circle.prototype.move = function(dx, dy, maxX, maxY) {\n        this.centre.move(dx, dy);\n        if (this.centre.x < this.radius) {\n            this.centre.x = this.radius;\n        }\n        if (this.centre.x > maxX - this.radius) {\n            this.centre.x = maxX - this.radius;\n        }\n        if (this.centre.y < this.radius) {\n            this.centre.y = this.radius;\n        }\n        if (this.centre.y > maxY - this.radius) {\n            this.centre.y = maxY - this.radius;\n        }\n    };\n\n    Circle.prototype.edit = function(handleIndex, dx, dy, maxX, maxY) {\n        this.radius += dx;\n        var limit = Math.min(this.centre.x, this.centre.y, maxX - this.centre.x, maxY - this.centre.y);\n        if (this.radius > limit) {\n            this.radius = limit;\n        }\n        if (this.radius < -limit) {\n            this.radius = -limit;\n        }\n    };\n\n    /**\n     * Update the properties of this shape after a sequence of edits.\n     *\n     * For example make sure the circle radius is positive, of the polygon centre is centred.\n     */\n    Circle.prototype.normalizeShape = function() {\n        this.radius = Math.abs(this.radius);\n    };\n\n    Circle.prototype.makeSimilarRectangle = function() {\n        return new Rectangle(this.label,\n                this.centre.x - this.radius, this.centre.y - this.radius,\n                this.radius * 2, this.radius * 2);\n    };\n\n    Circle.prototype.makeSimilarPolygon = function() {\n        // We make a similar square, so if you go to and from Rectangle afterwards, it is loss-less.\n        return new Polygon(this.label, [\n                this.centre.offset(-this.radius, -this.radius), this.centre.offset(-this.radius, this.radius),\n                this.centre.offset(this.radius, this.radius), this.centre.offset(this.radius, -this.radius)]);\n    };\n\n    Circle.prototype.getHandlePositions = function() {\n        return {\n            moveHandle: this.centre,\n            editHandles: [this.centre.offset(this.radius, 0)]\n        };\n    };\n\n\n    /**\n     * A shape that is a rectangle.\n     *\n     * @param {String} label name of this area.\n     * @param {int} [x] top left X.\n     * @param {int} [y] top left Y.\n     * @param {int} [width] width.\n     * @param {int} [height] height.\n     * @constructor\n     */\n    function Rectangle(label, x, y, width, height) {\n        Shape.call(this, label, x, y);\n        this.width = width || 30;\n        this.height = height || 30;\n    }\n    Rectangle.prototype = new Shape();\n\n    Rectangle.prototype.getType = function() {\n        return 'rectangle';\n    };\n\n    Rectangle.prototype.getCoordinates = function() {\n        return this.centre + ';' + this.width + ',' + this.height;\n    };\n\n    Rectangle.prototype.makeSvg = function(svg) {\n        var svgEl = createSvgShapeGroup(svg, 'rect');\n        this.updateSvg(svgEl);\n        return svgEl;\n    };\n\n    Rectangle.prototype.updateSvg = function(svgEl) {\n        if (this.width >= 0) {\n            svgEl.childNodes[0].setAttribute('x', this.centre.x);\n            svgEl.childNodes[0].setAttribute('width', this.width);\n        } else {\n            svgEl.childNodes[0].setAttribute('x', this.centre.x + this.width);\n            svgEl.childNodes[0].setAttribute('width', -this.width);\n        }\n        if (this.height >= 0) {\n            svgEl.childNodes[0].setAttribute('y', this.centre.y);\n            svgEl.childNodes[0].setAttribute('height', this.height);\n        } else {\n            svgEl.childNodes[0].setAttribute('y', this.centre.y + this.height);\n            svgEl.childNodes[0].setAttribute('height', -this.height);\n        }\n\n        svgEl.childNodes[1].setAttribute('x', this.centre.x + this.width / 2);\n        svgEl.childNodes[1].setAttribute('y', this.centre.y + this.height / 2 + 15);\n        svgEl.childNodes[1].textContent = this.label;\n    };\n\n    Rectangle.prototype.parse = function(coordinates, ratio) {\n        if (!coordinates.match(/^\\d+(\\.\\d+)?,\\d+(\\.\\d+)?;\\d+(\\.\\d+)?,\\d+(\\.\\d+)?$/)) {\n            return false;\n        }\n\n        var bits = coordinates.split(';');\n        this.centre = Point.parse(bits[0]);\n        this.centre.x = this.centre.x * parseFloat(ratio);\n        this.centre.y = this.centre.y * parseFloat(ratio);\n        var size = Point.parse(bits[1]);\n        this.width = size.x * parseFloat(ratio);\n        this.height = size.y * parseFloat(ratio);\n        return true;\n    };\n\n    Rectangle.prototype.move = function(dx, dy, maxX, maxY) {\n        this.centre.move(dx, dy);\n        if (this.centre.x < 0) {\n            this.centre.x = 0;\n        }\n        if (this.centre.x > maxX - this.width) {\n            this.centre.x = maxX - this.width;\n        }\n        if (this.centre.y < 0) {\n            this.centre.y = 0;\n        }\n        if (this.centre.y > maxY - this.height) {\n            this.centre.y = maxY - this.height;\n        }\n    };\n\n    Rectangle.prototype.edit = function(handleIndex, dx, dy, maxX, maxY) {\n        this.width += dx;\n        this.height += dy;\n        if (this.width < -this.centre.x) {\n            this.width = -this.centre.x;\n        }\n        if (this.width > maxX - this.centre.x) {\n            this.width = maxX - this.centre.x;\n        }\n        if (this.height < -this.centre.y) {\n            this.height = -this.centre.y;\n        }\n        if (this.height > maxY - this.centre.y) {\n            this.height = maxY - this.centre.y;\n        }\n    };\n\n    /**\n     * Update the properties of this shape after a sequence of edits.\n     *\n     * For example make sure the circle radius is positive, of the polygon centre is centred.\n     */\n    Rectangle.prototype.normalizeShape = function() {\n        if (this.width < 0) {\n            this.centre.x += this.width;\n            this.width = -this.width;\n        }\n        if (this.height < 0) {\n            this.centre.y += this.height;\n            this.height = -this.height;\n        }\n    };\n\n    Rectangle.prototype.makeSimilarCircle = function() {\n        return new Circle(this.label,\n                Math.round(this.centre.x + this.width / 2),\n                Math.round(this.centre.y + this.height / 2),\n                Math.round((this.width + this.height) / 4));\n    };\n\n    Rectangle.prototype.makeSimilarPolygon = function() {\n        return new Polygon(this.label, [\n            this.centre, this.centre.offset(0, this.height),\n            this.centre.offset(this.width, this.height), this.centre.offset(this.width, 0)]);\n    };\n\n    Rectangle.prototype.getHandlePositions = function() {\n        return {\n            moveHandle: this.centre.offset(this.width / 2, this.height / 2),\n            editHandles: [this.centre.offset(this.width, this.height)]\n        };\n    };\n\n\n    /**\n     * A shape that is a polygon.\n     *\n     * @param {String} label name of this area.\n     * @param {Point[]} [points] position of the vertices relative to (centreX, centreY).\n     *      each object in the array should have two\n     * @constructor\n     */\n    function Polygon(label, points) {\n        Shape.call(this, label, 0, 0);\n        this.points = points ? points.slice() : [new Point(10, 10), new Point(40, 10), new Point(10, 40)];\n        this.normalizeShape();\n        this.ratio = 1;\n    }\n    Polygon.prototype = new Shape();\n\n    Polygon.prototype.getType = function() {\n        return 'polygon';\n    };\n\n    Polygon.prototype.getCoordinates = function() {\n        var coordinates = '';\n        for (var i = 0; i < this.points.length; i++) {\n            coordinates += this.centre.offset(this.points[i]) + ';';\n        }\n        return coordinates.slice(0, coordinates.length - 1); // Strip off the last ';'.\n    };\n\n    Polygon.prototype.makeSvg = function(svg) {\n        var svgEl = createSvgShapeGroup(svg, 'polygon');\n        this.updateSvg(svgEl);\n        return svgEl;\n    };\n\n    Polygon.prototype.updateSvg = function(svgEl) {\n        svgEl.childNodes[0].setAttribute('points', this.getCoordinates().replace(/[,;]/g, ' '));\n        svgEl.childNodes[0].setAttribute('transform', 'scale(' + parseFloat(this.ratio) + ')');\n        svgEl.childNodes[1].setAttribute('x', this.centre.x);\n        svgEl.childNodes[1].setAttribute('y', this.centre.y + 15);\n        svgEl.childNodes[1].textContent = this.label;\n    };\n\n    Polygon.prototype.parse = function(coordinates, ratio) {\n        if (!coordinates.match(/^\\d+(\\.\\d+)?,\\d+(\\.\\d+)?(?:;\\d+(\\.\\d+)?,\\d+(\\.\\d+)?)*$/)) {\n            return false;\n        }\n\n        var bits = coordinates.split(';');\n        var points = [];\n        for (var i = 0; i < bits.length; i++) {\n            points.push(Point.parse(bits[i]));\n        }\n\n        this.points = points;\n        this.centre.x = 0;\n        this.centre.y = 0;\n        this.ratio = ratio;\n        this.normalizeShape();\n\n        return true;\n    };\n\n    Polygon.prototype.move = function(dx, dy, maxX, maxY) {\n        this.centre.move(dx, dy);\n        var bbXMin = maxX,\n            bbXMax = 0,\n            bbYMin = maxY,\n            bbYMax = 0;\n        // Computer centre.\n        for (var i = 0; i < this.points.length; i++) {\n            bbXMin = Math.min(bbXMin, this.points[i].x);\n            bbXMax = Math.max(bbXMax, this.points[i].x);\n            bbYMin = Math.min(bbYMin, this.points[i].y);\n            bbYMax = Math.max(bbYMax, this.points[i].y);\n        }\n        if (this.centre.x < -bbXMin) {\n            this.centre.x = -bbXMin;\n        }\n        if (this.centre.x > maxX - bbXMax) {\n            this.centre.x = maxX - bbXMax;\n        }\n        if (this.centre.y < -bbYMin) {\n            this.centre.y = -bbYMin;\n        }\n        if (this.centre.y > maxY - bbYMax) {\n            this.centre.y = maxY - bbYMax;\n        }\n    };\n\n    Polygon.prototype.edit = function(handleIndex, dx, dy, maxX, maxY) {\n        this.points[handleIndex].move(dx, dy);\n        if (this.points[handleIndex].x < -this.centre.x) {\n            this.points[handleIndex].x = -this.centre.x;\n        }\n        if (this.points[handleIndex].x > maxX - this.centre.x) {\n            this.points[handleIndex].x = maxX - this.centre.x;\n        }\n        if (this.points[handleIndex].y < -this.centre.y) {\n            this.points[handleIndex].y = -this.centre.y;\n        }\n        if (this.points[handleIndex].y > maxY - this.centre.y) {\n            this.points[handleIndex].y = maxY - this.centre.y;\n        }\n    };\n\n    /**\n     * Add a new point after the given point, with the same co-ordinates.\n     *\n     * This does not automatically normalise.\n     *\n     * @param {int} pointIndex the index of the vertex after which to insert this new one.\n     */\n    Polygon.prototype.addNewPointAfter = function(pointIndex) {\n        this.points.splice(pointIndex, 0,\n                new Point(this.points[pointIndex].x, this.points[pointIndex].y));\n    };\n\n    Polygon.prototype.normalizeShape = function() {\n        var i,\n            x = 0,\n            y = 0;\n\n        if (this.points.length === 0) {\n            return;\n        }\n\n        // Computer centre.\n        for (i = 0; i < this.points.length; i++) {\n            x += this.points[i].x;\n            y += this.points[i].y;\n        }\n        x = Math.round(x / this.points.length);\n        y = Math.round(y / this.points.length);\n\n        if (x === 0 && y === 0) {\n            return;\n        }\n\n        for (i = 0; i < this.points.length; i++) {\n            this.points[i].move(-x, -y);\n        }\n        this.centre.move(x, y);\n    };\n\n    Polygon.prototype.makeSimilarCircle = function() {\n        return this.makeSimilarRectangle().makeSimilarCircle();\n    };\n\n    Polygon.prototype.makeSimilarRectangle = function() {\n        var p,\n            minX = 0,\n            maxX = 0,\n            minY = 0,\n            maxY = 0;\n        for (var i = 0; i < this.points.length; i++) {\n            p = this.points[i];\n            minX = Math.min(minX, p.x);\n            maxX = Math.max(maxX, p.x);\n            minY = Math.min(minY, p.y);\n            maxY = Math.max(maxY, p.y);\n        }\n        return new Rectangle(this.label,\n                this.centre.x + minX, this.centre.y + minY,\n                Math.max(maxX - minX, 10), Math.max(maxY - minY, 10));\n    };\n\n    Polygon.prototype.getHandlePositions = function() {\n        var editHandles = [];\n        for (var i = 0; i < this.points.length; i++) {\n            editHandles.push(this.points[i].offset(this.centre.x, this.centre.y));\n        }\n\n        this.centre.x = this.centre.x * parseFloat(this.ratio);\n        this.centre.y = this.centre.y * parseFloat(this.ratio);\n\n        return {\n            moveHandle: this.centre,\n            editHandles: editHandles\n        };\n    };\n\n\n    /**\n     * Not a shape (null object pattern).\n     *\n     * @param {String} label name of this area.\n     * @constructor\n     */\n    function NullShape(label) {\n        Shape.call(this, label);\n    }\n    NullShape.prototype = new Shape();\n\n    NullShape.prototype.getType = function() {\n        return 'null';\n    };\n\n    NullShape.prototype.getCoordinates = function() {\n        return '';\n    };\n\n    NullShape.prototype.makeSvg = function(svg) {\n        void (svg);\n        return null;\n    };\n\n    NullShape.prototype.updateSvg = function(svgEl) {\n        void (svgEl);\n    };\n\n    NullShape.prototype.parse = function(coordinates) {\n        void (coordinates);\n        return false;\n    };\n\n    NullShape.prototype.makeSimilarCircle = function() {\n        return new Circle(this.label);\n    };\n\n    NullShape.prototype.makeSimilarRectangle = function() {\n        return new Rectangle(this.label);\n    };\n\n    NullShape.prototype.makeSimilarPolygon = function() {\n        return new Polygon(this.label);\n    };\n\n\n    /**\n     * Make a new SVG DOM element as a child of svg.\n     *\n     * @param {SVGElement} svg the parent node.\n     * @param {String} tagName the tag name.\n     * @return {SVGElement} the newly created node.\n     */\n    function createSvgElement(svg, tagName) {\n        var svgEl = svg.ownerDocument.createElementNS('http://www.w3.org/2000/svg', tagName);\n        svg.appendChild(svgEl);\n        return svgEl;\n    }\n\n    /**\n     * Make a group SVG DOM elements containing a shape of the given type as first child,\n     * and a text label as the second child.\n     *\n     * @param {SVGElement} svg the parent node.\n     * @param {String} tagName the tag name.\n     * @return {SVGElement} the newly created g element.\n     */\n    function createSvgShapeGroup(svg, tagName) {\n        var svgEl = createSvgElement(svg, 'g');\n        createSvgElement(svgEl, tagName).setAttribute('class', 'shape');\n        createSvgElement(svgEl, 'text').setAttribute('class', 'shapeLabel');\n        return svgEl;\n    }\n\n    /**\n     * @alias module:qtype_ddmarker/shapes\n     */\n    return {\n        /**\n         * A point, with x and y coordinates.\n         *\n         * @param {int} x centre X.\n         * @param {int} y centre Y.\n         * @constructor\n         */\n        Point: Point,\n\n        /**\n         * A point, with x and y coordinates.\n         *\n         * @param {int} x centre X.\n         * @param {int} y centre Y.\n         * @constructor\n         */\n        Shape: Shape,\n\n        /**\n         * A shape that is a circle.\n         *\n         * @param {String} label name of this area.\n         * @param {int} [x] centre X.\n         * @param {int} [y] centre Y.\n         * @param {int} [radius] radius.\n         * @constructor\n         */\n        Circle: Circle,\n\n        /**\n         * A shape that is a rectangle.\n         *\n         * @param {String} label name of this area.\n         * @param {int} [x] top left X.\n         * @param {int} [y] top left Y.\n         * @param {int} [width] width.\n         * @param {int} [height] height.\n         * @constructor\n         */\n        Rectangle: Rectangle,\n\n        /**\n         * A shape that is a polygon.\n         *\n         * @param {String} label name of this area.\n         * @param {Point[]} [points] position of the vertices relative to (centreX, centreY).\n         *      each object in the array should have two\n         * @constructor\n         */\n        Polygon: Polygon,\n\n        /**\n         * Not a shape (null object pattern).\n         *\n         * @param {String} label name of this area.\n         * @constructor\n         */\n        NullShape: NullShape,\n\n        /**\n         * Make a new SVG DOM element as a child of svg.\n         *\n         * @param {SVGElement} svg the parent node.\n         * @param {String} tagName the tag name.\n         * @return {SVGElement} the newly created node.\n         */\n        createSvgElement: createSvgElement,\n\n        /**\n         * Make a shape of the given type.\n         *\n         * @param {String} shapeType\n         * @param {String} label\n         * @return {Shape} the requested shape.\n         */\n        make: function(shapeType, label) {\n            switch (shapeType) {\n                case 'circle':\n                    return new Circle(label);\n                case 'rectangle':\n                    return new Rectangle(label);\n                case 'polygon':\n                    return new Polygon(label);\n                default:\n                    return new NullShape(label);\n            }\n        },\n\n        /**\n         * Make a shape of the given type that is similar to the shape of the original type.\n         *\n         * @param {String} shapeType the new type of shape to make\n         * @param {Shape} shape the shape to copy\n         * @return {Shape} the similar shape of a different type.\n         */\n        getSimilar: function(shapeType, shape) {\n            if (shapeType === shape.getType()) {\n                return shape;\n            }\n            switch (shapeType) {\n                case 'circle':\n                    return shape.makeSimilarCircle();\n                case 'rectangle':\n                    return shape.makeSimilarRectangle();\n                case 'polygon':\n                    return shape.makeSimilarPolygon();\n                default:\n                    return new NullShape(shape.label);\n            }\n        }\n    };\n});\n"],"names":["define","Point","x","y","Shape","label","this","centre","Circle","radius","call","Rectangle","width","height","Polygon","points","slice","normalizeShape","ratio","NullShape","createSvgElement","svg","tagName","svgEl","ownerDocument","createElementNS","appendChild","createSvgShapeGroup","setAttribute","prototype","toString","move","dx","dy","offset","offsetX","offsetY","parse","coordinates","bits","split","length","Error","Math","round","getType","getCoordinates","maxX","maxY","edit","handleIndex","makeSvg","updateSvg","makeSimilarCircle","makeSimilarRectangle","makeSimilarPolygon","getHandlePositions","abs","childNodes","textContent","match","parseFloat","limit","min","moveHandle","editHandles","size","i","replace","push","bbXMin","bbXMax","bbYMin","bbYMax","max","addNewPointAfter","pointIndex","splice","p","minX","minY","make","shapeType","getSimilar","shape"],"mappings":"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"}