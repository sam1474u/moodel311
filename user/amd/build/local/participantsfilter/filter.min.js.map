{"version":3,"file":"filter.min.js","sources":["../../../src/local/participantsfilter/filter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Base Filter class for a filter type in the participants filter UI.\n *\n * @module     core_user/local/participantsfilter/filter\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Autocomplete from 'core/form-autocomplete';\nimport Selectors from './selectors';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Fetch all checked options in the select.\n *\n * This is a poor-man's polyfill for select.selectedOptions, which is not available in IE11.\n *\n * @param {HTMLSelectElement} select\n * @returns {HTMLOptionElement[]} All selected options\n */\nconst getOptionsForSelect = select => {\n    return select.querySelectorAll(':checked');\n};\n\nexport default class {\n\n    /**\n     * Constructor for a new filter.\n     *\n     * @param {String} filterType The type of filter that this relates to\n     * @param {HTMLElement} rootNode The root node for the participants filterset\n     * @param {Array} initialValues The initial values for the selector\n     */\n    constructor(filterType, rootNode, initialValues) {\n        this.filterType = filterType;\n        this.rootNode = rootNode;\n\n        this.addValueSelector(initialValues);\n    }\n\n    /**\n     * Perform any tear-down for this filter type.\n     */\n    tearDown() {\n        // eslint-disable-line no-empty-function\n    }\n\n    /**\n     * Get the placeholder to use when showing the value selector.\n     *\n     * @return {Promise} Resolving to a String\n     */\n    get placeholder() {\n        return getString('placeholdertypeorselect', 'core_user');\n    }\n\n    /**\n     * Whether to show suggestions in the autocomplete.\n     *\n     * @return {Boolean}\n     */\n    get showSuggestions() {\n        return true;\n    }\n\n    /**\n     * Add the value selector to the filter row.\n     *\n     * @param {Array} initialValues\n     */\n    async addValueSelector(initialValues = []) {\n        const filterValueNode = this.getFilterValueNode();\n\n        // Copy the data in place.\n        const sourceDataNode = this.getSourceDataForFilter();\n        if (!sourceDataNode) {\n            return;\n        }\n        filterValueNode.innerHTML = sourceDataNode.outerHTML;\n\n        const dataSource = filterValueNode.querySelector('select');\n\n        // Set an ID for this filter value element.\n        dataSource.id = 'filter-value-' + dataSource.getAttribute('data-field-name');\n\n        // Create a hidden label for the filter value.\n        const filterValueLabel = document.createElement('label');\n        filterValueLabel.setAttribute('for', dataSource.id);\n        filterValueLabel.classList.add('sr-only');\n        filterValueLabel.innerText = dataSource.getAttribute('data-field-title');\n\n        // Append this label to the filter value container.\n        filterValueNode.appendChild(filterValueLabel);\n\n        // If there are any initial values then attempt to apply them.\n        initialValues.forEach(filterValue => {\n            let selectedOption = dataSource.querySelector(`option[value=\"${filterValue}\"]`);\n            if (selectedOption) {\n                selectedOption.selected = true;\n            } else if (!this.showSuggestions) {\n                selectedOption = document.createElement('option');\n                selectedOption.value = filterValue;\n                selectedOption.innerHTML = filterValue;\n                selectedOption.selected = true;\n\n                dataSource.append(selectedOption);\n            }\n        });\n\n        Autocomplete.enhance(\n            // The source select element.\n            dataSource,\n\n            // Whether to allow 'tags' (custom entries).\n            dataSource.dataset.allowCustom == \"1\",\n\n            // We do not require AJAX at all as standard.\n            null,\n\n            // The string to use as a placeholder.\n            await this.placeholder,\n\n            // Disable case sensitivity on searches.\n            false,\n\n            // Show suggestions.\n            this.showSuggestions,\n\n            // Do not override the 'no suggestions' string.\n            null,\n\n            // Close the suggestions if this is not a multi-select.\n            !dataSource.multiple,\n\n            // Template overrides.\n            {\n                items: 'core_user/local/participantsfilter/autocomplete_selection_items',\n                layout: 'core_user/local/participantsfilter/autocomplete_layout',\n                selection: 'core_user/local/participantsfilter/autocomplete_selection',\n            }\n        );\n    }\n\n    /**\n     * Get the root node for this filter.\n     *\n     * @returns {HTMLElement}\n     */\n    get filterRoot() {\n        return this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\n    }\n\n    /**\n     * Get the possible data for this filter type.\n     *\n     * @returns {Array}\n     */\n    getSourceDataForFilter() {\n        const filterDataNode = this.rootNode.querySelector(Selectors.filterset.regions.datasource);\n\n        return filterDataNode.querySelector(Selectors.data.fields.byName(this.filterType));\n    }\n\n    /**\n     * Get the HTMLElement which contains the value selector.\n     *\n     * @returns {HTMLElement}\n     */\n    getFilterValueNode() {\n        return this.filterRoot.querySelector(Selectors.filter.regions.values);\n    }\n\n    /**\n     * Get the name of this filter.\n     *\n     * @returns {String}\n     */\n    get name() {\n        return this.filterType;\n    }\n\n    /**\n     * Get the type of join specified.\n     *\n     * @returns {Number}\n     */\n    get jointype() {\n        return parseInt(this.filterRoot.querySelector(Selectors.filter.fields.join).value, 10);\n    }\n\n    /**\n     * Get the list of raw values for this filter type.\n     *\n     * @returns {Array}\n     */\n    get rawValues() {\n        const filterValueNode = this.getFilterValueNode();\n        const filterValueSelect = filterValueNode.querySelector('select');\n\n        return Object.values(getOptionsForSelect(filterValueSelect)).map(option => option.value);\n    }\n\n    /**\n     * Get the list of values for this filter type.\n     *\n     * @returns {Array}\n     */\n    get values() {\n        return this.rawValues.map(option => parseInt(option, 10));\n    }\n\n    /**\n     * Get the composed value for this filter.\n     *\n     * @returns {Object}\n     */\n    get filterValue() {\n        return {\n            name: this.name,\n            jointype: this.jointype,\n            values: this.values,\n        };\n    }\n}\n"],"names":["_formAutocomplete","_interopRequireDefault","_selectors","_default","filterType","rootNode","initialValues","_classCallCheck","this","addValueSelector","_addValueSelector","value","_str","get_string","regeneratorRuntime","mark","_callee","filterValueNode","sourceDataNode","dataSource","filterValueLabel","_this","_args","arguments","wrap","_context","prev","next","getFilterValueNode","getSourceDataForFilter","abrupt","innerHTML","outerHTML","querySelector","id","getAttribute","document","createElement","setAttribute","classList","add","innerText","appendChild","forEach","filterValue","selectedOption","concat","selected","showSuggestions","append","t0","Autocomplete","default","t1","t2","dataset","allowCustom","placeholder","t3","sent","t4","t5","multiple","t6","items","layout","selection","enhance","call","stop","Selectors","filter","byName","filterset","regions","datasource","data","fields","filterRoot","values","parseInt","join","select","filterValueSelect","Object","querySelectorAll","map","option","rawValues","name","jointype"],"mappings":"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"}