{"version":3,"file":"status_field.min.js","sources":["../src/status_field.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module for the user enrolment status field in the course participants page.\n *\n * @module     core_user/status_field\n * @copyright  2017 Jun Pataleta\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as DynamicTable from 'core_table/dynamic';\nimport * as Repository from './repository';\nimport * as Str from 'core/str';\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\nimport Fragment from 'core/fragment';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport {add as notifyUser} from 'core/toast';\n\nconst Selectors = {\n    editEnrolment: '[data-action=\"editenrolment\"]',\n    showDetails: '[data-action=\"showdetails\"]',\n    unenrol: '[data-action=\"unenrol\"]',\n    statusElement: '[data-status]',\n};\n\n/**\n * Get the dynamic table from the specified link.\n *\n * @param {HTMLElement} link\n * @returns {HTMLElement}\n */\nconst getDynamicTableFromLink = link => link.closest(DynamicTableSelectors.main.region);\n\n/**\n * Get the status container from the specified link.\n *\n * @param {HTMLElement} link\n * @returns {HTMLElement}\n */\nconst getStatusContainer = link => link.closest(Selectors.statusElement);\n\n/**\n * Get user enrolment id from the specified link\n *\n * @param {HTMLElement} link\n * @returns {Number}\n */\nconst getUserEnrolmentIdFromLink = link => link.getAttribute('rel');\n\n/**\n * Register all event listeners for the status fields.\n *\n * @param {Number} contextId\n * @param {Number} uniqueId\n */\nconst registerEventListeners = (contextId, uniqueId) => {\n    const getBodyFunction = (userEnrolmentId, formData) => getBody(contextId, userEnrolmentId, formData);\n\n    document.addEventListener('click', e => {\n        const tableRoot = e.target.closest(DynamicTableSelectors.main.fromRegionId(uniqueId));\n        if (!tableRoot) {\n            return;\n        }\n\n        const editLink = e.target.closest(Selectors.editEnrolment);\n        if (editLink) {\n            e.preventDefault();\n\n            showEditDialogue(editLink, getBodyFunction);\n        }\n\n        const unenrolLink = e.target.closest(Selectors.unenrol);\n        if (unenrolLink) {\n            e.preventDefault();\n\n            showUnenrolConfirmation(unenrolLink);\n        }\n\n        const showDetailsLink = e.target.closest(Selectors.showDetails);\n        if (showDetailsLink) {\n            e.preventDefault();\n\n            showStatusDetails(showDetailsLink);\n        }\n    });\n};\n\n/**\n * Show the edit dialogue.\n *\n * @param {HTMLElement} link\n * @param {Function} getBody Function to get the body for the specified user enrolment\n */\nconst showEditDialogue = (link, getBody) => {\n    const container = getStatusContainer(link);\n    const userEnrolmentId = getUserEnrolmentIdFromLink(link);\n\n    ModalFactory.create({\n        large: true,\n        title: Str.get_string('edituserenrolment', 'enrol', container.dataset.fullname),\n        type: ModalFactory.types.SAVE_CANCEL,\n        body: getBody(userEnrolmentId)\n    })\n    .then(modal => {\n        // Handle save event.\n        modal.getRoot().on(ModalEvents.save, e => {\n            // Don't close the modal yet.\n            e.preventDefault();\n\n            // Submit form data.\n            submitEditFormAjax(link, getBody, modal, userEnrolmentId, container.dataset);\n        });\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            // Destroy when hidden.\n            modal.destroy();\n        });\n\n        // Show the modal.\n        modal.show();\n\n        return modal;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Show and handle the unenrolment confirmation dialogue.\n *\n * @param {HTMLElement} link\n */\nconst showUnenrolConfirmation = link => {\n    const container = getStatusContainer(link);\n    const userEnrolmentId = getUserEnrolmentIdFromLink(link);\n\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n    })\n    .then(modal => {\n        // Handle confirm event.\n        modal.getRoot().on(ModalEvents.save, e => {\n            // Don't close the modal yet.\n            e.preventDefault();\n\n            // Submit data.\n            submitUnenrolFormAjax(\n                link,\n                modal,\n                {\n                    ueid: userEnrolmentId,\n                },\n                container.dataset\n            );\n        });\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            // Destroy when hidden.\n            modal.destroy();\n        });\n\n        // Display the delete confirmation modal.\n        modal.show();\n\n        const stringData = [\n            {\n                key: 'unenrol',\n                component: 'enrol',\n            },\n            {\n                key: 'unenrolconfirm',\n                component: 'enrol',\n                param: {\n                    user: container.dataset.fullname,\n                    course: container.dataset.coursename,\n                    enrolinstancename: container.dataset.enrolinstancename,\n                }\n            }\n        ];\n\n        return Promise.all([Str.get_strings(stringData), modal]);\n    })\n    .then(([strings, modal]) => {\n        modal.setTitle(strings[0]);\n        modal.setSaveButtonText(strings[0]);\n        modal.setBody(strings[1]);\n\n        return modal;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Show the user details dialogue.\n *\n * @param {HTMLElement} link\n */\nconst showStatusDetails = link => {\n    const container = getStatusContainer(link);\n\n    const context = {\n        editenrollink: '',\n        statusclass: container.querySelector('span.badge').getAttribute('class'),\n        ...container.dataset,\n    };\n\n    // Find the edit enrolment link.\n    const editEnrolLink = container.querySelector(Selectors.editEnrolment);\n    if (editEnrolLink) {\n        // If there's an edit enrolment link for this user, clone it into the context for the modal.\n        context.editenrollink = editEnrolLink.outerHTML;\n    }\n\n    ModalFactory.create({\n        large: true,\n        type: ModalFactory.types.CANCEL,\n        title: Str.get_string('enroldetails', 'enrol'),\n        body: Templates.render('core_user/status_details', context),\n    })\n    .then(modal => {\n        if (editEnrolLink) {\n            modal.getRoot().on('click', Selectors.editEnrolment, e => {\n                e.preventDefault();\n                modal.hide();\n\n                // Trigger click event for the edit enrolment link to show the edit enrolment modal.\n                editEnrolLink.click();\n            });\n        }\n\n        modal.show();\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, () => modal.destroy());\n\n        return modal;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Submit the edit dialogue.\n *\n * @param {HTMLElement} clickedLink\n * @param {Function} getBody\n * @param {Object} modal\n * @param {Number} userEnrolmentId\n * @param {Object} userData\n */\nconst submitEditFormAjax = (clickedLink, getBody, modal, userEnrolmentId, userData) => {\n    const form = modal.getRoot().find('form');\n\n    Repository.submitUserEnrolmentForm(form.serialize())\n    .then(data => {\n        if (!data.result) {\n            throw data.result;\n        }\n\n        // Dismiss the modal.\n        modal.hide();\n        modal.destroy();\n\n        return data;\n    })\n    .then(() => {\n        DynamicTable.refreshTableContent(getDynamicTableFromLink(clickedLink))\n        .catch(Notification.exception);\n\n        return Str.get_string('enrolmentupdatedforuser', 'core_enrol', userData);\n    })\n    .then(notificationString => {\n        notifyUser(notificationString);\n\n        return;\n    })\n    .catch(() => {\n        modal.setBody(getBody(userEnrolmentId, JSON.stringify(form.serialize())));\n\n        return modal;\n    });\n};\n\n/**\n * Submit the unenrolment form.\n *\n * @param {HTMLElement} clickedLink\n * @param {Object} modal\n * @param {Object} args\n * @param {Object} userData\n */\nconst submitUnenrolFormAjax = (clickedLink, modal, args, userData) => {\n    Repository.unenrolUser(args.ueid)\n    .then(data => {\n        if (!data.result) {\n            // Display an alert containing the error message\n            Notification.alert(data.errors[0].key, data.errors[0].message);\n\n            return data;\n        }\n\n        // Dismiss the modal.\n        modal.hide();\n        modal.destroy();\n\n        return data;\n    })\n    .then(() => {\n        DynamicTable.refreshTableContent(getDynamicTableFromLink(clickedLink))\n        .catch(Notification.exception);\n\n        return Str.get_string('unenrolleduser', 'core_enrol', userData);\n    })\n    .then(notificationString => {\n        notifyUser(notificationString);\n\n        return;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Get the body fragment.\n *\n * @param {Number} contextId\n * @param {Number} ueid The user enrolment id\n * @param {Object} formdata\n * @returns {Promise}\n */\nconst getBody = (contextId, ueid, formdata = null) => Fragment.loadFragment(\n    'enrol',\n    'user_enrolment_form',\n    contextId,\n    {\n        ueid,\n        formdata,\n    }\n);\n\n/**\n * Initialise the statu field handler.\n *\n * @param {object} param\n * @param {Number} param.contextid\n * @param {Number} param.uniqueid\n */\nexport const init = ({contextid, uniqueid}) => {\n    registerEventListeners(contextid, uniqueid);\n};\n"],"names":["DynamicTable","_interopRequireWildcard","Repository","Str","_selectors","_interopRequireDefault","_fragment","_modal_events","_modal_factory","_notification","_templates","Selectors","getDynamicTableFromLink","link","closest","DynamicTableSelectors","main","region","getStatusContainer","getUserEnrolmentIdFromLink","getAttribute","showEditDialogue","getBody","container","userEnrolmentId","ModalFactory","create","large","title","get_string","dataset","fullname","type","types","SAVE_CANCEL","body","then","modal","getRoot","on","ModalEvents","save","e","preventDefault","submitEditFormAjax","hidden","destroy","show","catch","Notification","exception","showUnenrolConfirmation","submitUnenrolFormAjax","ueid","stringData","key","component","param","user","course","coursename","enrolinstancename","Promise","all","get_strings","_ref","_ref2","_slicedToArray","strings","setTitle","setSaveButtonText","setBody","showStatusDetails","context","_objectSpread","editenrollink","statusclass","querySelector","editEnrolLink","outerHTML","CANCEL","Templates","render","hide","click","clickedLink","userData","form","find","submitUserEnrolmentForm","serialize","data","result","refreshTableContent","notificationString","_toast","add","JSON","stringify","args","unenrolUser","alert","errors","message","contextId","formdata","Fragment","loadFragment","_ref3","contextid","uniqueId","getBodyFunction","uniqueid","formData","document","addEventListener","target","fromRegionId","editLink","unenrolLink","showDetailsLink"],"mappings":"myGAuBAA,aAAAC,wBAAAD,cACAE,WAAAD,wBAAAC,YACAC,IAAAF,wBAAAE,KACAC,WAAAC,uBAAAD,YACAE,UAAAD,uBAAAC,WACAC,cAAAF,uBAAAE,eACAC,eAAAH,uBAAAG,gBACAC,cAAAJ,uBAAAI,eACAC,WAAAL,uBAAAK,YAGA,IAAMC,wBACa,gCADbA,sBAEW,8BAFXA,kBAGO,0BAHPA,wBAIa,gBASbC,wBAA0B,SAAAC,MAAQA,OAAAA,KAAKC,QAAQC,mBAAsBC,KAAKC,OAA5C,EAQ9BC,mBAAqB,SAAAL,MAAI,OAAIA,KAAKC,QAAQH,wBAAjB,EAQzBQ,2BAA6B,SAAAN,MAAI,OAAIA,KAAKO,aAAa,MAAtB,EA8CjCC,iBAAmB,SAACR,KAAMS,SAC5B,IAAMC,UAAYL,mBAAmBL,MAC/BW,gBAAkBL,2BAA2BN,MAEnDY,eAAAA,QAAaC,OAAO,CAChBC,OAAO,EACPC,MAAOzB,IAAI0B,WAAW,oBAAqB,QAASN,UAAUO,QAAQC,UACtEC,KAAMP,eAAaQ,QAAAA,MAAMC,YACzBC,KAAMb,QAAQE,mBAEjBY,MAAK,SAAAC,OAmBF,OAjBAA,MAAMC,UAAUC,GAAGC,cAAAA,QAAYC,MAAM,SAAAC,GAEjCA,EAAEC,iBAGFC,mBAAmB/B,KAAMS,QAASe,MAAOb,gBAAiBD,UAAUO,QACvE,IAGDO,MAAMC,UAAUC,GAAGC,cAAAA,QAAYK,QAAQ,WAEnCR,MAAMS,SACT,IAGDT,MAAMU,OAECV,KAzBX,IA2BCW,MAAMC,cAAAA,QAAaC,UACvB,EAOKC,wBAA0B,SAAAtC,MAC5B,IAAMU,UAAYL,mBAAmBL,MAC/BW,gBAAkBL,2BAA2BN,MAEnDY,eAAAA,QAAaC,OAAO,CAChBM,KAAMP,eAAaQ,QAAAA,MAAMC,cAE5BE,MAAK,SAAAC,OAEFA,MAAMC,UAAUC,GAAGC,cAAAA,QAAYC,MAAM,SAAAC,GAEjCA,EAAEC,iBAGFS,sBACIvC,KACAwB,MACA,CACIgB,KAAM7B,iBAEVD,UAAUO,QAEjB,IAGDO,MAAMC,UAAUC,GAAGC,cAAAA,QAAYK,QAAQ,WAEnCR,MAAMS,SACT,IAGDT,MAAMU,OAEAO,IAAAA,WAAa,CACf,CACIC,IAAK,UACLC,UAAW,SAEf,CACID,IAAK,iBACLC,UAAW,QACXC,MAAO,CACHC,KAAMnC,UAAUO,QAAQC,SACxB4B,OAAQpC,UAAUO,QAAQ8B,WAC1BC,kBAAmBtC,UAAUO,QAAQ+B,qBAKjD,OAAOC,QAAQC,IAAI,CAAC5D,IAAI6D,YAAYV,YAAajB,OACpD,IACAD,MAAK,SAAsB6B,MAAA,IAAAC,MAAAC,eAAAF,KAAA,GAApBG,QAAoBF,MAAA,GAAX7B,MAAW6B,MAAA,GAKxB,OAJA7B,MAAMgC,SAASD,QAAQ,IACvB/B,MAAMiC,kBAAkBF,QAAQ,IAChC/B,MAAMkC,QAAQH,QAAQ,IAEf/B,KApDX,IAsDCW,MAAMC,cAAAA,QAAaC,UACvB,EAOKsB,kBAAoB,SAAA3D,MACtB,IAAMU,UAAYL,mBAAmBL,MAE/B4D,ocAAOC,CAAA,CACTC,cAAe,GACfC,YAAarD,UAAUsD,cAAc,cAAczD,aAAa,UAC7DG,UAAUO,SAIXgD,cAAgBvD,UAAUsD,cAAclE,yBAC1CmE,gBAEAL,QAAQE,cAAgBG,cAAcC,WAG1CtD,eAAAA,QAAaC,OAAO,CAChBC,OAAO,EACPK,KAAMP,eAAaQ,QAAAA,MAAM+C,OACzBpD,MAAOzB,IAAI0B,WAAW,eAAgB,SACtCM,KAAM8C,WAAAA,QAAUC,OAAO,2BAA4BT,WAEtDrC,MAAK,SAAAC,OAgBF,OAfIyC,eACAzC,MAAMC,UAAUC,GAAG,QAAS5B,yBAAyB,SAAA+B,GACjDA,EAAEC,iBACFN,MAAM8C,OAGNL,cAAcM,OACjB,IAGL/C,MAAMU,OAGNV,MAAMC,UAAUC,GAAGC,cAAAA,QAAYK,QAAQ,WAAMR,OAAAA,MAAMS,SAAZ,IAEhCT,KAtBX,IAwBCW,MAAMC,cAAAA,QAAaC,UACvB,EAWKN,mBAAqB,SAACyC,YAAa/D,QAASe,MAAOb,gBAAiB8D,UAChEC,IAAAA,KAAOlD,MAAMC,UAAUkD,KAAK,QAElCtF,WAAWuF,wBAAwBF,KAAKG,aACvCtD,MAAK,SAAAuD,MACF,IAAKA,KAAKC,OACAD,MAAAA,KAAKC,OAOf,OAHAvD,MAAM8C,OACN9C,MAAMS,UAEC6C,IACV,IACAvD,MAAK,WAIKjC,OAHPH,aAAa6F,oBAAoBjF,wBAAwByE,cACxDrC,MAAMC,cAAAA,QAAaC,WAEb/C,IAAI0B,WAAW,0BAA2B,aAAcyD,SAClE,IACAlD,MAAK,SAAA0D,qBACF,EAAAC,OAAAC,KAAWF,mBAGd,IACA9C,OAAM,WAGH,OAFAX,MAAMkC,QAAQjD,QAAQE,gBAAiByE,KAAKC,UAAUX,KAAKG,eAEpDrD,KACV,GACJ,EAUKe,sBAAwB,SAACiC,YAAahD,MAAO8D,KAAMb,UACrDpF,WAAWkG,YAAYD,KAAK9C,MAC3BjB,MAAK,SAAAuD,MACF,OAAKA,KAAKC,QAQVvD,MAAM8C,OACN9C,MAAMS,UAEC6C,OATH1C,cAAAA,QAAaoD,MAAMV,KAAKW,OAAO,GAAG/C,IAAKoC,KAAKW,OAAO,GAAGC,SAE/CZ,KAQd,IACAvD,MAAK,WAIKjC,OAHPH,aAAa6F,oBAAoBjF,wBAAwByE,cACxDrC,MAAMC,cAAAA,QAAaC,WAEb/C,IAAI0B,WAAW,iBAAkB,aAAcyD,SACzD,IACAlD,MAAK,SAAA0D,qBACF,EAAAC,OAAAC,KAAWF,mBAtBf,IA0BC9C,MAAMC,cAAAA,QAAaC,UACvB,EAUK5B,QAAU,SAACkF,UAAWnD,MAAMoD,IAAAA,gEAAW,KAASC,OAAAA,UAAAA,QAASC,aAC3D,QACA,sBACAH,UACA,CACInD,KAAAA,KACAoD,SAAAA,UANQ,gBAiBI,SAA2BG,OAAzBC,IAnSUL,UAAWM,SACjCC,gBAkSYF,gBAAAA,UAAWG,eAAAA,SAnSDR,UAoSLK,UApSgBC,SAoSLE,SAnS5BD,gBAAkB,SAACvF,gBAAiByF,UAAlB,OAA+B3F,QAAQkF,UAAWhF,gBAAiByF,SAAnE,EAExBC,SAASC,iBAAiB,SAAS,SAAAzE,GAE3B,GADcA,EAAE0E,OAAOtG,QAAQC,WAAAA,QAAsBC,KAAKqG,aAAaP,WACvE,CAIEQ,IAAAA,SAAW5E,EAAE0E,OAAOtG,QAAQH,yBAC9B2G,WACA5E,EAAEC,iBAEFtB,iBAAiBiG,SAAUP,kBAGzBQ,IAAAA,YAAc7E,EAAE0E,OAAOtG,QAAQH,mBACjC4G,cACA7E,EAAEC,iBAEFQ,wBAAwBoE,cAGtBC,IAAAA,gBAAkB9E,EAAE0E,OAAOtG,QAAQH,uBACrC6G,kBACA9E,EAAEC,iBAEF6B,kBAAkBgD,iBApBrB,CAsBJ,GAwQJ"}