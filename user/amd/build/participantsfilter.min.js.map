{"version":3,"file":"participantsfilter.min.js","sources":["../src/participantsfilter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Participants filter managemnet.\n *\n * @module     core_user/participants_filter\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CourseFilter from './local/participantsfilter/filtertypes/courseid';\nimport * as DynamicTable from 'core_table/dynamic';\nimport GenericFilter from './local/participantsfilter/filter';\nimport {get_strings as getStrings} from 'core/str';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Selectors from './local/participantsfilter/selectors';\nimport Templates from 'core/templates';\nimport CustomEvents from 'core/custom_interaction_events';\nimport jQuery from 'jquery';\n\n/**\n * Initialise the participants filter on the element with the given id.\n *\n * @param {String} participantsRegionId\n */\nexport const init = participantsRegionId => {\n    // Keep a reference to the filterset.\n    const filterSet = document.querySelector(`#${participantsRegionId}`);\n\n    // Keep a reference to all of the active filters.\n    const activeFilters = {\n        courseid: new CourseFilter('courseid', filterSet),\n    };\n\n    /**\n     * Get the filter list region.\n     *\n     * @return {HTMLElement}\n     */\n    const getFilterRegion = () => filterSet.querySelector(Selectors.filterset.regions.filterlist);\n\n    /**\n     * Add an unselected filter row.\n     *\n     * @return {Promise}\n     */\n    const addFilterRow = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:addFilterRow');\n\n        const rownum = 1 + getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        return Templates.renderForPromise('core_user/local/participantsfilter/filterrow', {\"rownumber\": rownum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.appendNodeContents(getFilterRegion(), html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Get the filter data source node fro the specified filter type.\n     *\n     * @param {String} filterType\n     * @return {HTMLElement}\n     */\n    const getFilterDataSource = filterType => {\n        const filterDataNode = filterSet.querySelector(Selectors.filterset.regions.datasource);\n\n        return filterDataNode.querySelector(Selectors.data.fields.byName(filterType));\n    };\n\n    /**\n     * Add a filter to the list of active filters, performing any necessary setup.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {String} filterType\n     * @param {Array} initialFilterValues The initially selected values for the filter\n     * @returns {Filter}\n     */\n    const addFilter = async(filterRow, filterType, initialFilterValues) => {\n        // Name the filter on the filter row.\n        filterRow.dataset.filterType = filterType;\n\n        const filterDataNode = getFilterDataSource(filterType);\n\n        // Instantiate the Filter class.\n        let Filter = GenericFilter;\n        if (filterDataNode?.dataset.filterTypeClass) {\n            Filter = await import(filterDataNode.dataset.filterTypeClass);\n        }\n        activeFilters[filterType] = new Filter(filterType, filterSet, initialFilterValues);\n\n        // Disable the select.\n        const typeField = filterRow.querySelector(Selectors.filter.fields.type);\n        typeField.value = filterType;\n        typeField.disabled = 'disabled';\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        return activeFilters[filterType];\n    };\n\n    /**\n     * Get the registered filter class for the named filter.\n     *\n     * @param {String} name\n     * @return {Object} See the Filter class.\n     */\n    const getFilterObject = name => {\n        return activeFilters[name];\n    };\n\n    /**\n     * Remove or replace the specified filter row and associated class, ensuring that if there is only one filter row,\n     * that it is replaced instead of being removed.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeOrReplaceFilterRow = (filterRow, refreshContent) => {\n        const filterCount = getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n\n        if (filterCount === 1) {\n            replaceFilterRow(filterRow, refreshContent);\n        } else {\n            removeFilterRow(filterRow, refreshContent);\n        }\n    };\n\n    /**\n     * Remove the specified filter row and associated class.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeFilterRow = async(filterRow, refreshContent = true) => {\n        const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n        const hasFilterValue = !!filterType.value;\n\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        // Remove the actual filter HTML.\n        filterRow.remove();\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        if (hasFilterValue && refreshContent) {\n            // Refresh the table if there was any content in this row.\n            updateTableFromFilter();\n        }\n\n        // Update filter fieldset legends.\n        const filterLegends = await getAvailableFilterLegends();\n\n        getFilterRegion().querySelectorAll(Selectors.filter.region).forEach((filterRow, index) => {\n            filterRow.querySelector('legend').innerText = filterLegends[index];\n        });\n\n    };\n\n    /**\n     * Replace the specified filter row with a new one.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     * @param {Number} rowNum The number used to label the filter fieldset legend (eg Row 1). Defaults to 1 (the first filter).\n     * @return {Promise}\n     */\n    const replaceFilterRow = (filterRow, refreshContent = true, rowNum = 1) => {\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        return Templates.renderForPromise('core_user/local/participantsfilter/filterrow', {\"rownumber\": rowNum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.replaceNode(filterRow, html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            // Refresh the table.\n            if (refreshContent) {\n                return updateTableFromFilter();\n            } else {\n                return filterRow;\n            }\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Remove the Filter Object from the register.\n     *\n     * @param {string} filterName The name of the filter to be removed\n     */\n    const removeFilterObject = filterName => {\n        if (filterName) {\n            const filter = getFilterObject(filterName);\n            if (filter) {\n                filter.tearDown();\n\n                // Remove from the list of active filters.\n                delete activeFilters[filterName];\n            }\n        }\n    };\n\n    /**\n     * Remove all filters.\n     *\n     * @returns {Promise}\n     */\n    const removeAllFilters = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:setFilterFromConfig');\n\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => removeOrReplaceFilterRow(filterRow, false));\n\n        // Refresh the table.\n        return updateTableFromFilter()\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        });\n    };\n\n    /**\n     * Remove any empty filters.\n     */\n    const removeEmptyFilters = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n            if (!filterType.value) {\n                removeOrReplaceFilterRow(filterRow, false);\n            }\n        });\n    };\n\n    /**\n     * Update the list of filter types to filter out those already selected.\n     */\n    const updateFiltersOptions = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const options = filterRow.querySelectorAll(Selectors.filter.fields.type + ' option');\n            options.forEach(option => {\n                if (option.value === filterRow.dataset.filterType) {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                } else if (activeFilters[option.value]) {\n                    option.classList.add('hidden');\n                    option.disabled = true;\n                } else {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                }\n            });\n        });\n\n        // Configure the state of the \"Add row\" button.\n        // This button is disabled when there is a filter row available for each condition.\n        const addRowButton = filterSet.querySelector(Selectors.filterset.actions.addRow);\n        const filterDataNode = filterSet.querySelectorAll(Selectors.data.fields.all);\n        if (filterDataNode.length <= filters.length) {\n            addRowButton.setAttribute('disabled', 'disabled');\n        } else {\n            addRowButton.removeAttribute('disabled');\n        }\n\n        if (filters.length === 1) {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.add('hidden');\n            filterSet.querySelector(Selectors.filterset.fields.join).value = 2;\n            filterSet.dataset.filterverb = 2;\n        } else {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.remove('hidden');\n        }\n    };\n\n    /**\n     * Set the current filter options based on a provided configuration.\n     *\n     * @param {Object} config\n     * @param {Number} config.jointype\n     * @param {Object} config.filters\n     * @returns {Promise}\n     */\n    const setFilterFromConfig = config => {\n        const filterConfig = Object.entries(config.filters);\n\n        if (!filterConfig.length) {\n            // There are no filters to set from.\n            return Promise.resolve();\n        }\n\n        // Set the main join type.\n        filterSet.querySelector(Selectors.filterset.fields.join).value = config.jointype;\n\n        const filterPromises = filterConfig.map(([filterType, filterData]) => {\n            if (filterType === 'courseid') {\n                // The courseid is a special case.\n                return false;\n            }\n\n            const filterValues = filterData.values;\n\n            if (!filterValues.length) {\n                // There are no values for this filter.\n                // Skip it.\n                return false;\n            }\n\n            return addFilterRow().then(([filterRow]) => addFilter(filterRow, filterType, filterValues));\n        }).filter(promise => promise);\n\n        if (!filterPromises.length) {\n            return Promise.resolve();\n        }\n\n        return Promise.all(filterPromises).then(() => {\n            return removeEmptyFilters();\n        })\n        .then(updateFiltersOptions)\n        .then(updateTableFromFilter);\n    };\n\n    /**\n     * Update the Dynamic table based upon the current filter.\n     *\n     * @return {Promise}\n     */\n    const updateTableFromFilter = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:updateTableFromFilter');\n\n        const filters = {};\n        Object.values(activeFilters).forEach(filter => {\n            filters[filter.filterValue.name] = filter.filterValue;\n        });\n\n        return DynamicTable.setFilters(\n            DynamicTable.getTableFromId(filterSet.dataset.tableRegion),\n            {\n                jointype: parseInt(filterSet.querySelector(Selectors.filterset.fields.join).value, 10),\n                filters,\n            }\n        )\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Fetch the strings used to populate the fieldset legends for the maximum number of filters possible.\n     *\n     * @return {array}\n     */\n    const getAvailableFilterLegends = async() => {\n        const maxFilters = document.querySelector(Selectors.data.typeListSelect).length - 1;\n        let requests = [];\n\n        [...Array(maxFilters)].forEach((_, rowIndex) => {\n            requests.push({\n                \"key\": \"filterrowlegend\",\n                \"component\": \"core_user\",\n                // Add 1 since rows begin at 1 (index begins at zero).\n                \"param\": rowIndex + 1\n            });\n        });\n\n        const legendStrings = await getStrings(requests)\n        .then(fetchedStrings => {\n            return fetchedStrings;\n        })\n        .catch(Notification.exception);\n\n        return legendStrings;\n    };\n\n    // Add listeners for the main actions.\n    filterSet.querySelector(Selectors.filterset.region).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filterset.actions.addRow)) {\n            e.preventDefault();\n\n            addFilterRow();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.applyFilters)) {\n            e.preventDefault();\n\n            updateTableFromFilter();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.resetFilters)) {\n            e.preventDefault();\n\n            removeAllFilters();\n        }\n    });\n\n    // Add the listener to remove a single filter.\n    filterSet.querySelector(Selectors.filterset.regions.filterlist).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filter.actions.remove)) {\n            e.preventDefault();\n\n            removeOrReplaceFilterRow(e.target.closest(Selectors.filter.region), true);\n        }\n    });\n\n    // Add listeners for the filter type selection.\n    let filterRegion = jQuery(getFilterRegion());\n    CustomEvents.define(filterRegion, [CustomEvents.events.accessibleChange]);\n    filterRegion.on(CustomEvents.events.accessibleChange, e => {\n        const typeField = e.target.closest(Selectors.filter.fields.type);\n        if (typeField && typeField.value) {\n            const filter = e.target.closest(Selectors.filter.region);\n\n            addFilter(filter, typeField.value);\n        }\n    });\n\n    filterSet.querySelector(Selectors.filterset.fields.join).addEventListener('change', e => {\n        filterSet.dataset.filterverb = e.target.value;\n    });\n\n    const tableRoot = DynamicTable.getTableFromId(filterSet.dataset.tableRegion);\n    const initialFilters = DynamicTable.getFilters(tableRoot);\n    if (initialFilters) {\n        const initialFilterPromise = new Pending('core_user/participantsfilter:setFilterFromConfig');\n        // Apply the initial filter configuration.\n        setFilterFromConfig(initialFilters)\n        .then(() => initialFilterPromise.resolve())\n        .catch();\n    }\n};\n"],"names":["_courseid","_interopRequireDefault","DynamicTable","_interopRequireWildcard","_filter","_notification","_pending","_selectors","_templates","_custom_interaction_events","_jquery","participantsRegionId","_ref2","_ref3","_ref9","filterSet","document","querySelector","concat","activeFilters","courseid","CourseFilter","getFilterRegion","Selectors","filterset","regions","filterlist","addFilterRow","pendingPromise","Pending","default","rownum","querySelectorAll","filter","region","length","Templates","renderForPromise","then","_ref","html","js","appendNodeContents","filterRow","typeList","data","forEach","contentNode","contentTypeList","fields","type","innerHTML","updateFiltersOptions","result","resolve","catch","Notification","exception","getFilterDataSource","filterType","datasource","byName","addFilter","_asyncToGenerator","regeneratorRuntime","mark","initialFilterValues","filterDataNode","Filter","typeField","wrap","_context","prev","next","dataset","GenericFilter","filterTypeClass","_systemImportTransformerGlobalIdentifier","define","amd","Promise","reject","require","sent","value","disabled","stop","_callee","_x","_x2","_x3","apply","this","arguments","removeOrReplaceFilterRow","refreshContent","replaceFilterRow","removeFilterRow","hasFilterValue","filterLegends","_args2","_context2","removeFilterObject","remove","updateTableFromFilter","getAvailableFilterLegends","index","innerText","_callee2","_x4","rowNum","_ref4","replaceNode","filterName","tearDown","filters","option","classList","add","addRowButton","actions","addRow","all","setAttribute","removeAttribute","filtermatch","join","filterverb","Object","values","filterValue","name","setFilters","getTableFromId","tableRegion","jointype","parseInt","_callee3","maxFilters","requests","legendStrings","_context3","typeListSelect","Array","_","rowIndex","push","key","component","param","fetchedStrings","abrupt","addEventListener","e","target","closest","preventDefault","applyFilters","resetFilters","filterRegion","CustomEvents","events","accessibleChange","on","tableRoot","initialFilters","getFilters","initialFilterPromise","config","filterConfig","entries","filterPromises","map","_ref5","_ref6","_slicedToArray","filterData","filterValues","_ref7","promise","setFilterFromConfig"],"mappings":"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"}