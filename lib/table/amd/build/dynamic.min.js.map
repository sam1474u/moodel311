{"version":3,"file":"dynamic.min.js","sources":["../src/dynamic.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to handle dynamic table features.\n *\n * @module     core_table/dynamic\n * @copyright  2020 Simey Lameze <simey@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from 'core_table/local/dynamic/selectors';\nimport Events from './local/dynamic/events';\nimport Pending from 'core/pending';\nimport {addIconToContainer} from 'core/loadingicon';\nimport {fetch as fetchTableData} from 'core_table/local/dynamic/repository';\nimport Notification from 'core/notification';\n\nlet watching = false;\n\n/**\n * Ensure that a table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Bool}\n */\nconst checkTableIsDynamic = tableRoot => {\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    if (!tableRoot.matches(Selectors.main.region)) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return true;\n};\n\n/**\n * Get the filterset data from a known dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nconst getFiltersetFromTable = tableRoot => {\n    return JSON.parse(tableRoot.dataset.tableFilters);\n};\n\n/**\n * Update the specified table based on its current values.\n *\n * @param {HTMLElement} tableRoot\n * @param {Bool} resetContent\n * @returns {Promise}\n */\nexport const refreshTableContent = (tableRoot, resetContent = false) => {\n    const filterset = getFiltersetFromTable(tableRoot);\n    addIconToContainer(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:refreshTableContent');\n\n    return fetchTableData(\n        tableRoot.dataset.tableComponent,\n        tableRoot.dataset.tableHandler,\n        tableRoot.dataset.tableUniqueid,\n        {\n            sortData: JSON.parse(tableRoot.dataset.tableSortData),\n            joinType: filterset.jointype,\n            filters: filterset.filters,\n            firstinitial: tableRoot.dataset.tableFirstInitial,\n            lastinitial: tableRoot.dataset.tableLastInitial,\n            pageNumber: tableRoot.dataset.tablePageNumber,\n            pageSize: tableRoot.dataset.tablePageSize,\n            hiddenColumns: JSON.parse(tableRoot.dataset.tableHiddenColumns),\n        },\n        resetContent,\n    )\n    .then(data => {\n        const placeholder = document.createElement('div');\n        placeholder.innerHTML = data.html;\n        tableRoot.replaceWith(...placeholder.childNodes);\n\n        // Update the tableRoot.\n        return getTableFromId(tableRoot.dataset.tableUniqueid);\n    }).then(tableRoot => {\n        tableRoot.dispatchEvent(new CustomEvent(Events.tableContentRefreshed, {\n            bubbles: true,\n        }));\n\n        return tableRoot;\n    })\n    .then(tableRoot => {\n        pendingPromise.resolve();\n\n        return tableRoot;\n    });\n};\n\nexport const updateTable = (tableRoot, {\n    sortBy = null,\n    sortOrder = null,\n    filters = null,\n    firstInitial = null,\n    lastInitial = null,\n    pageNumber = null,\n    pageSize = null,\n    hiddenColumns = null,\n} = {}, refreshContent = true) => {\n    checkTableIsDynamic(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:updateTable');\n    let tableConfigChanged = false;\n\n    // Update sort fields.\n    if (sortBy && sortOrder) {\n        // Always update the table if requested and there were sort fields.\n        // These fields are only ever normalised in the backend.\n        tableConfigChanged = true;\n\n        const sortData = JSON.parse(tableRoot.dataset.tableSortData);\n        sortData.unshift({\n            sortby: sortBy,\n            sortorder: parseInt(sortOrder, 10),\n        });\n        tableRoot.dataset.tableSortData = JSON.stringify(sortData);\n    }\n\n    // Update initials.\n    if (firstInitial !== null) {\n        if (tableRoot.dataset.tableFirstInitial !== firstInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFirstInitial = firstInitial;\n    }\n\n    if (lastInitial !== null) {\n        if (tableRoot.dataset.tableLastInitial !== lastInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableLastInitial = lastInitial;\n    }\n\n    if (pageSize !== null) {\n        if (tableRoot.dataset.tablePageSize != pageSize) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageSize = pageSize;\n    }\n\n    // Update filters.\n    if (filters) {\n        const filterJson = JSON.stringify(filters);\n\n        if (tableRoot.dataset.tableFilters !== filterJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFilters = filterJson;\n    }\n\n    // Reset to page 1 when table content is being altered by filtering or sorting.\n    // This ensures the table page being loaded always exists, and gives a consistent experience.\n    if (tableConfigChanged) {\n        pageNumber = 1;\n    }\n\n    // Update hidden columns.\n    if (hiddenColumns) {\n        const columnJson = JSON.stringify(hiddenColumns);\n\n        if (tableRoot.dataset.tableHiddenColumns !== columnJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableHiddenColumns = columnJson;\n    }\n\n    if (pageNumber !== null) {\n        if (tableRoot.dataset.tablePageNumber != pageNumber) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageNumber = pageNumber;\n    }\n\n    // Refresh.\n    if (refreshContent && tableConfigChanged) {\n        return refreshTableContent(tableRoot)\n        .then(tableRoot => {\n            pendingPromise.resolve();\n            return tableRoot;\n        });\n    } else {\n        pendingPromise.resolve();\n        return Promise.resolve(tableRoot);\n    }\n};\n\n/**\n * Get the table dataset for the specified tableRoot, ensuring that the provided table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {DOMStringMap}\n */\nconst getTableData = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return tableRoot.dataset;\n};\n\n/**\n * Update the specified table using the new filters.\n *\n * @param {HTMLElement} tableRoot\n * @param {Object} filters\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFilters = (tableRoot, filters, refreshContent = true) =>\n    updateTable(tableRoot, {filters}, refreshContent);\n\n/**\n * Get the filter data for the specified table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nexport const getFilters = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return getFiltersetFromTable(tableRoot);\n};\n\n/**\n * Update the sort order.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} sortBy\n * @param {Number} sortOrder\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setSortOrder = (tableRoot, sortBy, sortOrder, refreshContent = true) =>\n    updateTable(tableRoot, {sortBy, sortOrder}, refreshContent);\n\n/**\n * Set the page number.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} pageNumber\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageNumber = (tableRoot, pageNumber, refreshContent = true) =>\n    updateTable(tableRoot, {pageNumber}, refreshContent);\n\n/**\n * Get the current page number.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageNumber = tableRoot => getTableData(tableRoot).tablePageNumber;\n\n/**\n * Set the page size.\n *\n * @param {HTMLElement} tableRoot\n * @param {Number} pageSize\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageSize = (tableRoot, pageSize, refreshContent = true) =>\n    updateTable(tableRoot, {pageSize, pageNumber: 1}, refreshContent);\n\n/**\n * Get the current page size.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageSize = tableRoot => getTableData(tableRoot).tablePageSize;\n\n/**\n * Update the first initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} firstInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFirstInitial = (tableRoot, firstInitial, refreshContent = true) =>\n    updateTable(tableRoot, {firstInitial}, refreshContent);\n\n/**\n * Get the current first initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getFirstInitial = tableRoot => getTableData(tableRoot).tableFirstInitial;\n\n/**\n * Update the last initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} lastInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setLastInitial = (tableRoot, lastInitial, refreshContent = true) =>\n    updateTable(tableRoot, {lastInitial}, refreshContent);\n\n/**\n * Get the current last initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getLastInitial = tableRoot => getTableData(tableRoot).tableLastInitial;\n\n/**\n * Hide a column in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToHide\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const hideColumn = (tableRoot, columnToHide, refreshContent = true) => {\n    const hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns.push(columnToHide);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Make a hidden column visible in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToShow\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const showColumn = (tableRoot, columnToShow, refreshContent = true) => {\n    let hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns = hiddenColumns.filter(columnName => columnName !== columnToShow);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Reset table preferences.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Promise}\n */\nconst resetTablePreferences = tableRoot => refreshTableContent(tableRoot, true);\n\n/**\n * Set up listeners to handle table updates.\n */\nexport const init = () => {\n    if (watching) {\n        // Already watching.\n        return;\n    }\n    watching = true;\n\n    document.addEventListener('click', e => {\n        const tableRoot = e.target.closest(Selectors.main.region);\n\n        if (!tableRoot) {\n            return;\n        }\n\n        const sortableLink = e.target.closest(Selectors.table.links.sortableColumn);\n        if (sortableLink) {\n            e.preventDefault();\n\n            setSortOrder(tableRoot, sortableLink.dataset.sortby, sortableLink.dataset.sortorder)\n            .catch(Notification.exception);\n        }\n\n        const firstInitialLink = e.target.closest(Selectors.initialsBar.links.firstInitial);\n        if (firstInitialLink !== null) {\n            e.preventDefault();\n\n            setFirstInitial(tableRoot, firstInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const lastInitialLink = e.target.closest(Selectors.initialsBar.links.lastInitial);\n        if (lastInitialLink !== null) {\n            e.preventDefault();\n\n            setLastInitial(tableRoot, lastInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const pageItem = e.target.closest(Selectors.paginationBar.links.pageItem);\n        if (pageItem) {\n            e.preventDefault();\n\n            setPageNumber(tableRoot, pageItem.dataset.pageNumber).catch(Notification.exception);\n        }\n\n        const hide = e.target.closest(Selectors.table.links.hide);\n        if (hide) {\n            e.preventDefault();\n\n            hideColumn(tableRoot, hide.dataset.column).catch(Notification.exception);\n        }\n\n        const show = e.target.closest(Selectors.table.links.show);\n        if (show) {\n            e.preventDefault();\n\n            showColumn(tableRoot, show.dataset.column).catch(Notification.exception);\n        }\n\n        const resetTablePreferencesLink = e.target.closest('.resettable a');\n        if (resetTablePreferencesLink) {\n            e.preventDefault();\n\n            resetTablePreferences(tableRoot).catch(Notification.exception);\n        }\n\n        const showCountLink = e.target.closest(Selectors.showCount.links.toggle);\n        if (showCountLink) {\n            e.preventDefault();\n\n            setPageSize(tableRoot, showCountLink.dataset.targetPageSize).catch(Notification.exception);\n        }\n    });\n};\n\n/**\n * Fetch the table via its table region id.\n *\n * @param {String} tableRegionId\n * @returns {HTMLElement}\n */\nexport const getTableFromId = tableRegionId => {\n    const tableRoot = document.querySelector(Selectors.main.fromRegionId(tableRegionId));\n\n\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return tableRoot;\n};\n\nexport {\n    Events\n};\n"],"names":["Selectors","_interopRequireWildcard","_events","_interopRequireDefault","_pending","_notification","watching","checkTableIsDynamic","tableRoot","Error","matches","main","region","getFiltersetFromTable","JSON","parse","dataset","tableFilters","refreshTableContent","resetContent","filterset","_loadingicon","addIconToContainer","pendingPromise","Pending","default","tableComponent","tableHandler","tableUniqueid","sortData","tableSortData","joinType","jointype","filters","firstinitial","tableFirstInitial","lastinitial","tableLastInitial","pageNumber","tablePageNumber","pageSize","tablePageSize","hiddenColumns","tableHiddenColumns","then","data","placeholder","document","createElement","innerHTML","html","replaceWith","apply","childNodes","getTableFromId","dispatchEvent","CustomEvent","Events","tableContentRefreshed","bubbles","resolve","updateTable","_ref","arguments","length","undefined","_ref$sortBy","sortBy","_ref$sortOrder","sortOrder","_ref$filters","_ref$firstInitial","firstInitial","_ref$lastInitial","lastInitial","_ref$pageNumber","_ref$pageSize","_ref$hiddenColumns","refreshContent","tableConfigChanged","unshift","sortby","sortorder","parseInt","stringify","filterJson","columnJson","Promise","getTableData","setSortOrder","setPageNumber","setPageSize","setFirstInitial","setLastInitial","hideColumn","columnToHide","push","showColumn","columnToShow","filter","columnName","addEventListener","e","target","closest","sortableLink","table","links","sortableColumn","preventDefault","catch","Notification","exception","firstInitialLink","initialsBar","initial","lastInitialLink","pageItem","paginationBar","hide","column","show","resetTablePreferences","showCountLink","showCount","toggle","targetPageSize","tableRegionId","querySelector","fromRegionId"],"mappings":"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"}