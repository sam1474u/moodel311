{"version":3,"file":"dynamicform.min.js","sources":["../src/dynamicform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display an embedded form, it is only loaded and reloaded inside its container\n *\n *\n * @module     core_form/dynamicform\n * @copyright  2019 Marina Glancy\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * See also https://docs.moodle.org/dev/Modal_and_AJAX_forms\n *\n * @example\n *    import DynamicForm from 'core_form/dynamicform';\n *\n *    const dynamicForm = new DynamicForm(document.querySelector('#mycontainer', 'pluginname\\\\form\\\\formname');\n *    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, e => {\n *        e.preventDefault();\n *        window.console.log(e.detail);\n *        dynamicForm.container.innerHTML = 'Thank you, your form is submitted!';\n *    });\n *    dynamicForm.load();\n *\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport Event from 'core/event';\nimport {get_strings as getStrings} from 'core/str';\nimport Y from 'core/yui';\nimport Fragment from 'core/fragment';\nimport Pending from 'core/pending';\nimport {serialize} from './util';\n\n/**\n * @class core_form/dynamicform\n */\nexport default class DynamicForm {\n\n    /**\n     * Various events that can be observed.\n     *\n     * @type {Object}\n     */\n    events = {\n        // Form was successfully submitted - the response is passed to the event listener.\n        // Cancellable (in order to prevent default behavior to clear the container).\n        FORM_SUBMITTED: 'core_form_dynamicform_formsubmitted',\n        // Cancel button was pressed.\n        // Cancellable (in order to prevent default behavior to clear the container).\n        FORM_CANCELLED: 'core_form_dynamicform_formcancelled',\n        // User attempted to submit the form but there was client-side validation error.\n        CLIENT_VALIDATION_ERROR: 'core_form_dynamicform_clientvalidationerror',\n        // User attempted to submit the form but server returned validation error.\n        SERVER_VALIDATION_ERROR: 'core_form_dynamicform_validationerror',\n        // Error occurred while performing request to the server.\n        // Cancellable (by default calls Notification.exception).\n        ERROR: 'core_form_dynamicform_error',\n        // Right after user pressed no-submit button,\n        // listen to this event if you want to add JS validation or processing for no-submit button.\n        // Cancellable.\n        NOSUBMIT_BUTTON_PRESSED: 'core_form_dynamicform_nosubmitbutton',\n        // Right after user pressed submit button,\n        // listen to this event if you want to add additional JS validation or confirmation dialog.\n        // Cancellable.\n        SUBMIT_BUTTON_PRESSED: 'core_form_dynamicform_submitbutton',\n        // Right after user pressed cancel button,\n        // listen to this event if you want to add confirmation dialog.\n        // Cancellable.\n        CANCEL_BUTTON_PRESSED: 'core_form_dynamicform_cancelbutton',\n    };\n\n    /**\n     * Constructor\n     *\n     * Creates an instance\n     *\n     * @param {Element} container - the parent element for the form\n     * @param {string} formClass full name of the php class that extends \\core_form\\modal , must be in autoloaded location\n     */\n    constructor(container, formClass) {\n        this.formClass = formClass;\n        this.container = container;\n\n        // Ensure strings required for shortforms are always available.\n        getStrings([\n            {key: 'collapseall', component: 'moodle'},\n            {key: 'expandall', component: 'moodle'}\n        ]).catch(Notification.exception);\n\n        // Register delegated events handlers in vanilla JS.\n        this.container.addEventListener('click', e => {\n            if (e.target.matches('form input[type=submit][data-cancel]')) {\n                e.preventDefault();\n                const event = this.trigger(this.events.CANCEL_BUTTON_PRESSED, e.target);\n                if (!event.defaultPrevented) {\n                    this.processCancelButton();\n                }\n            } else if (e.target.matches('form input[type=submit][data-no-submit=\"1\"]')) {\n                e.preventDefault();\n                const event = this.trigger(this.events.NOSUBMIT_BUTTON_PRESSED, e.target);\n                if (!event.defaultPrevented) {\n                    this.processNoSubmitButton(e.target);\n                }\n            }\n        });\n\n        this.container.addEventListener('submit', e => {\n            if (e.target.matches('form')) {\n                e.preventDefault();\n                const event = this.trigger(this.events.SUBMIT_BUTTON_PRESSED);\n                if (!event.defaultPrevented) {\n                    this.submitFormAjax();\n                }\n            }\n        });\n    }\n\n    /**\n     * Loads the form via AJAX and shows it inside a given container\n     *\n     * @param {Object} args\n     * @return {Promise}\n     * @public\n     */\n    load(args = null) {\n        const formData = serialize(args || {});\n        const pendingPromise = new Pending('core_form/dynamicform:load');\n        return this.getBody(formData)\n        .then((resp) => this.updateForm(resp))\n        .then(pendingPromise.resolve);\n    }\n\n    /**\n     * Triggers a custom event\n     *\n     * @private\n     * @param {String} eventName\n     * @param {*} detail\n     * @param {Boolean} cancelable\n     * @return {CustomEvent<unknown>}\n     */\n    trigger(eventName, detail = null, cancelable = true) {\n        const e = new CustomEvent(eventName, {detail, cancelable});\n        this.container.dispatchEvent(e);\n        return e;\n    }\n\n    /**\n     * Add listener for an event\n     *\n     * @param {array} args\n     * @example:\n     *    const dynamicForm = new DynamicForm(...);\n     *    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, e => {\n     *        e.preventDefault();\n     *        window.console.log(e.detail);\n     *        dynamicForm.container.innerHTML = 'Thank you, your form is submitted!';\n     *    });\n     */\n    addEventListener(...args) {\n        this.container.addEventListener(...args);\n    }\n\n    /**\n     * Get form body\n     *\n     * @param {String} formDataString form data in format of a query string\n     * @private\n     * @return {Promise}\n     */\n    getBody(formDataString) {\n        return Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formDataString,\n                form: this.formClass,\n            }\n        }])[0]\n        .then(response => {\n            return {html: response.html, js: Fragment.processCollectedJavascript(response.javascript)};\n        });\n    }\n\n    /**\n     * On form submit\n     *\n     * @param {*} response Response received from the form's \"process\" method\n     */\n    onSubmitSuccess(response) {\n        const event = this.trigger(this.events.FORM_SUBMITTED, response);\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        // Default implementation is to remove the form. Event listener should either remove or reload the form\n        // since its contents is no longer correct. For example, if an element was created as a result of\n        // form submission, the \"id\" in the form would be still zero. Also the server-side validation\n        // errors from the previous submission may still be present.\n        this.container.innerHTML = '';\n    }\n\n    /**\n     * On exception during form processing\n     *\n     * @private\n     * @param {Object} exception\n     */\n    onSubmitError(exception) {\n        const event = this.trigger(this.events.ERROR, exception);\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        Notification.exception(exception);\n    }\n\n    /**\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\n     *\n     * @method submitButtonPressed\n     * @param {Element} button that was pressed\n     */\n    processNoSubmitButton(button) {\n        const pendingPromise = new Pending('core_form/dynamicform:nosubmit');\n        const form = this.container.querySelector('form');\n        const formData = new URLSearchParams([...(new FormData(form)).entries()]);\n        formData.append(button.getAttribute('name'), button.getAttribute('value'));\n\n        this.notifyFormSubmitAjax(true)\n        .then(() => {\n            // Add the button name to the form data and submit it.\n            this.disableButtons();\n            return this.getBody(formData.toString());\n        })\n        .then((resp) => this.updateForm(resp))\n        .finally(pendingPromise.resolve)\n        .catch(exception => this.onSubmitError(exception));\n    }\n\n    /**\n     * Wrapper for Event.notifyFormSubmitAjax that waits for the module to load\n     *\n     * We often destroy the form right after calling this function and we need to make sure that it actually\n     * completes before it, or otherwise it will try to work with a form that does not exist.\n     *\n     * @param {Boolean} skipValidation\n     * @return {Promise}\n     */\n    notifyFormSubmitAjax(skipValidation = false) {\n        const form = this.container.querySelector('form');\n        return new Promise(resolve => {\n            Y.use('event', 'moodle-core-event', 'moodle-core-formchangechecker', function() {\n                Event.notifyFormSubmitAjax(form, skipValidation);\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Notifies listeners that form dirty state should be reset.\n     *\n     * @return {Promise<unknown>}\n     */\n    notifyResetFormChanges() {\n        const form = this.container.querySelector('form');\n        return new Promise(resolve => {\n            Y.use('event', 'moodle-core-event', 'moodle-core-formchangechecker', () => {\n                Event.notifyFormSubmitAjax(form, true);\n                M.core_formchangechecker.reset_form_dirty_state();\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Click on a \"cancel\" button\n     */\n    processCancelButton() {\n        // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n        this.notifyResetFormChanges()\n        .then(() => {\n            const event = this.trigger(this.events.FORM_CANCELLED);\n            if (!event.defaultPrevented) {\n                // By default removes the form from the DOM.\n                this.container.innerHTML = '';\n            }\n            return null;\n        })\n        .catch(null);\n    }\n\n    /**\n     * Update form contents\n     *\n     * @param {object} param\n     * @param {string} param.html\n     * @param {string} param.js\n     */\n    updateForm({html, js}) {\n        Templates.replaceNodeContents(this.container, html, js);\n    }\n\n    /**\n     * Validate form elements\n     * @return {Promise} promise that returns true if client-side validation has passed, false if there are errors\n     */\n    validateElements() {\n        // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n        return this.notifyFormSubmitAjax()\n        .then(() => {\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            const invalid = [...this.container.querySelectorAll('[aria-invalid=\"true\"], .error')];\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid[0].focus();\n                return false;\n            }\n\n            return true;\n        });\n    }\n\n    /**\n     * Disable buttons during form submission\n     */\n    disableButtons() {\n        this.container.querySelectorAll('form input[type=\"submit\"]')\n            .forEach(el => el.setAttribute('disabled', true));\n    }\n\n    /**\n     * Enable buttons after form submission (on validation error)\n     */\n    enableButtons() {\n        this.container.querySelectorAll('form input[type=\"submit\"]')\n            .forEach(el => el.removeAttribute('disabled'));\n    }\n\n    /**\n     * Submit the form via AJAX call to the core_form_dynamic_form WS\n     */\n    async submitFormAjax() {\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!(await this.validateElements())) {\n            this.trigger(this.events.CLIENT_VALIDATION_ERROR, null, false);\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        const form = this.container.querySelector('form');\n        const formData = new URLSearchParams([...(new FormData(form)).entries()]);\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData.toString(),\n                form: this.formClass\n            }\n        }])[0]\n        .then((response) => {\n            if (!response.submitted) {\n                // Form was not submitted, it could be either because validation failed or because no-submit button was pressed.\n                this.updateForm({html: response.html, js: Fragment.processCollectedJavascript(response.javascript)});\n                this.enableButtons();\n                this.trigger(this.events.SERVER_VALIDATION_ERROR, null, false);\n            } else {\n                // Form was submitted properly.\n                const data = JSON.parse(response.data);\n                this.enableButtons();\n                this.notifyResetFormChanges()\n                .then(() => this.onSubmitSuccess(data))\n                .catch();\n            }\n            return null;\n        })\n        .catch(exception => this.onSubmitError(exception));\n    }\n}\n"],"names":["_ajax","_interopRequireDefault","_notification","_templates","_event2","_yui","_fragment","_pending","DynamicForm","container","formClass","_this","this","_classCallCheck","FORM_SUBMITTED","FORM_CANCELLED","CLIENT_VALIDATION_ERROR","SERVER_VALIDATION_ERROR","ERROR","NOSUBMIT_BUTTON_PRESSED","SUBMIT_BUTTON_PRESSED","CANCEL_BUTTON_PRESSED","_str","get_strings","key","component","catch","Notification","exception","addEventListener","e","target","matches","preventDefault","trigger","events","defaultPrevented","processCancelButton","processNoSubmitButton","submitFormAjax","_submitFormAjax","_this2","args","formData","_util","serialize","pendingPromise","Pending","default","getBody","then","resp","updateForm","resolve","value","eventName","detail","CustomEvent","cancelable","dispatchEvent","_this$container","apply","arguments","formDataString","Ajax","call","methodname","formdata","form","response","html","js","Fragment","processCollectedJavascript","javascript","innerHTML","button","_this3","querySelector","URLSearchParams","_toConsumableArray","FormData","entries","append","getAttribute","notifyFormSubmitAjax","disableButtons","toString","finally","onSubmitError","skipValidation","Promise","use","Event","M","core_formchangechecker","reset_form_dirty_state","_this4","notifyResetFormChanges","_ref","Templates","replaceNodeContents","_this5","invalid","querySelectorAll","length","focus","forEach","el","setAttribute","removeAttribute","regeneratorRuntime","mark","_callee","_this6","wrap","_context","prev","next","validateElements","sent","abrupt","submitted","data","JSON","parse","enableButtons","onSubmitSuccess","stop"],"mappings":"0yDAqCAA,MAAAC,uBAAAD,OACAE,cAAAD,uBAAAC,eACAC,WAAAF,uBAAAE,YACAC,QAAAH,uBAAAG,SAEAC,KAAAJ,uBAAAI,MACAC,UAAAL,uBAAAK,WACAC,SAAAN,uBAAAM,cAMqBC,uBA2CLC,SAAAA,YAAAA,UAAWC,WAAW,kBAAAC,MAAAC,oIAAAC,CAAAD,KAAAJ,mBApCzB,CAGLM,eAAgB,sCAGhBC,eAAgB,sCAEhBC,wBAAyB,8CAEzBC,wBAAyB,wCAGzBC,MAAO,8BAIPC,wBAAyB,uCAIzBC,sBAAuB,qCAIvBC,sBAAuB,2CAzBlB,gBAAAT,4GAqCAF,KAAAA,UAAYA,UACZD,KAAAA,UAAYA,WAGjB,EAAAa,KAAAC,aAAW,CACP,CAACC,IAAK,cAAeC,UAAW,UAChC,CAACD,IAAK,YAAaC,UAAW,YAC/BC,MAAMC,sBAAaC,WAGjBnB,KAAAA,UAAUoB,iBAAiB,SAAS,SAAAC,GACjCA,GAAAA,EAAEC,OAAOC,QAAQ,wCACjBF,EAAEG,iBACYtB,MAAKuB,QAAQvB,MAAKwB,OAAOd,sBAAuBS,EAAEC,QACrDK,kBACPzB,MAAK0B,2BAEN,GAAIP,EAAEC,OAAOC,QAAQ,+CAAgD,CACxEF,EAAEG,iBACYtB,MAAKuB,QAAQvB,MAAKwB,OAAOhB,wBAAyBW,EAAEC,QACvDK,kBACPzB,MAAK2B,sBAAsBR,EAAEC,OAEpC,CACJ,IAEItB,KAAAA,UAAUoB,iBAAiB,UAAU,SAAAC,GAClCA,EAAEC,OAAOC,QAAQ,UACjBF,EAAEG,iBACYtB,MAAKuB,QAAQvB,MAAKwB,OAAOf,uBAC5BgB,kBACPzB,MAAK4B,iBAGhB,GACJ,2CAmODC,6EA1NA,WAAkB,IAAAC,OAAA7B,KAAb8B,4DAAO,KACFC,UAAW,EAAAC,MAAAC,WAAUH,MAAQ,CAAA,GAC7BI,eAAiB,IAAIC,SAAJC,QAAY,8BAC5B,OAAApC,KAAKqC,QAAQN,UACnBO,MAAK,SAACC,MAAD,OAAUV,OAAKW,WAAWD,KADzB,IAEND,KAAKJ,eAAeO,QACxB,kBAWDC,MAAA,SAAQC,WAAWC,IACT1B,EAAI,IAAI2B,YAAYF,UAAW,CAACC,8DADd,KACsBE,wEAE9C,OADA9C,KAAKH,UAAUkD,cAAc7B,GACtBA,CACV,iCAcD,WAA0B,IAAA8B,iBACjBnD,gBAAAA,KAAAA,WAAUoB,iBAAfgC,MAAAD,gBAAAE,UACH,kBASDR,MAAA,SAAQS,gBACGC,OAAAA,MAAAA,QAAKC,KAAK,CAAC,CACdC,WAAY,yBACZxB,KAAM,CACFyB,SAAUJ,eACVK,KAAMxD,KAAKF,cAEf,GACHwC,MAAK,SAAAmB,UACK,MAAA,CAACC,KAAMD,SAASC,KAAMC,GAAIC,UAAAA,QAASC,2BAA2BJ,SAASK,YACjF,GACJ,0BAODpB,MAAA,SAAgBe,UACEzD,KAAKsB,QAAQtB,KAAKuB,OAAOrB,eAAgBuD,UAC7CjC,mBAQVxB,KAAKH,UAAUkE,UAAY,GAC9B,wBAQDrB,MAAA,SAAc1B,WACIhB,KAAKsB,QAAQtB,KAAKuB,OAAOjB,MAAOU,WACpCQ,kBAIGR,cAAAA,QAAAA,UAAUA,UAC1B,gCAQD0B,MAAA,SAAsBsB,QAAQ,IAAAC,OAAAjE,KACpBkC,eAAiB,IAAIC,SAAJC,QAAY,kCAC7BoB,KAAOxD,KAAKH,UAAUqE,cAAc,QACpCnC,SAAW,IAAIoC,gBAAqBC,mBAAA,IAAIC,SAASb,MAAOc,YAC9DvC,SAASwC,OAAOP,OAAOQ,aAAa,QAASR,OAAOQ,aAAa,UAEjExE,KAAKyE,sBAAqB,GACzBnC,MAAK,WAGK,OADP2B,OAAKS,iBACET,OAAK5B,QAAQN,SAAS4C,WAChC,IACArC,MAAK,SAACC,MAAD,OAAU0B,OAAKzB,WAAWD,KAA1B,IACLqC,QAAQ1C,eAAeO,SACvB3B,OAAM,SAAAE,WAAS,OAAIiD,OAAKY,cAAc7D,UAAvB,GACnB,qCAWD,WAAqB8D,IAAAA,uEACXtB,KAAOxD,KAAKH,UAAUqE,cAAc,QAC1C,OAAO,IAAIa,SAAQ,SAAAtC,SACbuC,KAAAA,QAAAA,IAAI,QAAS,oBAAqB,iCAAiC,WACjEC,QAAAA,QAAMR,qBAAqBjB,KAAMsB,gBACjCrC,SACH,GACJ,GACJ,uCAOD,WACUe,IAAAA,KAAOxD,KAAKH,UAAUqE,cAAc,QAC1C,OAAO,IAAIa,SAAQ,SAAAtC,SACbuC,KAAAA,QAAAA,IAAI,QAAS,oBAAqB,iCAAiC,WACjEC,QAAAA,QAAMR,qBAAqBjB,MAAM,GACjC0B,EAAEC,uBAAuBC,yBACzB3C,SACH,GACJ,GACJ,oCAKD,WAAsB,IAAA4C,OAAArF,KAElBA,KAAKsF,yBACJhD,MAAK,WAMF,OALc+C,OAAK/D,QAAQ+D,OAAK9D,OAAOpB,gBAC5BqB,mBAEP6D,OAAKxF,UAAUkE,UAAY,IAExB,IACV,IACAjD,MAAM,KACV,2BASD,SAAuByE,MAAX7B,IAAAA,UAAAA,KAAMC,QAAAA,GACd6B,WAAAA,QAAUC,oBAAoBzF,KAAKH,UAAW6D,KAAMC,GACvD,iCAMD,WAAmB,IAAA+B,OAAA1F,KAEf,OAAOA,KAAKyE,uBACXnC,MAAK,WAEIqD,IAAAA,QAAcvB,mBAAAsB,OAAK7F,UAAU+F,iBAAiB,kCAGhDD,OAAAA,QAAQE,SACRF,QAAQ,GAAGG,SACJ,EAId,GACJ,+BAKD,WACSjG,KAAAA,UAAU+F,iBAAiB,6BAC3BG,SAAQ,SAAAC,IAAE,OAAIA,GAAGC,aAAa,YAAY,EAAhC,GAClB,8BAKD,WACSpG,KAAAA,UAAU+F,iBAAiB,6BAC3BG,SAAQ,SAAAC,IAAE,OAAIA,GAAGE,gBAAgB,WAAvB,GAClB,mCAKDC,mBAAAC,MAAA,SAAAC,UAAA,IAAA7C,KAAAzB,SAAAuE,OAAAtG,KAAA,OAAAmG,mBAAAI,MAAA,SAAAC,UAAA,OAAA,OAAAA,SAAAC,KAAAD,SAAAE,MAAA,KAAA,EAEgB,OAFhBF,SAAAE,KAAA,EAEgB1G,KAAK2G,mBAFrB,KAAA,EAAA,GAAAH,SAAAI,KAAA,CAAAJ,SAAAE,KAAA,EAAA,KAAA,CAAA,OAGapF,KAAAA,QAAQtB,KAAKuB,OAAOnB,wBAAyB,MAAM,GAHhEoG,SAAAK,OAAA,UAAA,KAAA,EAMI7G,KAAK0E,iBAGClB,KAAOxD,KAAKH,UAAUqE,cAAc,QACpCnC,SAAW,IAAIoC,gBAAqBC,mBAAA,IAAIC,SAASb,MAAOc,YAGzDjB,MAAAA,QAAAA,KAAK,CAAC,CACPC,WAAY,yBACZxB,KAAM,CACFyB,SAAUxB,SAAS4C,WACnBnB,KAAMxD,KAAKF,cAEf,GACHwC,MAAK,SAACmB,UACH,GAAKA,SAASqD,UAKP,CAEGC,IAAAA,KAAOC,KAAKC,MAAMxD,SAASsD,MACjCT,OAAKY,gBACLZ,OAAKhB,yBACJhD,MAAK,WAAA,OAAMgE,OAAKa,gBAAgBJ,KAA3B,IACLjG,OACJ,MAVGwF,OAAK9D,WAAW,CAACkB,KAAMD,SAASC,KAAMC,GAAIC,UAAAA,QAASC,2BAA2BJ,SAASK,cACvFwC,OAAKY,gBACLZ,OAAKhF,QAAQgF,OAAK/E,OAAOlB,wBAAyB,MAAM,GAS5D,OAAO,IACV,IACAS,OAAM,SAAAE,WAAS,OAAIsF,OAAKzB,cAAc7D,UAAvB,IApCpB,KAAA,EAAA,IAAA,MAAA,OAAAwF,SAAAY,OAAA,GAAAf,QAAArG,SAAA4B"}