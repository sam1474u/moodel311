{"version":3,"file":"modalform.min.js","sources":["../src/modalform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display a form in a modal dialogue\n *\n * Example:\n *    import ModalForm from 'core_form/modalform';\n *\n *    const modalForm = new ModalForm({\n *        formClass: 'pluginname\\\\form\\\\formname',\n *        modalConfig: {title: 'Here comes the title'},\n *        args: {categoryid: 123},\n *        returnFocus: e.target,\n *    });\n *    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (c) => window.console.log(c.detail));\n *    modalForm.show();\n *\n * See also https://docs.moodle.org/dev/Modal_and_AJAX_forms\n *\n * @module     core_form/modalform\n * @copyright  2018 Mitxel Moriana <mitxel@tresipunt.>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Y from 'core/yui';\nimport Event from 'core/event';\nimport Fragment from 'core/fragment';\nimport Pending from 'core/pending';\nimport {serialize} from './util';\n\nexport default class ModalForm {\n\n    /**\n     * Various events that can be observed.\n     *\n     * @type {Object}\n     */\n    events = {\n        // Form was successfully submitted - the response is passed to the event listener.\n        // Cancellable (but it's hardly ever needed to cancel this event).\n        FORM_SUBMITTED: 'core_form_modalform_formsubmitted',\n        // Cancel button was pressed.\n        // Cancellable (but it's hardly ever needed to cancel this event).\n        FORM_CANCELLED: 'core_form_modalform_formcancelled',\n        // User attempted to submit the form but there was client-side validation error.\n        CLIENT_VALIDATION_ERROR: 'core_form_modalform_clientvalidationerror',\n        // User attempted to submit the form but server returned validation error.\n        SERVER_VALIDATION_ERROR: 'core_form_modalform_validationerror',\n        // Error occurred while performing request to the server.\n        // Cancellable (by default calls Notification.exception).\n        ERROR: 'core_form_modalform_error',\n        // Right after user pressed no-submit button,\n        // listen to this event if you want to add JS validation or processing for no-submit button.\n        // Cancellable.\n        NOSUBMIT_BUTTON_PRESSED: 'core_form_modalform_nosubmitbutton',\n        // Right after user pressed submit button,\n        // listen to this event if you want to add additional JS validation or confirmation dialog.\n        // Cancellable.\n        SUBMIT_BUTTON_PRESSED: 'core_form_modalform_submitbutton',\n        // Right after user pressed cancel button,\n        // listen to this event if you want to add confirmation dialog.\n        // Cancellable.\n        CANCEL_BUTTON_PRESSED: 'core_form_modalform_cancelbutton',\n        // Modal was loaded and this.modal is available (but the form content may not be loaded yet).\n        LOADED: 'core_form_modalform_loaded',\n    };\n\n    /**\n     * Constructor\n     *\n     * Shows the required form inside a modal dialogue\n     *\n     * @param {Object} config parameters for the form and modal dialogue:\n     * @paramy {String} config.formClass PHP class name that handles the form (should extend \\core_form\\modal )\n     * @paramy {Object} config.modalConfig modal config - title, type, etc.\n     *              Default: {removeOnClose: true, type: ModalFactory.types.SAVE_CANCEL}\n     * @paramy {Object} config.args Arguments for the initial form rendering (for example, id of the edited entity)\n     * @paramy {String} config.saveButtonText the text to display on the Modal \"Save\" button (optional)\n     * @paramy {String} config.saveButtonClasses additional CSS classes for the Modal \"Save\" button\n     * @paramy {HTMLElement} config.returnFocus element to return focus to after the dialogue is closed\n     */\n    constructor(config) {\n        this.modal = null;\n        this.config = config;\n        this.config.modalConfig = {\n            removeOnClose: true,\n            type: ModalFactory.types.SAVE_CANCEL,\n            large: true,\n            ...(this.config.modalConfig || {}),\n        };\n        this.config.args = this.config.args || {};\n        this.futureListeners = [];\n    }\n\n    /**\n     * Initialise the modal and shows it\n     *\n     * @return {Promise}\n     */\n    show() {\n        const pendingPromise = new Pending('core_form/modalform:init');\n\n        return ModalFactory.create(this.config.modalConfig)\n        .then((modal) => {\n            this.modal = modal;\n\n            // Retrieve the form and set the modal body. We can not set the body in the modalConfig,\n            // we need to make sure that the modal already exists when we render the form. Some form elements\n            // such as date_selector inspect the existing elements on the page to find the highest z-index.\n            const formParams = serialize(this.config.args || {});\n            const bodyContent = this.getBody(formParams);\n            this.modal.setBodyContent(bodyContent);\n            bodyContent.catch(Notification.exception);\n\n            // After successfull submit, when we press \"Cancel\" or close the dialogue by clicking on X in the top right corner.\n            this.modal.getRoot().on(ModalEvents.hidden, () => {\n                this.notifyResetFormChanges()\n                .then(() => {\n                    this.modal.destroy();\n                    // Focus on the element that actually launched the modal.\n                    if (this.config.returnFocus) {\n                        this.config.returnFocus.focus();\n                    }\n                    return null;\n                })\n                .catch(() => null);\n            });\n\n            // Add the class to the modal dialogue.\n            this.modal.getModal().addClass('modal-form-dialogue');\n\n            // We catch the press on submit buttons in the forms.\n            this.modal.getRoot().on('click', 'form input[type=submit][data-no-submit]',\n                (e) => {\n                    e.preventDefault();\n                    const event = this.trigger(this.events.NOSUBMIT_BUTTON_PRESSED, e.target);\n                    if (!event.defaultPrevented) {\n                        this.processNoSubmitButton(e.target);\n                    }\n                });\n\n            // We catch the form submit event and use it to submit the form with ajax.\n            this.modal.getRoot().on('submit', 'form', (e) => {\n                e.preventDefault();\n                const event = this.trigger(this.events.SUBMIT_BUTTON_PRESSED);\n                if (!event.defaultPrevented) {\n                    this.submitFormAjax();\n                }\n            });\n\n            // Change the text for the save button.\n            if (typeof this.config.saveButtonText !== 'undefined' &&\n                typeof this.modal.setSaveButtonText !== 'undefined') {\n                this.modal.setSaveButtonText(this.config.saveButtonText);\n            }\n            // Set classes for the save button.\n            if (typeof this.config.saveButtonClasses !== 'undefined') {\n                this.setSaveButtonClasses(this.config.saveButtonClasses);\n            }\n            // When Save button is pressed - submit the form.\n            this.modal.getRoot().on(ModalEvents.save, (e) => {\n                e.preventDefault();\n                this.modal.getRoot().find('form').submit();\n            });\n\n            // When Cancel button is pressed - allow to intercept.\n            this.modal.getRoot().on(ModalEvents.cancel, (e) => {\n                const event = this.trigger(this.events.CANCEL_BUTTON_PRESSED);\n                if (event.defaultPrevented) {\n                    e.preventDefault();\n                }\n            });\n            this.futureListeners.forEach(args => this.modal.getRoot()[0].addEventListener(...args));\n            this.futureListeners = [];\n            this.trigger(this.events.LOADED, null, false);\n            return this.modal.show();\n        })\n        .then(pendingPromise.resolve);\n    }\n\n    /**\n     * Triggers a custom event\n     *\n     * @private\n     * @param {String} eventName\n     * @param {*} detail\n     * @param {Boolean} cancelable\n     * @return {CustomEvent<unknown>}\n     */\n    trigger(eventName, detail = null, cancelable = true) {\n        const e = new CustomEvent(eventName, {detail, cancelable});\n        this.modal.getRoot()[0].dispatchEvent(e);\n        return e;\n    }\n\n    /**\n     * Add listener for an event\n     *\n     * @param {array} args\n     * @example:\n     *    const modalForm = new ModalForm(...);\n     *    dynamicForm.addEventListener(modalForm.events.FORM_SUBMITTED, e => {\n     *        window.console.log(e.detail);\n     *    });\n     */\n    addEventListener(...args) {\n        if (!this.modal) {\n            this.futureListeners.push(args);\n        } else {\n            this.modal.getRoot()[0].addEventListener(...args);\n        }\n    }\n\n    /**\n     * Get form contents (to be used in ModalForm.setBodyContent())\n     *\n     * @param {String} formDataString form data in format of a query string\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    getBody(formDataString) {\n        const params = {\n            formdata: formDataString,\n            form: this.config.formClass\n        };\n        const pendingPromise = new Pending('core_form/modalform:form_body');\n        return Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: params\n        }])[0]\n        .then(response => {\n            pendingPromise.resolve();\n            return {html: response.html, js: Fragment.processCollectedJavascript(response.javascript)};\n        });\n    }\n\n    /**\n     * On exception during form processing. Caller may override\n     *\n     * @param {Object} exception\n     */\n    onSubmitError(exception) {\n        const event = this.trigger(this.events.ERROR, exception);\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        Notification.exception(exception);\n    }\n\n    /**\n     * Notifies listeners that form dirty state should be reset.\n     *\n     * @return {Promise<unknown>}\n     */\n    notifyResetFormChanges() {\n        return new Promise(resolve => {\n            Y.use('event', 'moodle-core-event', 'moodle-core-formchangechecker', () => {\n                // Ensure that modal contains a form element (it may not if the form class threw an early exception).\n                const form = this.modal.getRoot().find('form')[0];\n                if (form) {\n                    Event.notifyFormSubmitAjax(form, true);\n                    M.core_formchangechecker.reset_form_dirty_state();\n                }\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Wrapper for Event.notifyFormSubmitAjax that waits for the module to load\n     *\n     * We often destroy the form right after calling this function and we need to make sure that it actually\n     * completes before it, or otherwise it will try to work with a form that does not exist.\n     *\n     * @param {Boolean} skipValidation\n     * @return {Promise}\n     */\n    notifyFormSubmitAjax(skipValidation = false) {\n        return new Promise(resolve => {\n            Y.use('event', 'moodle-core-event', 'moodle-core-formchangechecker', () => {\n                Event.notifyFormSubmitAjax(this.modal.getRoot().find('form')[0], skipValidation);\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\n     *\n     * @param {Element} button button that was pressed\n     */\n    processNoSubmitButton(button) {\n        this.notifyFormSubmitAjax(true)\n        .then(() => {\n            // Add the button name to the form data and submit it.\n            let formData = this.modal.getRoot().find('form').serialize();\n            formData = formData + '&' + encodeURIComponent(button.getAttribute('name')) + '=' +\n                encodeURIComponent(button.getAttribute('value'));\n\n            const bodyContent = this.getBody(formData);\n            this.modal.setBodyContent(bodyContent);\n            bodyContent.catch(Notification.exception);\n\n            return null;\n        })\n        .catch(null);\n    }\n\n    /**\n     * Validate form elements\n     * @return {Promise} promise that returns true if client-side validation has passed, false if there are errors\n     */\n    validateElements() {\n        return this.notifyFormSubmitAjax()\n        .then(() => {\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            /** @var {jQuery} list of elements with errors */\n            const invalid = this.modal.getRoot().find('[aria-invalid=\"true\"], .error');\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return false;\n            }\n\n            return true;\n        });\n    }\n\n    /**\n     * Disable buttons during form submission\n     */\n    disableButtons() {\n        this.modal.getFooter().find('[data-action]').attr('disabled', true);\n    }\n\n    /**\n     * Enable buttons after form submission (on validation error)\n     */\n    enableButtons() {\n        this.modal.getFooter().find('[data-action]').removeAttr('disabled');\n    }\n\n    /**\n     * Submit the form via AJAX call to the core_form_dynamic_form WS\n     */\n    async submitFormAjax() {\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!await this.validateElements()) {\n            this.trigger(this.events.CLIENT_VALIDATION_ERROR, null, false);\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        const formData = this.modal.getRoot().find('form').serialize();\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: this.config.formClass\n            }\n        }])[0]\n        .then((response) => {\n            if (!response.submitted) {\n                // Form was not submitted because validation failed.\n                const promise = new Promise(\n                    resolve => resolve({html: response.html, js: Fragment.processCollectedJavascript(response.javascript)}));\n                this.modal.setBodyContent(promise);\n                this.enableButtons();\n                this.trigger(this.events.SERVER_VALIDATION_ERROR);\n            } else {\n                // Form was submitted properly. Hide the modal and execute callback.\n                const data = JSON.parse(response.data);\n                return this.notifyResetFormChanges()\n                .then(() => {\n                    const event = this.trigger(this.events.FORM_SUBMITTED, data);\n                    if (!event.defaultPrevented) {\n                        this.modal.hide();\n                    }\n                    return null;\n                });\n            }\n            return null;\n        })\n        .catch(exception => this.onSubmitError(exception));\n    }\n\n    /**\n     * Set the classes for the 'save' button.\n     *\n     * @method setSaveButtonClasses\n     * @param {(String)} value The 'save' button classes.\n     */\n    setSaveButtonClasses(value) {\n        const button = this.modal.getFooter().find(\"[data-action='save']\");\n        if (!button) {\n            throw new Error(\"Unable to find the 'save' button\");\n        }\n        button.removeClass().addClass(value);\n    }\n}\n"],"names":["_modal_factory","_interopRequireDefault","_modal_events","_ajax","_notification","_yui","_event","_fragment","_pending","ModalForm","config","_classCallCheck","this","_defineProperty","FORM_SUBMITTED","FORM_CANCELLED","CLIENT_VALIDATION_ERROR","SERVER_VALIDATION_ERROR","ERROR","NOSUBMIT_BUTTON_PRESSED","SUBMIT_BUTTON_PRESSED","CANCEL_BUTTON_PRESSED","LOADED","modal","modalConfig","_objectSpread","removeOnClose","type","ModalFactory","types","SAVE_CANCEL","large","args","futureListeners","_submitFormAjax","_this","pendingPromise","Pending","default","create","then","formParams","_util","serialize","bodyContent","getBody","setBodyContent","catch","Notification","exception","getRoot","on","ModalEvents","hidden","notifyResetFormChanges","destroy","returnFocus","focus","getModal","addClass","e","preventDefault","trigger","events","target","defaultPrevented","processNoSubmitButton","submitFormAjax","saveButtonText","setSaveButtonText","saveButtonClasses","setSaveButtonClasses","save","find","submit","cancel","forEach","_this$modal$getRoot$","addEventListener","show","resolve","value","eventName","detail","CustomEvent","cancelable","dispatchEvent","_len","arguments","length","Array","_key","_this$modal$getRoot$2","push","formDataString","params","formdata","form","formClass","Ajax","call","methodname","response","html","js","Fragment","processCollectedJavascript","javascript","_this2","Promise","use","Event","notifyFormSubmitAjax","M","core_formchangechecker","reset_form_dirty_state","_this3","skipValidation","button","_this4","formData","encodeURIComponent","getAttribute","_this5","invalid","first","getFooter","attr","removeAttr","regeneratorRuntime","mark","_callee","_this6","wrap","_context","prev","next","validateElements","sent","abrupt","disableButtons","submitted","data","JSON","parse","hide","promise","enableButtons","onSubmitError","stop","Error","removeClass"],"mappings":"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"}