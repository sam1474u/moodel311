{"version":3,"file":"activitychooser.min.js","sources":["../src/activitychooser.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing modules in a course.\n *\n * @module     core_course/activitychooser\n * @copyright  2020 Mathew May <mathew.solutions>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as ChooserDialogue from 'core_course/local/activitychooser/dialogue';\nimport * as Repository from 'core_course/local/activitychooser/repository';\nimport selectors from 'core_course/local/activitychooser/selectors';\nimport CustomEvents from 'core/custom_interaction_events';\nimport * as Templates from 'core/templates';\nimport * as ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\nimport Pending from 'core/pending';\n\n// Set up some JS module wide constants that can be added to in the future.\n\n// Tab config options.\nconst ALLACTIVITIESRESOURCES = 0;\nconst ONLYALL = 1;\nconst ACTIVITIESRESOURCES = 2;\n\n// Module types.\nconst ACTIVITY = 0;\nconst RESOURCE = 1;\n\n/**\n * Set up the activity chooser.\n *\n * @method init\n * @param {Number} courseId Course ID to use later on in fetchModules()\n * @param {Object} chooserConfig Any PHP config settings that we may need to reference\n */\nexport const init = (courseId, chooserConfig) => {\n    const pendingPromise = new Pending();\n\n    registerListenerEvents(courseId, chooserConfig);\n\n    pendingPromise.resolve();\n};\n\n/**\n * Once a selection has been made make the modal & module information and pass it along\n *\n * @method registerListenerEvents\n * @param {Number} courseId\n * @param {Object} chooserConfig Any PHP config settings that we may need to reference\n */\nconst registerListenerEvents = (courseId, chooserConfig) => {\n    const events = [\n        'click',\n        CustomEvents.events.activate,\n        CustomEvents.events.keyboardActivate\n    ];\n\n    const fetchModuleData = (() => {\n        let innerPromise = null;\n\n        return () => {\n            if (!innerPromise) {\n                innerPromise = new Promise((resolve) => {\n                    resolve(Repository.activityModules(courseId));\n                });\n            }\n\n            return innerPromise;\n        };\n    })();\n\n    const fetchFooterData = (() => {\n        let footerInnerPromise = null;\n\n        return (sectionId) => {\n            if (!footerInnerPromise) {\n                footerInnerPromise = new Promise((resolve) => {\n                    resolve(Repository.fetchFooterData(courseId, sectionId));\n                });\n            }\n\n            return footerInnerPromise;\n        };\n    })();\n\n    CustomEvents.define(document, events);\n\n    // Display module chooser event listeners.\n    events.forEach((event) => {\n        document.addEventListener(event, async(e) => {\n            if (e.target.closest(selectors.elements.sectionmodchooser)) {\n                let caller;\n                // We need to know who called this.\n                // Standard courses use the ID in the main section info.\n                const sectionDiv = e.target.closest(selectors.elements.section);\n                // Front page courses need some special handling.\n                const button = e.target.closest(selectors.elements.sectionmodchooser);\n\n                // If we don't have a section ID use the fallback ID.\n                // We always want the sectionDiv caller first as it keeps track of section ID's after DnD changes.\n                // The button attribute is always just a fallback for us as the section div is not always available.\n                // A YUI change could be done maybe to only update the button attribute but we are going for minimal change here.\n                if (sectionDiv !== null && sectionDiv.hasAttribute('data-sectionid')) {\n                    // We check for attributes just in case of outdated contrib course formats.\n                    caller = sectionDiv;\n                } else {\n                    caller = button;\n                }\n\n                // We want to show the modal instantly but loading whilst waiting for our data.\n                let bodyPromiseResolver;\n                const bodyPromise = new Promise(resolve => {\n                    bodyPromiseResolver = resolve;\n                });\n\n                const footerData = await fetchFooterData(caller.dataset.sectionid);\n                const sectionModal = buildModal(bodyPromise, footerData);\n\n                // Now we have a modal we should start fetching data.\n                // If an error occurs while fetching the data, display the error within the modal.\n                const data = await fetchModuleData().catch(async(e) => {\n                    const errorTemplateData = {\n                        'errormessage': e.message\n                    };\n                    bodyPromiseResolver(await Templates.render('core_course/local/activitychooser/error', errorTemplateData));\n                });\n\n                // Early return if there is no module data.\n                if (!data) {\n                    return;\n                }\n\n                // Apply the section id to all the module instance links.\n                const builtModuleData = sectionIdMapper(data, caller.dataset.sectionid, caller.dataset.sectionreturnid);\n\n                ChooserDialogue.displayChooser(\n                    sectionModal,\n                    builtModuleData,\n                    partiallyAppliedFavouriteManager(data, caller.dataset.sectionid),\n                    footerData,\n                );\n\n                bodyPromiseResolver(await Templates.render(\n                    'core_course/activitychooser',\n                    templateDataBuilder(builtModuleData, chooserConfig)\n                ));\n            }\n        });\n    });\n};\n\n/**\n * Given the web service data and an ID we want to make a deep copy\n * of the WS data then add on the section ID to the addoption URL\n *\n * @method sectionIdMapper\n * @param {Object} webServiceData Our original data from the Web service call\n * @param {Number} id The ID of the section we need to append to the links\n * @param {Number|null} sectionreturnid The ID of the section return we need to append to the links\n * @return {Array} [modules] with URL's built\n */\nconst sectionIdMapper = (webServiceData, id, sectionreturnid) => {\n    // We need to take a fresh deep copy of the original data as an object is a reference type.\n    const newData = JSON.parse(JSON.stringify(webServiceData));\n    newData.content_items.forEach((module) => {\n        module.link += '&section=' + id + '&sr=' + (sectionreturnid ?? 0);\n    });\n    return newData.content_items;\n};\n\n/**\n * Given an array of modules we want to figure out where & how to place them into our template object\n *\n * @method templateDataBuilder\n * @param {Array} data our modules to manipulate into a Templatable object\n * @param {Object} chooserConfig Any PHP config settings that we may need to reference\n * @return {Object} Our built object ready to render out\n */\nconst templateDataBuilder = (data, chooserConfig) => {\n    // Setup of various bits and pieces we need to mutate before throwing it to the wolves.\n    let activities = [];\n    let resources = [];\n    let showAll = true;\n    let showActivities = false;\n    let showResources = false;\n\n    // Tab mode can be the following [All, Resources & Activities, All & Activities & Resources].\n    const tabMode = parseInt(chooserConfig.tabmode);\n\n    // Filter the incoming data to find favourite & recommended modules.\n    const favourites = data.filter(mod => mod.favourite === true);\n    const recommended = data.filter(mod => mod.recommended === true);\n\n    // Both of these modes need Activity & Resource tabs.\n    if ((tabMode === ALLACTIVITIESRESOURCES || tabMode === ACTIVITIESRESOURCES) && tabMode !== ONLYALL) {\n        // Filter the incoming data to find activities then resources.\n        activities = data.filter(mod => mod.archetype === ACTIVITY);\n        resources = data.filter(mod => mod.archetype === RESOURCE);\n        showActivities = true;\n        showResources = true;\n\n        // We want all of the previous information but no 'All' tab.\n        if (tabMode === ACTIVITIESRESOURCES) {\n            showAll = false;\n        }\n    }\n\n    // Given the results of the above filters lets figure out what tab to set active.\n    // We have some favourites.\n    const favouritesFirst = !!favourites.length;\n    // We are in tabMode 2 without any favourites.\n    const activitiesFirst = showAll === false && favouritesFirst === false;\n    // We have nothing fallback to show all modules.\n    const fallback = showAll === true && favouritesFirst === false;\n\n    return {\n        'default': data,\n        showAll: showAll,\n        activities: activities,\n        showActivities: showActivities,\n        activitiesFirst: activitiesFirst,\n        resources: resources,\n        showResources: showResources,\n        favourites: favourites,\n        recommended: recommended,\n        favouritesFirst: favouritesFirst,\n        fallback: fallback,\n    };\n};\n\n/**\n * Given an object we want to build a modal ready to show\n *\n * @method buildModal\n * @param {Promise} bodyPromise\n * @param {String|Boolean} footer Either a footer to add or nothing\n * @return {Object} The modal ready to display immediately and render body in later.\n */\nconst buildModal = (bodyPromise, footer) => {\n    return ModalFactory.create({\n        type: ModalFactory.types.DEFAULT,\n        title: getString('addresourceoractivity'),\n        body: bodyPromise,\n        footer: footer.customfootertemplate,\n        large: true,\n        scrollable: false,\n        templateContext: {\n            classes: 'modchooser'\n        }\n    })\n    .then(modal => {\n        modal.show();\n        return modal;\n    });\n};\n\n/**\n * A small helper function to handle the case where there are no more favourites\n * and we need to mess a bit with the available tabs in the chooser\n *\n * @method nullFavouriteDomManager\n * @param {HTMLElement} favouriteTabNav Dom node of the favourite tab nav\n * @param {HTMLElement} modalBody Our current modals' body\n */\nconst nullFavouriteDomManager = (favouriteTabNav, modalBody) => {\n    favouriteTabNav.tabIndex = -1;\n    favouriteTabNav.classList.add('d-none');\n    // Need to set active to an available tab.\n    if (favouriteTabNav.classList.contains('active')) {\n        favouriteTabNav.classList.remove('active');\n        favouriteTabNav.setAttribute('aria-selected', 'false');\n        const favouriteTab = modalBody.querySelector(selectors.regions.favouriteTab);\n        favouriteTab.classList.remove('active');\n        const defaultTabNav = modalBody.querySelector(selectors.regions.defaultTabNav);\n        const activitiesTabNav = modalBody.querySelector(selectors.regions.activityTabNav);\n        if (defaultTabNav.classList.contains('d-none') === false) {\n            defaultTabNav.classList.add('active');\n            defaultTabNav.setAttribute('aria-selected', 'true');\n            defaultTabNav.tabIndex = 0;\n            defaultTabNav.focus();\n            const defaultTab = modalBody.querySelector(selectors.regions.defaultTab);\n            defaultTab.classList.add('active');\n        } else {\n            activitiesTabNav.classList.add('active');\n            activitiesTabNav.setAttribute('aria-selected', 'true');\n            activitiesTabNav.tabIndex = 0;\n            activitiesTabNav.focus();\n            const activitiesTab = modalBody.querySelector(selectors.regions.activityTab);\n            activitiesTab.classList.add('active');\n        }\n\n    }\n};\n\n/**\n * Export a curried function where the builtModules has been applied.\n * We have our array of modules so we can rerender the favourites area and have all of the items sorted.\n *\n * @method partiallyAppliedFavouriteManager\n * @param {Array} moduleData This is our raw WS data that we need to manipulate\n * @param {Number} sectionId We need this to add the sectionID to the URL's in the faves area after rerender\n * @return {Function} partially applied function so we can manipulate DOM nodes easily & update our internal array\n */\nconst partiallyAppliedFavouriteManager = (moduleData, sectionId) => {\n    /**\n     * Curried function that is being returned.\n     *\n     * @param {String} internal Internal name of the module to manage\n     * @param {Boolean} favourite Is the caller adding a favourite or removing one?\n     * @param {HTMLElement} modalBody What we need to update whilst we are here\n     */\n    return async(internal, favourite, modalBody) => {\n        const favouriteArea = modalBody.querySelector(selectors.render.favourites);\n\n        // eslint-disable-next-line max-len\n        const favouriteButtons = modalBody.querySelectorAll(`[data-internal=\"${internal}\"] ${selectors.actions.optionActions.manageFavourite}`);\n        const favouriteTabNav = modalBody.querySelector(selectors.regions.favouriteTabNav);\n        const result = moduleData.content_items.find(({name}) => name === internal);\n        const newFaves = {};\n        if (result) {\n            if (favourite) {\n                result.favourite = true;\n\n                // eslint-disable-next-line camelcase\n                newFaves.content_items = moduleData.content_items.filter(mod => mod.favourite === true);\n\n                const builtFaves = sectionIdMapper(newFaves, sectionId);\n\n                const {html, js} = await Templates.renderForPromise('core_course/local/activitychooser/favourites',\n                    {favourites: builtFaves});\n\n                await Templates.replaceNodeContents(favouriteArea, html, js);\n\n                Array.from(favouriteButtons).forEach((element) => {\n                    element.classList.remove('text-muted');\n                    element.classList.add('text-primary');\n                    element.dataset.favourited = 'true';\n                    element.setAttribute('aria-pressed', true);\n                    element.firstElementChild.classList.remove('fa-star-o');\n                    element.firstElementChild.classList.add('fa-star');\n                });\n\n                favouriteTabNav.classList.remove('d-none');\n            } else {\n                result.favourite = false;\n\n                const nodeToRemove = favouriteArea.querySelector(`[data-internal=\"${internal}\"]`);\n\n                nodeToRemove.parentNode.removeChild(nodeToRemove);\n\n                Array.from(favouriteButtons).forEach((element) => {\n                    element.classList.add('text-muted');\n                    element.classList.remove('text-primary');\n                    element.dataset.favourited = 'false';\n                    element.setAttribute('aria-pressed', false);\n                    element.firstElementChild.classList.remove('fa-star');\n                    element.firstElementChild.classList.add('fa-star-o');\n                });\n                const newFaves = moduleData.content_items.filter(mod => mod.favourite === true);\n\n                if (newFaves.length === 0) {\n                    nullFavouriteDomManager(favouriteTabNav, modalBody);\n                }\n            }\n        }\n    };\n};\n"],"names":["ChooserDialogue","_interopRequireWildcard","Repository","_selectors","_interopRequireDefault","_custom_interaction_events","Templates","ModalFactory","_pending","courseId","chooserConfig","pendingPromise","Pending","registerListenerEvents","resolve","innerPromise","footerInnerPromise","events","CustomEvents","activate","keyboardActivate","fetchModuleData","Promise","activityModules","fetchFooterData","sectionId","define","document","forEach","event","_ref","addEventListener","_asyncToGenerator","regeneratorRuntime","mark","e","caller","sectionDiv","button","bodyPromiseResolver","bodyPromise","footerData","sectionModal","data","builtModuleData","wrap","_context2","prev","next","target","closest","selectors","elements","sectionmodchooser","section","hasAttribute","dataset","sectionid","sent","buildModal","catch","_ref2","errorTemplateData","_context","errormessage","message","t0","render","t1","stop","_callee","_x2","apply","this","arguments","abrupt","sectionIdMapper","sectionreturnid","displayChooser","partiallyAppliedFavouriteManager","templateDataBuilder","_callee2","_x","webServiceData","id","newData","JSON","parse","stringify","content_items","module","link","activities","resources","showAll","showActivities","showResources","tabMode","parseInt","tabmode","favourites","filter","mod","favourite","recommended","archetype","favouritesFirst","length","default","activitiesFirst","fallback","footer","create","type","types","DEFAULT","title","_str","get_string","body","customfootertemplate","large","scrollable","templateContext","classes","then","modal","show","nullFavouriteDomManager","favouriteTabNav","modalBody","tabIndex","classList","add","contains","remove","setAttribute","querySelector","regions","favouriteTab","defaultTabNav","activitiesTabNav","activityTabNav","focus","defaultTab","activityTab","moduleData","_ref3","internal","favouriteArea","favouriteButtons","result","newFaves","builtFaves","_yield$Templates$rend","html","js","nodeToRemove","_context3","querySelectorAll","actions","optionActions","manageFavourite","find","_ref4","name","renderForPromise","replaceNodeContents","Array","from","element","favourited","firstElementChild","concat","parentNode","removeChild","_callee3","_x3","_x4","_x5"],"mappings":"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"}