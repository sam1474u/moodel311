{"version":3,"file":"manual_completion_toggle.min.js","sources":["../src/manual_completion_toggle.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Provides the functionality for toggling the manual completion state of a course module through\n * the manual completion button.\n *\n * @module      core_course/manual_completion_toggle\n * @copyright   2021 Jun Pataleta <jun@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {toggleManualCompletion} from 'core_course/repository';\nimport * as CourseEvents from 'core_course/events';\n\n/**\n * Selectors in the manual completion template.\n *\n * @type {{MANUAL_TOGGLE: string}}\n */\nconst SELECTORS = {\n    MANUAL_TOGGLE: 'button[data-action=toggle-manual-completion]',\n};\n\n/**\n * Toggle type values for the data-toggletype attribute in the core_course/completion_manual template.\n *\n * @type {{TOGGLE_UNDO: string, TOGGLE_MARK_DONE: string}}\n */\nconst TOGGLE_TYPES = {\n    TOGGLE_MARK_DONE: 'manual:mark-done',\n    TOGGLE_UNDO: 'manual:undo',\n};\n\n/**\n * Whether the event listener has already been registered for this module.\n *\n * @type {boolean}\n */\nlet registered = false;\n\n/**\n * Registers the click event listener for the manual completion toggle button.\n */\nexport const init = () => {\n    if (registered) {\n        return;\n    }\n    document.addEventListener('click', (e) => {\n        const toggleButton = e.target.closest(SELECTORS.MANUAL_TOGGLE);\n        if (toggleButton) {\n            e.preventDefault();\n            toggleManualCompletionState(toggleButton).catch(Notification.exception);\n        }\n    });\n    registered = true;\n};\n\n/**\n * Toggles the manual completion state of the module for the given user.\n *\n * @param {HTMLElement} toggleButton\n * @returns {Promise<void>}\n */\nconst toggleManualCompletionState = async(toggleButton) => {\n    // Make a copy of the original content of the button.\n    const originalInnerHtml = toggleButton.innerHTML;\n\n    // Disable the button to prevent double clicks.\n    toggleButton.setAttribute('disabled', 'disabled');\n\n    // Get button data.\n    const toggleType = toggleButton.getAttribute('data-toggletype');\n    const cmid = toggleButton.getAttribute('data-cmid');\n    const activityname = toggleButton.getAttribute('data-activityname');\n    // Get the target completion state.\n    const completed = toggleType === TOGGLE_TYPES.TOGGLE_MARK_DONE;\n\n    // Replace the button contents with the loading icon.\n    const loadingHtml = await Templates.render('core/loading', {});\n    await Templates.replaceNodeContents(toggleButton, loadingHtml, '');\n\n    try {\n        // Call the webservice to update the manual completion status.\n        await toggleManualCompletion(cmid, completed);\n\n        // All good so far. Refresh the manual completion button to reflect its new state by re-rendering the template.\n        const templateContext = {\n            cmid: cmid,\n            activityname: activityname,\n            overallcomplete: completed,\n            overallincomplete: !completed,\n            istrackeduser: true, // We know that we're tracking completion for this user given the presence of this button.\n        };\n        const renderObject = await Templates.renderForPromise('core_course/completion_manual', templateContext);\n\n        // Replace the toggle button with the newly loaded template.\n        const replacedNode = await Templates.replaceNode(toggleButton, renderObject.html, renderObject.js);\n        const newToggleButton = replacedNode.pop();\n\n        // Build manualCompletionToggled custom event.\n        const withAvailability = toggleButton.getAttribute('data-withavailability');\n        const toggledEvent = new CustomEvent(CourseEvents.manualCompletionToggled, {\n            bubbles: true,\n            detail: {\n                cmid,\n                activityname,\n                completed,\n                withAvailability,\n            }\n        });\n        // Dispatch the manualCompletionToggled custom event.\n        newToggleButton.dispatchEvent(toggledEvent);\n\n    } catch (exception) {\n        // In case of an error, revert the original state and appearance of the button.\n        toggleButton.removeAttribute('disabled');\n        toggleButton.innerHTML = originalInnerHtml;\n\n        // Show the exception.\n        Notification.exception(exception);\n    }\n};\n"],"names":["_templates","_interopRequireDefault","_notification","CourseEvents","_interopRequireWildcard","SELECTORS","TOGGLE_TYPES","registered","document","addEventListener","e","toggleButton","target","closest","preventDefault","toggleManualCompletionState","catch","Notification","exception","_ref","regeneratorRuntime","mark","originalInnerHtml","toggleType","cmid","activityname","completed","loadingHtml","templateContext","renderObject","replacedNode","newToggleButton","withAvailability","toggledEvent","wrap","_context","prev","next","innerHTML","setAttribute","getAttribute","Templates","render","sent","replaceNodeContents","overallcomplete","overallincomplete","istrackeduser","renderForPromise","replaceNode","html","js","pop","CustomEvent","manualCompletionToggled","bubbles","detail","dispatchEvent","t0","removeAttribute","stop","_callee","_x","apply","this","arguments"],"mappings":"0mCAwBAA,WAAAC,uBAAAD,YACAE,cAAAD,uBAAAC,eAEAC,4pBAAAC,CAAAD,cAOA,IAAME,wBACa,+CAQbC,8BACgB,mBASlBC,YAAa,gBAKG,WACZA,aAGJC,SAASC,iBAAiB,SAAS,SAACC,GAC1BC,IAAAA,aAAeD,EAAEE,OAAOC,QAAQR,yBAClCM,eACAD,EAAEI,iBACFC,4BAA4BJ,cAAcK,MAAMC,sBAAaC,WAEpE,IACDX,YAAa,EAChB,EAQD,OAAiCY,KAA3BJ,gCAA2BK,mBAAAC,MAAG,iBAAMV,cAAN,IAAAW,kBAAAC,WAAAC,KAAAC,aAAAC,UAAAC,YAAAC,gBAAAC,aAAAC,aAAAC,gBAAAC,iBAAAC,aAAA,OAAAb,mBAAAc,MAAA,SAAAC,UAAA,OAAA,OAAAA,SAAAC,KAAAD,SAAAE,MAAA,KAAA,EAAA,OAE1Bf,kBAAoBX,aAAa2B,UAGvC3B,aAAa4B,aAAa,WAAY,YAGhChB,WAAaZ,aAAa6B,aAAa,mBACvChB,KAAOb,aAAa6B,aAAa,aACjCf,aAAed,aAAa6B,aAAa,qBAEzCd,UAAYH,aAAejB,8BAZD6B,SAAAE,KAAA,EAeNI,mBAAUC,OAAO,eAAgB,CAAjC,GAfM,KAAA,EAgB1BD,OADAd,YAf0BQ,SAAAQ,KAAAR,SAAAE,KAAA,GAgB1BI,WAAAA,QAAUG,oBAAoBjC,aAAcgB,YAAa,IAhB/B,KAAA,GAAA,OAAAQ,SAAAC,KAAA,GAAAD,SAAAE,KAAA,IAoBtB,EAAuBb,YAAAA,wBAAAA,KAAME,WApBP,KAAA,GAAA,OAuBtBE,gBAAkB,CACpBJ,KAAMA,KACNC,aAAcA,aACdoB,gBAAiBnB,UACjBoB,mBAAoBpB,UACpBqB,eAAe,GA5BSZ,SAAAE,KAAA,GA8BDI,mBAAUO,iBAAiB,gCAAiCpB,iBA9B3D,KAAA,GAAA,OA8BtBC,aA9BsBM,SAAAQ,KAAAR,SAAAE,KAAA,GAiCDI,WAAUQ,QAAAA,YAAYtC,aAAckB,aAAaqB,KAAMrB,aAAasB,IAjCnE,KAAA,GAiCtBrB,aAjCsBK,SAAAQ,KAkCtBZ,gBAAkBD,aAAasB,MAG/BpB,iBAAmBrB,aAAa6B,aAAa,yBAC7CP,aAAe,IAAIoB,YAAYlD,aAAamD,wBAAyB,CACvEC,SAAS,EACTC,OAAQ,CACJhC,KAAAA,KACAC,aAAAA,aACAC,UAAAA,UACAM,iBAAAA,oBAIRD,gBAAgB0B,cAAcxB,cAhDFE,SAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,SAAAC,KAAA,GAAAD,SAAAuB,GAAAvB,SAAA,MAAA,IAoD5BxB,aAAagD,gBAAgB,YAC7BhD,aAAa2B,UAAYhB,kBAGzBL,cAAAA,QAAaC,UAAbiB,SAAAuB,IAxD4B,KAAA,GAAA,IAAA,MAAA,OAAAvB,SAAAyB,OAAA,GAAAC,QAAA,KAAA,CAAA,CAAA,GAAA,KAAH,IAAA1C,oTAAA,SAAA2C,IAAA,OAAA3C,KAAA4C,MAAAC,KAAAC,UAAA"}