{"version":3,"file":"button.min.js","sources":["../../src/bootstrap/button.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.6.0): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport $ from 'jquery'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'button'\nconst VERSION = '4.6.0'\nconst DATA_KEY = 'bs.button'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\nconst JQUERY_NO_CONFLICT = $.fn[NAME]\n\nconst CLASS_NAME_ACTIVE = 'active'\nconst CLASS_NAME_BUTTON = 'btn'\nconst CLASS_NAME_FOCUS = 'focus'\n\nconst SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^=\"button\"]'\nconst SELECTOR_DATA_TOGGLES = '[data-toggle=\"buttons\"]'\nconst SELECTOR_DATA_TOGGLE = '[data-toggle=\"button\"]'\nconst SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle=\"buttons\"] .btn'\nconst SELECTOR_INPUT = 'input:not([type=\"hidden\"])'\nconst SELECTOR_ACTIVE = '.active'\nconst SELECTOR_BUTTON = '.btn'\n\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_FOCUS_BLUR_DATA_API = `focus${EVENT_KEY}${DATA_API_KEY} ` +\n                          `blur${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Button {\n  constructor(element) {\n    this._element = element\n    this.shouldAvoidTriggerChange = false\n  }\n\n  // Getters\n\n  static get VERSION() {\n    return VERSION\n  }\n\n  // Public\n\n  toggle() {\n    let triggerChangeEvent = true\n    let addAriaPressed = true\n    const rootElement = $(this._element).closest(SELECTOR_DATA_TOGGLES)[0]\n\n    if (rootElement) {\n      const input = this._element.querySelector(SELECTOR_INPUT)\n\n      if (input) {\n        if (input.type === 'radio') {\n          if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE)) {\n            triggerChangeEvent = false\n          } else {\n            const activeElement = rootElement.querySelector(SELECTOR_ACTIVE)\n\n            if (activeElement) {\n              $(activeElement).removeClass(CLASS_NAME_ACTIVE)\n            }\n          }\n        }\n\n        if (triggerChangeEvent) {\n          // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input\n          if (input.type === 'checkbox' || input.type === 'radio') {\n            input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE)\n          }\n\n          if (!this.shouldAvoidTriggerChange) {\n            $(input).trigger('change')\n          }\n        }\n\n        input.focus()\n        addAriaPressed = false\n      }\n    }\n\n    if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {\n      if (addAriaPressed) {\n        this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE))\n      }\n\n      if (triggerChangeEvent) {\n        $(this._element).toggleClass(CLASS_NAME_ACTIVE)\n      }\n    }\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY)\n    this._element = null\n  }\n\n  // Static\n\n  static _jQueryInterface(config, avoidTriggerChange) {\n    return this.each(function () {\n      const $element = $(this)\n      let data = $element.data(DATA_KEY)\n\n      if (!data) {\n        data = new Button(this)\n        $element.data(DATA_KEY, data)\n      }\n\n      data.shouldAvoidTriggerChange = avoidTriggerChange\n\n      if (config === 'toggle') {\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n$(document)\n  .on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, event => {\n    let button = event.target\n    const initialButton = button\n\n    if (!$(button).hasClass(CLASS_NAME_BUTTON)) {\n      button = $(button).closest(SELECTOR_BUTTON)[0]\n    }\n\n    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {\n      event.preventDefault() // work around Firefox bug #1540995\n    } else {\n      const inputBtn = button.querySelector(SELECTOR_INPUT)\n\n      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {\n        event.preventDefault() // work around Firefox bug #1540995\n        return\n      }\n\n      if (initialButton.tagName === 'INPUT' || button.tagName !== 'LABEL') {\n        Button._jQueryInterface.call($(button), 'toggle', initialButton.tagName === 'INPUT')\n      }\n    }\n  })\n  .on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, event => {\n    const button = $(event.target).closest(SELECTOR_BUTTON)[0]\n    $(button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type))\n  })\n\n$(window).on(EVENT_LOAD_DATA_API, () => {\n  // ensure correct active class is set to match the controls' actual values/states\n\n  // find all checkboxes/readio buttons inside data-toggle groups\n  let buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS))\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i]\n    const input = button.querySelector(SELECTOR_INPUT)\n    if (input.checked || input.hasAttribute('checked')) {\n      button.classList.add(CLASS_NAME_ACTIVE)\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE)\n    }\n  }\n\n  // find all button toggles\n  buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE))\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i]\n    if (button.getAttribute('aria-pressed') === 'true') {\n      button.classList.add(CLASS_NAME_ACTIVE)\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE)\n    }\n  }\n})\n\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Button._jQueryInterface\n$.fn[NAME].Constructor = Button\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT\n  return Button._jQueryInterface\n}\n\nexport default Button\n"],"names":["_jquery","NAME","EVENT_KEY","DATA_KEY","JQUERY_NO_CONFLICT","$","fn","EVENT_CLICK_DATA_API","concat","EVENT_FOCUS_BLUR_DATA_API","DATA_API_KEY","EVENT_LOAD_DATA_API","Button","element","_classCallCheck","this","_element","shouldAvoidTriggerChange","config","avoidTriggerChange","each","$element","default","data","triggerChangeEvent","addAriaPressed","rootElement","closest","input","querySelector","type","checked","classList","contains","activeElement","removeClass","trigger","focus","hasAttribute","setAttribute","toggleClass","removeData","document","on","event","button","target","initialButton","hasClass","preventDefault","inputBtn","tagName","_jQueryInterface","call","test","window","buttons","slice","querySelectorAll","i","len","length","add","remove","getAttribute","Constructor","noConflict"],"mappings":"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"}